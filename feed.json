{
    "version": "https://jsonfeed.org/version/1",
    "title": "🐟",
    "subtitle": "",
    "icon": "http://tagbug.github.io/images/favicon.ico",
    "description": "所念皆星河",
    "home_page_url": "http://tagbug.github.io",
    "items": [
        {
            "id": "http://tagbug.github.io/2022/05/01/%E5%B0%8F%E8%AE%B01/",
            "url": "http://tagbug.github.io/2022/05/01/%E5%B0%8F%E8%AE%B01/",
            "title": "小记1",
            "date_published": "2022-05-01T14:14:13.000Z",
            "content_html": "<h1 id=\"无趣的事\"><a class=\"anchor\" href=\"#无趣的事\">#</a> 无趣的事</h1>\n<p>走在夜晚的小道，透过月色，仿佛能看到童年的自己，光影交错着，一切那么美好，又是那么虚幻。</p>\n<p>有时我想我会坐在车里，却又像是坐在火车里，车窗外的风景很好，但是我却看不清。生活像一个黑匣子，默默的记录着我的一切。</p>\n<p>我以为我从不怀念岁月，但我错了，岁月的影子早已深深刻入我的身体，成为了我的一部分。</p>\n<p>回过头来，有多少看似正确的事实际上毫无道理？只是习惯性的被动的接受着，因为存在，就变成了理所当然。</p>\n<p>其实我知道，我一直都知道，从来没有过所谓公平，有的只是多数人的正义，但我仿佛是本能的忽略了、拒绝了。</p>\n<p>恐惧，足以压倒一切的恐惧，如同独自站在悬崖边的恐惧，让我沉默，我只能沉默，而那也是我的一部分。</p>\n<p>我厌恶我的一切，却又不得不接受我的一切，就像我无法理解他人，却又不得不理解他人。</p>\n<p>人类的悲欢并不相通。某个人最想要的东西，总是被其他人所拥有，而对拥有它的人来说，又往往觉得没有太大的价值。</p>\n<p>人的特性是由什么决定的呢？</p>\n<p>社会、学校、家庭组成了现在的我，但这却又不是我。</p>\n<p>五月的风让我感到刺骨的寒冷。也许，终有一天，我会找到我。</p>\n",
            "tags": [
                "小记",
                "小记"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/04/11/MySQL%E8%BF%9B%E9%98%B6/",
            "url": "http://tagbug.github.io/2022/04/11/MySQL%E8%BF%9B%E9%98%B6/",
            "title": "MySQL进阶",
            "date_published": "2022-04-11T08:29:19.000Z",
            "content_html": "<blockquote>\n<p>存储引擎、索引、视图</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"mysql进阶\"><a class=\"anchor\" href=\"#mysql进阶\">#</a> MySQL 进阶</h1>\n<h2 id=\"存储引擎\"><a class=\"anchor\" href=\"#存储引擎\">#</a> 存储引擎</h2>\n<ol>\n<li>\n<p>体系结构：连接层、服务层、引擎层、存储层</p>\n</li>\n<li>\n<p>存储引擎选择语法</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> ENGINES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> XXX<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">INNODB</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>存储引擎特点</p>\n<p>INNODB 与 MyISAM：事务、外键、行级锁</p>\n<ul>\n<li>\n<p>InnoDB：是 Mysql 的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么 InnoDB 存储引擎是比较合适的选择。</p>\n</li>\n<li>\n<p>MyISAM（现在一般用 MongoDB）：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</p>\n</li>\n<li>\n<p>MEMORY（现在一般用 Redis）：将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY 的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>存储引擎应用</p>\n<p>INNODB：存储业务系统中对于事务、数据完整性要求较高的核心数据。</p>\n<p>MyISAM：存储业务系统的非核心事务。</p>\n</li>\n</ol>\n<h2 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h2>\n<p>索引优缺点</p>\n<table>\n<thead>\n<tr>\n<th>优势</th>\n<th>劣势</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>提高数据检索的效率，降低数据库的 IO 成本</td>\n<td>索引列也是要占用空间的。</td>\n</tr>\n<tr>\n<td>通过索引列对数据进行排序，降低数据排序的成本，降低 CPU 的消耗。</td>\n<td>索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行 INSERT、UPDATE、DELETE 时，效率降低。</td>\n</tr>\n</tbody>\n</table>\n<p>索引结构</p>\n<table>\n<thead>\n<tr>\n<th>索引结构</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B＋Tree 索引</td>\n<td>最常见的索引类型，大部分引擎都支持 B＋树索引</td>\n</tr>\n<tr>\n<td>Hash 索引</td>\n<td>底层数据结构是用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</td>\n</tr>\n<tr>\n<td>R-tree（空间索引）</td>\n<td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>\n</tr>\n<tr>\n<td>Full-text（全文索引）</td>\n<td>是一种通过建立倒排索引，快速匹配文档的方式。类似于 Lucene，Solr，ES</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"索引分类\"><a class=\"anchor\" href=\"#索引分类\">#</a> 索引分类</h3>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主键索引</td>\n<td>针对于表中主键创建的索引</td>\n<td>默认自动创建，只能由一个</td>\n<td>PRIMARY</td>\n</tr>\n<tr>\n<td>唯一索引</td>\n<td>避免同一个表中某数据列中的值重复</td>\n<td>可以有多个</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>常规索引</td>\n<td>快速定位特定数据</td>\n<td>可以有多个</td>\n<td></td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>全文索引查找的时文本中的关键词，而不是比较索引中的值</td>\n<td>可以有多个</td>\n<td>FULLTEXT</td>\n</tr>\n</tbody>\n</table>\n<p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>聚集索引 (Clustered Index)</td>\n<td>将数据存储和索引放到了一块，索引结构的叶子节点保存了行数据</td>\n<td>必须有，而且只有一个</td>\n</tr>\n<tr>\n<td>二级索引 (Secondary Index)</td>\n<td>将数据于索引分开村塾，索引结构的叶子节点关联的是对应的主键</td>\n<td>可以存在多个</td>\n</tr>\n</tbody>\n</table>\n<p>聚集索引选取规则：</p>\n<ol>\n<li>如果存在主键，主键索引就是聚集索引。</li>\n<li>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。</li>\n<li>如果表没有主键，或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引。</li>\n</ol>\n<h3 id=\"索引设计原则\"><a class=\"anchor\" href=\"#索引设计原则\">#</a> 索引设计原则</h3>\n<ol>\n<li>\n<p>针对于数据量较大，且查询比较频繁的表建立索引。</p>\n</li>\n<li>\n<p>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。</p>\n</li>\n<li>\n<p>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</p>\n</li>\n<li>\n<p>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</p>\n</li>\n<li>\n<p>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</p>\n</li>\n<li>\n<p>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</p>\n</li>\n<li>\n<p>如果索引列不能存储 NULL 值，请在创建表时使用 NOT NULL 约束它。当优化器知道每列是否包含 NULL 值时，它可以更好地确定哪个索引最有效地用于查询。</p>\n</li>\n</ol>\n<h2 id=\"sql优化\"><a class=\"anchor\" href=\"#sql优化\">#</a> SQL 优化</h2>\n<p>[待补充…]</p>\n<h2 id=\"视图\"><a class=\"anchor\" href=\"#视图\">#</a> 视图</h2>\n<h3 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h3>\n<p>创建</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">VIEW</span> 视图名称<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>列名列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span>语句 <span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">CASCADED</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>查询</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>查看创建视图的语句：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> 视图名称<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>查看视图数据（同查表）：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> 视图名称<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>修改</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>方式一（同创建视图语法）：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> <span class=\"token keyword\">VIEW</span> 视图名称<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>列名列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span>语句 <span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">CASCADED</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>方式二：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">VIEW</span> 视图名称<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>列名列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">SELECT</span>语句 <span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">CASCADED</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>删除</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> 视图名称<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> 视图名称<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"检查选项\"><a class=\"anchor\" href=\"#检查选项\">#</a> 检查选项</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">WITH</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">CASCADED</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">CHECK</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>当使用 WITH CHECK OPTION 子句创建视图时，MySQL 会通过视图检查正在更改的每个行，例如插入，更新，删除，以使其符合视图的定义。MySQL 允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，mysql 提供了两个选项：CASCADED 和 LOCAL，默认值为 CASCADED。</p>\n<p>CASCADED：当一个视图是基于另一个视图创建时，CASCADED 选项会检查所有向下关联的视图的限制，即使所依赖的视图没有定义 CHECK OPTION</p>\n<p>LOCAL：当一个视图是基于另一个视图创建时，LOCAL 选项会检查所有向下关联的视图的限制，如果所依赖的视图没有定义 CHECK OPTION，则不检查对应的视图限制</p>\n<h3 id=\"更新条件\"><a class=\"anchor\" href=\"#更新条件\">#</a> 更新条件</h3>\n<p>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一 项，则该视图不可更新：</p>\n<ol>\n<li>聚合函数或窗口函数（SUM ()、 MIN ()、 MAX ()、 COUNT () 等）</li>\n<li>DISTINCT</li>\n<li>GROUP BY</li>\n<li>HAVING</li>\n<li>UNION 或者 UNION ALL</li>\n</ol>\n<h3 id=\"视图的作用\"><a class=\"anchor\" href=\"#视图的作用\">#</a> 视图的作用</h3>\n<ol>\n<li>\n<p>简单</p>\n<p>视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件。</p>\n</li>\n<li>\n<p>安全</p>\n<p>数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据</p>\n</li>\n<li>\n<p>数据独立</p>\n<p>视图可帮助用户屏蔽真实表结构变化带来的影响。</p>\n</li>\n</ol>\n",
            "tags": [
                "数据库",
                "MySQL",
                "MySQL",
                "数据库"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/04/11/React%E8%BF%9B%E9%98%B6/",
            "url": "http://tagbug.github.io/2022/04/11/React%E8%BF%9B%E9%98%B6/",
            "title": "React进阶",
            "date_published": "2022-04-11T07:45:58.000Z",
            "content_html": "<blockquote>\n<p>JSX、数据流通、虚拟 DOM、调和与 Diff、setState、Fiber 架构、React 合成事件、性能优化、设计模式等</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"react进阶\"><a class=\"anchor\" href=\"#react进阶\">#</a> React 进阶</h1>\n<h2 id=\"jsx\"><a class=\"anchor\" href=\"#jsx\">#</a> JSX</h2>\n<p>三个问题：</p>\n<ol>\n<li>JSX 的本质是什么，他和 JS 之间到底是什么关系？</li>\n<li>为什么要用 JSX？不用会有什么后果？</li>\n<li>JSX 背后的功能模块是什么，这个功能模块都做了哪些事情？</li>\n</ol>\n<p>JSX 是 JS 的一种<strong>语法扩展</strong>，他和模板语言很接近，但充分具备 JS 的能力。</p>\n<p>JSX 本质上是一种<strong>语法糖</strong>，允许开发者使用类 HTML 标签语法来创建<strong>虚拟 DOM</strong></p>\n<p>通过 Babel：JSX — 编译 —&gt; React.createElement ()，如果不用 JSX，也可以使用 React.createElement ()</p>\n<p>JSX 的编译执行流程大致如下：</p>\n<pre class=\"mermaid graph\"><svg id=\"mermaid-1649724270599\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"55\" style=\"max-width: 1334.125px;\" viewBox=\"0 0 1334.125 55\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath LS-JSX语法 LE-Bebel\" id=\"L-JSX语法-Bebel\" style=\"opacity: 1;\"><path class=\"path\" d=\"M93.984375,27.5L118.984375,27.5L143.984375,27.5\" marker-end=\"url(#arrowhead35)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead35\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-Bebel LE-React.createElement调用\" id=\"L-Bebel-React.createElement调用\" style=\"opacity: 1;\"><path class=\"path\" d=\"M204.40625,27.5L245.40625,27.5L286.40625,27.5\" marker-end=\"url(#arrowhead36)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead36\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-React.createElement调用 LE-ReactElement调用\" id=\"L-React.createElement调用-ReactElement调用\" style=\"opacity: 1;\"><path class=\"path\" d=\"M489.796875,27.5L514.796875,27.5L539.796875,27.5\" marker-end=\"url(#arrowhead37)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead37\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-ReactElement调用 LE-虚拟DOM\" id=\"L-ReactElement调用-虚拟DOM\" style=\"opacity: 1;\"><path class=\"path\" d=\"M690.96875,27.5L715.96875,27.5L740.96875,27.5\" marker-end=\"url(#arrowhead38)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead38\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-虚拟DOM LE-ReactDOM.render\" id=\"L-虚拟DOM-ReactDOM.render\" style=\"opacity: 1;\"><path class=\"path\" d=\"M825.5625,27.5L898.5625,27.5L971.5625,27.5\" marker-end=\"url(#arrowhead39)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead39\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-ReactDOM.render LE-真实DOM\" id=\"L-ReactDOM.render-真实DOM\" style=\"opacity: 1;\"><path class=\"path\" d=\"M1117.78125,27.5L1174.78125,27.5L1231.78125,27.5\" marker-end=\"url(#arrowhead40)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead40\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"translate(245.40625,27.5)\" style=\"opacity: 1;\"><g transform=\"translate(-16,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"32\" height=\"18.734375\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">编译</tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"translate(898.5625,27.5)\" style=\"opacity: 1;\"><g transform=\"translate(-48,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"95.984375\" height=\"18.734375\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">作为参数传入</tspan></text></g></g><g class=\"edgeLabel\" transform=\"translate(1174.78125,27.5)\" style=\"opacity: 1;\"><g transform=\"translate(-32,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"63.984375\" height=\"18.734375\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">渲染处理</tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"flowchart-JSX语法-7\" transform=\"translate(50.9921875,27.5)\" style=\"opacity: 1;\"><rect rx=\"19.5\" ry=\"19.5\" x=\"-42.9921875\" y=\"-19.5\" width=\"85.984375\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-28.1171875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">JSX语法</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-Bebel-8\" transform=\"translate(174.1953125,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-30.2109375\" y=\"-19.5\" width=\"60.421875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-20.2109375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">Bebel</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-React.createElement调用-9\" transform=\"translate(388.1015625,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-101.6953125\" y=\"-19.5\" width=\"203.390625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-91.6953125,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">React.createElement调用</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-ReactElement调用-10\" transform=\"translate(615.3828125,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-75.5859375\" y=\"-19.5\" width=\"151.171875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-65.5859375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">ReactElement调用</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-虚拟DOM-11\" transform=\"translate(783.265625,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-42.296875\" y=\"-19.5\" width=\"84.59375\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32.296875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">虚拟DOM</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-ReactDOM.render-12\" transform=\"translate(1044.671875,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-73.109375\" y=\"-19.5\" width=\"146.21875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-63.109375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">ReactDOM.render</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-真实DOM-13\" transform=\"translate(1278.953125,27.5)\" style=\"opacity: 1;\"><rect rx=\"19.5\" ry=\"19.5\" x=\"-47.171875\" y=\"-19.5\" width=\"94.34375\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32.296875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">真实DOM</tspan></text></g></g></g></g></g></g></svg></pre><h2 id=\"从react15到react16的生命周期变化\"><a class=\"anchor\" href=\"#从react15到react16的生命周期变化\">#</a> 从 React15 到 React16 + 的生命周期变化</h2>\n<p>组件的初始化渲染流程：</p>\n<pre class=\"mermaid graph\"><svg id=\"mermaid-1649724272409\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"500\" style=\"max-width: 434.90625px;\" viewBox=\"0 0 434.90625 500\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath LS-React15 LE-组件挂载\" id=\"L-React15-组件挂载\" style=\"opacity: 1;\"><path class=\"path\" d=\"M100.7265625,47.5L100.2265625,72L100.2265625,97\" marker-end=\"url(#arrowhead32)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead32\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-组件挂载 LE-construct\" id=\"L-组件挂载-construct\" style=\"opacity: 1;\"><path class=\"path\" d=\"M100.2265625,136L100.2265625,161L100.2265625,186\" marker-end=\"url(#arrowhead33)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead33\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-construct LE-componentWillMount\" id=\"L-construct-componentWillMount\" style=\"opacity: 1;\"><path class=\"path\" d=\"M100.2265625,225L100.2265625,250L100.2265625,275\" marker-end=\"url(#arrowhead34)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead34\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-componentWillMount LE-render\" id=\"L-componentWillMount-render\" style=\"opacity: 1;\"><path class=\"path\" d=\"M100.2265625,314L100.2265625,339L100.2265625,364\" marker-end=\"url(#arrowhead35)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead35\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-render LE-componentDidMount\" id=\"L-render-componentDidMount\" style=\"opacity: 1;\"><path class=\"path\" d=\"M100.2265625,403L100.2265625,428L100.2265625,453\" marker-end=\"url(#arrowhead36)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead36\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-React16 LE-组件挂载2\" id=\"L-React16-组件挂载2\" style=\"opacity: 1;\"><path class=\"path\" d=\"M335.1796875,47.5L334.6796875,72L334.6796875,97\" marker-end=\"url(#arrowhead37)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead37\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-组件挂载2 LE-construct2\" id=\"L-组件挂载2-construct2\" style=\"opacity: 1;\"><path class=\"path\" d=\"M334.6796875,136L334.6796875,161L334.6796875,186\" marker-end=\"url(#arrowhead38)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead38\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-construct2 LE-getDerivedFromProps\" id=\"L-construct2-getDerivedFromProps\" style=\"opacity: 1;\"><path class=\"path\" d=\"M334.6796875,225L334.6796875,250L334.6796875,275\" marker-end=\"url(#arrowhead39)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead39\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-getDerivedFromProps LE-render2\" id=\"L-getDerivedFromProps-render2\" style=\"opacity: 1;\"><path class=\"path\" d=\"M334.6796875,314L334.6796875,339L334.6796875,364\" marker-end=\"url(#arrowhead40)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead40\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-render2 LE-componentDidMount2\" id=\"L-render2-componentDidMount2\" style=\"opacity: 1;\"><path class=\"path\" d=\"M334.6796875,403L334.6796875,428L334.6796875,453\" marker-end=\"url(#arrowhead41)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead41\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"flowchart-React15-12\" transform=\"translate(100.2265625,27.5)\" style=\"opacity: 1;\"><polygon points=\"0,0 76.84375,0 76.84375,-39 0,-39 0,0 -8,0 84.84375,0 84.84375,-39 -8,-39 -8,0\" transform=\"translate(-38.421875,19.5)\" class=\"label-container\"></polygon><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-28.421875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">React15</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-组件挂载-13\" transform=\"translate(100.2265625,116.5)\" style=\"opacity: 1;\"><rect rx=\"19.5\" ry=\"19.5\" x=\"-92.2265625\" y=\"-19.5\" width=\"184.453125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-77.3515625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">组件挂载: 初始化渲染</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-construct-14\" transform=\"translate(100.2265625,205.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-51.4453125\" y=\"-19.5\" width=\"102.890625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-41.4453125,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">constructor</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-componentWillMount-15\" transform=\"translate(100.2265625,294.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-85.84375\" y=\"-19.5\" width=\"171.6875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-75.84375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">componentWillMount</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-render-16\" transform=\"translate(100.2265625,383.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-34.1640625\" y=\"-19.5\" width=\"68.328125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-24.1640625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">render</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-componentDidMount-17\" transform=\"translate(100.2265625,472.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-83.78125\" y=\"-19.5\" width=\"167.5625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-73.78125,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">componentDidMount</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-React16-18\" transform=\"translate(334.6796875,27.5)\" style=\"opacity: 1;\"><polygon points=\"0,0 85.234375,0 85.234375,-39 0,-39 0,0 -8,0 93.234375,0 93.234375,-39 -8,-39 -8,0\" transform=\"translate(-42.6171875,19.5)\" class=\"label-container\"></polygon><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32.6171875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">React16+</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-组件挂载2-19\" transform=\"translate(334.6796875,116.5)\" style=\"opacity: 1;\"><rect rx=\"19.5\" ry=\"19.5\" x=\"-92.2265625\" y=\"-19.5\" width=\"184.453125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-77.3515625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">组件挂载: 初始化渲染</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-construct2-20\" transform=\"translate(334.6796875,205.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-51.4453125\" y=\"-19.5\" width=\"102.890625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-41.4453125,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">constructor</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-getDerivedFromProps-21\" transform=\"translate(334.6796875,294.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-86.375\" y=\"-19.5\" width=\"172.75\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-76.375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">getDerivedFromProps</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-render2-22\" transform=\"translate(334.6796875,383.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-34.1640625\" y=\"-19.5\" width=\"68.328125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-24.1640625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">render</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-componentDidMount2-23\" transform=\"translate(334.6796875,472.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-87.6484375\" y=\"-19.5\" width=\"175.296875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-77.6484375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">componentDidMount2</tspan></text></g></g></g></g></g></g></svg></pre><p>组件的更新流程：</p>\n<pre class=\"mermaid graph\"><svg id=\"mermaid-1649724273713\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"589\" style=\"max-width: 1029.96875px;\" viewBox=\"0 0 1029.96875 589\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath LS-React15 LE-组件更新\" id=\"L-React15-组件更新\" style=\"opacity: 1;\"><path class=\"path\" d=\"M118.8984375,47.5L118.3984375,72L118.3984375,97\" marker-end=\"url(#arrowhead40)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead40\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-组件更新 LE-componentWillReceiveProps\" id=\"L-组件更新-componentWillReceiveProps\" style=\"opacity: 1;\"><path class=\"path\" d=\"M118.3984375,136L118.3984375,161L118.3984375,186\" marker-end=\"url(#arrowhead41)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead41\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-componentWillReceiveProps LE-shouldComponentUpdate\" id=\"L-componentWillReceiveProps-shouldComponentUpdate\" style=\"opacity: 1;\"><path class=\"path\" d=\"M118.3984375,225L118.3984375,250L193.8548981741573,275\" marker-end=\"url(#arrowhead42)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead42\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-shouldComponentUpdate LE-componentWillUpdate\" id=\"L-shouldComponentUpdate-componentWillUpdate\" style=\"opacity: 1;\"><path class=\"path\" d=\"M252.7109375,314L252.7109375,339L252.7109375,364\" marker-end=\"url(#arrowhead43)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead43\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-componentWillUpdate LE-render\" id=\"L-componentWillUpdate-render\" style=\"opacity: 1;\"><path class=\"path\" d=\"M252.7109375,403L252.7109375,428L252.7109375,453\" marker-end=\"url(#arrowhead44)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead44\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-render LE-componentDidUpdate\" id=\"L-render-componentDidUpdate\" style=\"opacity: 1;\"><path class=\"path\" d=\"M252.7109375,492L252.7109375,517L252.7109375,542\" marker-end=\"url(#arrowhead45)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead45\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-组件更新3 LE-shouldComponentUpdate\" id=\"L-组件更新3-shouldComponentUpdate\" style=\"opacity: 1;\"><path class=\"path\" d=\"M387.0234375,225L387.0234375,250L311.5669768258427,275\" marker-end=\"url(#arrowhead46)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead46\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-React16 LE-组件更新2\" id=\"L-React16-组件更新2\" style=\"opacity: 1;\"><path class=\"path\" d=\"M650.8828125,47.5L650.3828125,72L650.3828125,97\" marker-end=\"url(#arrowhead47)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead47\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-组件更新2 LE-getDerivedStateFromProps\" id=\"L-组件更新2-getDerivedStateFromProps\" style=\"opacity: 1;\"><path class=\"path\" d=\"M650.3828125,136L650.3828125,161L650.3828125,186\" marker-end=\"url(#arrowhead48)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead48\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-getDerivedStateFromProps LE-shouldComponentUpdate2\" id=\"L-getDerivedStateFromProps-shouldComponentUpdate2\" style=\"opacity: 1;\"><path class=\"path\" d=\"M650.3828125,225L650.3828125,250L724.3601650280899,275\" marker-end=\"url(#arrowhead49)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead49\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-shouldComponentUpdate2 LE-render2\" id=\"L-shouldComponentUpdate2-render2\" style=\"opacity: 1;\"><path class=\"path\" d=\"M782.0625,314L782.0625,339L782.0625,364\" marker-end=\"url(#arrowhead50)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead50\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-render2 LE-getSnapshotBeforeUpdate\" id=\"L-render2-getSnapshotBeforeUpdate\" style=\"opacity: 1;\"><path class=\"path\" d=\"M782.0625,403L782.0625,428L782.0625,453\" marker-end=\"url(#arrowhead51)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead51\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-getSnapshotBeforeUpdate LE-componentDidUpdate2\" id=\"L-getSnapshotBeforeUpdate-componentDidUpdate2\" style=\"opacity: 1;\"><path class=\"path\" d=\"M782.0625,492L782.0625,517L782.0625,542\" marker-end=\"url(#arrowhead52)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead52\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-组件更新4 LE-shouldComponentUpdate2\" id=\"L-组件更新4-shouldComponentUpdate2\" style=\"opacity: 1;\"><path class=\"path\" d=\"M913.7421875,225L913.7421875,250L839.7648349719101,275\" marker-end=\"url(#arrowhead53)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead53\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"flowchart-React15-18\" transform=\"translate(118.3984375,27.5)\" style=\"opacity: 1;\"><polygon points=\"0,0 76.84375,0 76.84375,-39 0,-39 0,0 -8,0 84.84375,0 84.84375,-39 -8,-39 -8,0\" transform=\"translate(-38.421875,19.5)\" class=\"label-container\"></polygon><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-28.421875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">React15</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-组件更新-19\" transform=\"translate(118.3984375,116.5)\" style=\"opacity: 1;\"><rect rx=\"19.5\" ry=\"19.5\" x=\"-100.2265625\" y=\"-19.5\" width=\"200.453125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-85.3515625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">组件更新: 由父组件触发</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-componentWillReceiveProps-20\" transform=\"translate(118.3984375,205.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-110.3984375\" y=\"-19.5\" width=\"220.796875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-100.3984375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">componentWillReceiveProps</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-shouldComponentUpdate-21\" transform=\"translate(252.7109375,294.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-99.8125\" y=\"-19.5\" width=\"199.625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-89.8125,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">shouldComponentUpdate</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-componentWillUpdate-22\" transform=\"translate(252.7109375,383.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-89.609375\" y=\"-19.5\" width=\"179.21875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-79.609375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">componentWillUpdate</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-render-23\" transform=\"translate(252.7109375,472.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-34.1640625\" y=\"-19.5\" width=\"68.328125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-24.1640625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">render</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-componentDidUpdate-24\" transform=\"translate(252.7109375,561.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-87.546875\" y=\"-19.5\" width=\"175.09375\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-77.546875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">componentDidUpdate</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-组件更新3-25\" transform=\"translate(387.0234375,205.5)\" style=\"opacity: 1;\"><rect rx=\"19.5\" ry=\"19.5\" x=\"-108.2265625\" y=\"-19.5\" width=\"216.453125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-93.3515625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">组件更新: 由组件自身触发</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-React16-27\" transform=\"translate(650.3828125,27.5)\" style=\"opacity: 1;\"><polygon points=\"0,0 85.234375,0 85.234375,-39 0,-39 0,0 -8,0 93.234375,0 93.234375,-39 -8,-39 -8,0\" transform=\"translate(-42.6171875,19.5)\" class=\"label-container\"></polygon><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32.6171875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">React16+</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-组件更新2-28\" transform=\"translate(650.3828125,116.5)\" style=\"opacity: 1;\"><rect rx=\"19.5\" ry=\"19.5\" x=\"-100.2265625\" y=\"-19.5\" width=\"200.453125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-85.3515625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">组件更新: 由父组件触发</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-getDerivedStateFromProps-29\" transform=\"translate(650.3828125,205.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-105.1328125\" y=\"-19.5\" width=\"210.265625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-95.1328125,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">getDerivedStateFromProps</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-shouldComponentUpdate2-30\" transform=\"translate(782.0625,294.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-103.875\" y=\"-19.5\" width=\"207.75\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-93.875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">shouldComponentUpdate2</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-render2-31\" transform=\"translate(782.0625,383.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-34.1640625\" y=\"-19.5\" width=\"68.328125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-24.1640625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">render</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-getSnapshotBeforeUpdate-32\" transform=\"translate(782.0625,472.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-103.09375\" y=\"-19.5\" width=\"206.1875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-93.09375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">getSnapshotBeforeUpdate</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-componentDidUpdate2-33\" transform=\"translate(782.0625,561.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-91.6015625\" y=\"-19.5\" width=\"183.203125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-81.6015625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">componentDidUpdate2</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-组件更新4-34\" transform=\"translate(913.7421875,205.5)\" style=\"opacity: 1;\"><rect rx=\"19.5\" ry=\"19.5\" x=\"-108.2265625\" y=\"-19.5\" width=\"216.453125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-93.3515625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">组件更新: 由组件自身触发</tspan></text></g></g></g></g></g></g></svg></pre><p>Question：</p>\n<ol>\n<li>为什么要用 getDerivedStateFromProps 代替 componentWillReceiveProps？</li>\n<li>消失的 componentWillUpdate 与新增的 getSnapshotBeforeUpdate</li>\n</ol>\n<p>在 getDerivedStateFromProps 内，能且仅能做一件事：<strong>实现基于 props 派生 state</strong></p>\n<p>React16 实际上是在强制推行：<strong>只用 getDerivedStateFromProps 来完成 props 到 state 的映射</strong>这一最佳实践</p>\n<p>getSnapshotBeforeUpdate 的返回值会作为第三个参数给到 componentDidUpdate，它的执行时机是在 render 方法之后，真实 DOM 更新之前，同时获取到更新前的真实 DOM 和更新前后的 state＆props 信息</p>\n<p>getSnapshotBeforeUpdate 与 componentDidUpdate 一起涵盖过时的 componentWillUpdate 的所有用例，本质上还是 componentWillUpdate 阻碍了 Fiber 架构</p>\n<h3 id=\"fiber架构\"><a class=\"anchor\" href=\"#fiber架构\">#</a> Fiber 架构</h3>\n<blockquote>\n<p>为什么要更换为 Fiber 架构：我认为主要是因为原本的同步渲染过程可能会有大计算量的工作导致渲染阻塞，从而造成不好的用户体验</p>\n<p>为什么异步能提高用户体验：其实无论是同步还是异步，总计算量是不变的，关键在于<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5qYXZhc2NyaXB0LmluZm8vZXZlbnQtbG9vcA==\">宏任务、微任务、事件循环</span>的相关概念</p>\n</blockquote>\n<p>Fiber 是 React16 对 React 核心算法的一次重写，使得原本<strong>同步</strong>的渲染过程变为<strong>异步</strong>的。</p>\n<p>Fiber 会将一个大的更新任务拆解为许多小任务，使得渲染过程<strong>可以被打断</strong>，执行优先级更高的任务。</p>\n<p>生命周期在 Render 阶段是可以被打断的，而在 Commit 阶段则总是同步执行的，详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcm9qZWN0cy53b2p0ZWttYWoucGwvcmVhY3QtbGlmZWN5Y2xlLW1ldGhvZHMtZGlhZ3JhbS8=\">下图</span>：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220408144619496.png\" alt=\"image-20220408144619496\"></p>\n<p>从 React15 到 React16，废弃了如下 API：</p>\n<ul>\n<li>componentWillMount</li>\n<li>componentWilUpdate</li>\n<li>componentWillReceiveProps</li>\n</ul>\n<p>因为这些 API 都处于 Render 阶段，可能会被重复执行，而且很多情况下会被滥用，做一些<strong>副作用</strong>操作（setState、异步 Fetch 请求、操作 DOM 等），而这些操作都有一些共同特点：</p>\n<ol>\n<li>完全可以转移到其他生命周期（尤其是 componentDidXXX）中做</li>\n<li>在 Fiber 带来的异步渲染机制下，可能会导致非常严重的 Bug</li>\n</ol>\n<h2 id=\"数据流通\"><a class=\"anchor\" href=\"#数据流通\">#</a> 数据流通</h2>\n<p>基本数据通信：</p>\n<ol>\n<li>\n<p>父 - 子组件通信：父组件通过 props 将数据传递给子组件</p>\n</li>\n<li>\n<p>子 - 父组件通信：子组件调用父组件传递的回调函数，通过函数入参将数据传递给父组件</p>\n</li>\n<li>\n<p>兄弟组件通信：化简为子父组件通信 + 父子组件通信</p>\n</li>\n</ol>\n<p>基本数据通信方式虽然可以解决绝大多数问题，但遇到多层嵌套组件的通信时，就显得不那么优雅。</p>\n<p>进阶数据通信：</p>\n<ol>\n<li>\n<p>“发布 - 订阅模式”：添加订阅 on ()，发布事件 emit ()，删除订阅 off ()</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 简单实例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PubSub</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> listeners<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> listener<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">let</span> list<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">let</span> list<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>fun <span class=\"token operator\">=></span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> listener<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">let</span> list<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token operator\">?.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>fun <span class=\"token operator\">=></span> fun <span class=\"token operator\">!==</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>React Context API：通过 Context.Provider 和 Context.Consumer，数据可以穿透多层组件，让所有包裹在 Context 下的组件都能同步生产者和消费者之间的数据</p>\n</li>\n<li>\n<p>第三方数据流框架 Redux：解决应用复杂度越来越高、需要维护的状态越来越多、组件间的关系越来越难处理的问题。Redux 是 JavaScript<strong> 状态容器</strong>，提供可预测的状态管理。在 Redux 中，store 是一个单一的数据源，而且是只读的，action 是对变化的描述，reducer 负责接收 action，对变化处理并更新 &amp; 分发新的状态。<strong>✨在 Redux 的整个工作流程中，数据流是严格单向的。</strong></p>\n</li>\n</ol>\n<h2 id=\"react-hooks\"><a class=\"anchor\" href=\"#react-hooks\">#</a> React-Hooks</h2>\n<p>Why React-Hooks：</p>\n<ol>\n<li>告别难以理解的 ES6 Class 语法（主要是 this 的问题）</li>\n<li>解决业务逻辑难以拆分的问题（类组件中逻辑会与生命周期耦合，难以复用，逻辑像是被打散了一样融进生命周期中）</li>\n<li>使状态逻辑复用变得简单可行</li>\n<li>函数组件从设计思想上来看更加契合 React 的理念</li>\n</ol>\n<p>Hooks 能够帮助实现业务逻辑的聚合，避免复杂的组件和冗余的代码（HOC 和 Render Props 也可以解决，但却会造成简单问题复杂化，嵌套地狱等问题）</p>\n<p>要注意的是，Hooks 也有其局限性，例如：</p>\n<ol>\n<li>Hooks 暂时还不能完全为函数组件补齐类组件的能力</li>\n<li>函数组件轻量，但这可能使它不能很好消化复杂</li>\n<li>Hooks 在使用层面有着严格的规则约束（不能嵌套在条件判断、循环中等）</li>\n</ol>\n<h3 id=\"为什么不能将hooks嵌套在条件判断等逻辑中\"><a class=\"anchor\" href=\"#为什么不能将hooks嵌套在条件判断等逻辑中\">#</a> 为什么不能将 Hooks 嵌套在条件判断等逻辑中？</h3>\n<p>以 useState 为例，Hooks 的底层实现为<strong>链表</strong>，在组件初始化时，调用的 Hooks 会形成一个单向链表，之后的更新渲染时，底层 api 会根据 useState 的<strong>调用顺序</strong>来确定应该返回哪个对应的 state，所以当初始化调用的 state 顺序和更新渲染时调用顺序不一致，useState 就会返回错误的 state，产生严重 bug</p>\n<h2 id=\"虚拟dom\"><a class=\"anchor\" href=\"#虚拟dom\">#</a> 虚拟 DOM</h2>\n<p>虚拟 DOM 本质上是 JS 和 DOM 之间的一个映射缓存，在形态上表现为：一个能够描述 DOM 结构及其属性信息的<strong> JS 对象</strong></p>\n<p>为什么会有虚拟 DOM：主要源于对 DOM 操作的解决方案</p>\n<ol>\n<li>因为原生 API 难用，所以最早期使用 jQuery 来操作 DOM，降低研发成本</li>\n<li>但因为 jQuery 本质上还是一个工具，并不能从根本上解决 DOM 操作量过大情况下前端侧的压力，所以进一步的，出现了早期模板引擎，让开发者不用关心 DOM 操作，而只需关系数据和数据的变化</li>\n<li>而早期模板引擎却有一个致命的问题：不能做太复杂的事情，性能表现不尽人意，数据变化时，单纯是全部销毁之前的 DOM 节点然后生成新的，而最后出现的虚拟 DOM 可以完美解决这个问题（JS 算法的计算量和 DOM 操作的计算量不在一个层级上）</li>\n</ol>\n<p>选用虚拟 DOM 技术，本质上还是在于<strong>研发体验 / 研发效率</strong>上，虚拟 DOM 不一定会带来更高的性能，但它能够在提供更爽、更高效的研发模式的同时仍然保持一个还不错的性能，虚拟 DOM 的价值不在性能，而在于别处</p>\n<p>虚拟 DOM 解决了哪些关键问题：</p>\n<ol>\n<li>研发体验 / 研发效率的问题</li>\n<li>跨平台</li>\n</ol>\n<h2 id=\"调和reconciler与diff算法\"><a class=\"anchor\" href=\"#调和reconciler与diff算法\">#</a> 调和（Reconciler）与 Diff 算法</h2>\n<p>调和（协调）：将虚拟 DOM 与真实 DOM 的状态进行同步，是一个<strong>使一致</strong>的过程</p>\n<p>Diff：判断要删除、新建、移动的节点，是一个<strong>找不同</strong>的过程</p>\n<p><strong>Reconciler != Diff</strong>，但是一般说调和（协调）就是指的 Diff 算法，因为 Diff 算法确实是调和过程最具代表性的一环</p>\n<h3 id=\"diff\"><a class=\"anchor\" href=\"#diff\">#</a> Diff</h3>\n<p>Diff 算法的设计思想：</p>\n<ul>\n<li>若两个组件属于同一个类型，它们将拥有相同的 DOM 树形结构</li>\n<li>处于同一层级的一组子节点，可用通过设置 key 作为唯一标识从而维持各个节点在不同渲染过程中的稳定性</li>\n</ul>\n<p>Diff 逻辑：</p>\n<ul>\n<li>Diff 算法性能突破的关键点在于 “分层对比”</li>\n<li>类型一致的节点才有继续 Diff 的必要性</li>\n<li>key 属性的设置，可以帮我们尽可能重用同一层级内的节点</li>\n</ul>\n<p>比较过程大致如下：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220410125901052.png\" alt=\"image-20220410125901052\"></p>\n<p>key 属性帮助 React “记住” 节点，以尽可能重用同一层级内的节点：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220410130109270.png\" alt=\"image-20220410130109270\"></p>\n<p>React15 的栈调和大致如上，主要特征为同步的 “<strong>树递归</strong>”，其本质还是递归算法，而 React16 + 则采用了 Fiber 调和</p>\n<h2 id=\"setstate是同步异步\"><a class=\"anchor\" href=\"#setstate是同步异步\">#</a> setState 是同步 / 异步？</h2>\n<blockquote>\n<p>这里指的是 React15，React16 + 之后，setState 也被 Fiber 化，处理逻辑又有所不同</p>\n</blockquote>\n<p>本质上来说：setState 并不单纯是同步 / 异步的，setState 的表现会因调用场景的不同而不同，表现为异步主要<strong>与 React 的批量更新（BatchUpdate）和事务（Transaction）机制有关</strong></p>\n<p>当 setState 在组件内部的方法被调用时，React 会在调用该方法前手动开启事务，在方法结束后手动关闭事务，而当事务处于开启状态时，setState 的所有变更会被存入批量更新队列中（ <code>pendingStateQueue.push(state)</code> -&gt; <code>dirtyComponents.push(component)</code> ），当事务处于关闭状态时，所有的操作都会即时被应用（视图也会被即时更新）</p>\n<p>所以当 setState 在 ReactComponent 中被调用时，表现就是 “异步”（其实也不是真正的异步）的，而在 setTimeOut () 中被调用时，表现则为同步</p>\n<h2 id=\"栈调和与fiber调和\"><a class=\"anchor\" href=\"#栈调和与fiber调和\">#</a> 栈调和与 Fiber 调和</h2>\n<p>在 React15 的栈调和机制下，由于本质上还是树结构的深度优先遍历算法，因此避免不了使用递归，当树节点较多，应用较复杂时，就难免会导致 Diff 长时间霸占 JavaScript 主线程，使得用户界面无响应。</p>\n<p>React16 + 采用的 Fiber：</p>\n<ul>\n<li>从架构角度来看，是对 React 核心算法的重写</li>\n<li>从编码角度来看，是 React 内部所定义的一种数据结构</li>\n<li>从工作流的角度来看，节点保存了组件需要更新的状态和副作用</li>\n</ul>\n<p>Fiber 架构是为了实现 “增量渲染”，即渲染任务的可中断、可恢复，并给不同的任务赋予不同的优先级</p>\n<p>Fiber 下的渲染流程：</p>\n<pre class=\"mermaid graph\"><svg id=\"mermaid-1649724275119\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"55\" style=\"max-width: 682.734375px;\" viewBox=\"0 0 682.734375 55\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath LS-Scheduler LE-Reconiciler\" id=\"L-Scheduler-Reconiciler\" style=\"opacity: 1;\"><path class=\"path\" d=\"M238.15625,27.5L263.15625,27.5L288.15625,27.5\" marker-end=\"url(#arrowhead12)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead12\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-Reconiciler LE-Renderer\" id=\"L-Reconiciler-Renderer\" style=\"opacity: 1;\"><path class=\"path\" d=\"M447.265625,27.5L472.265625,27.5L497.265625,27.5\" marker-end=\"url(#arrowhead13)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead13\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"flowchart-Scheduler-3\" transform=\"translate(123.078125,27.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-115.078125\" y=\"-19.5\" width=\"230.15625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-105.078125,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">Scheduler--调度更新的优先级</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-Reconiciler-4\" transform=\"translate(367.7109375,27.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-79.5546875\" y=\"-19.5\" width=\"159.109375\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-69.5546875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">Reconiciler--找不同</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-Renderer-5\" transform=\"translate(586,27.5)\" style=\"opacity: 1;\"><rect rx=\"5\" ry=\"5\" x=\"-88.734375\" y=\"-19.5\" width=\"177.46875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-78.734375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">Renderer--渲染`不同`</tspan></text></g></g></g></g></g></g></svg></pre><p>Fiber 架构对生命周期的影响：</p>\n<pre class=\"mermaid graph\"><svg id=\"mermaid-1649724276394\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"144\" style=\"max-width: 549.53125px;\" viewBox=\"0 0 549.53125 144\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath LS-render开始 LE-停不下来的递归计算\" id=\"L-render开始-停不下来的递归计算\" style=\"opacity: 1;\"><path class=\"path\" d=\"M90.53932584269663,52.5L132.546875,27.5L157.546875,27.5\" marker-end=\"url(#arrowhead16)\" style=\"fill:none;stroke-width:2px;stroke-dasharray:3;\"></path><defs><marker id=\"arrowhead16\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-停不下来的递归计算 LE-commit提交渲染\" id=\"L-停不下来的递归计算-commit提交渲染\" style=\"opacity: 1;\"><path class=\"path\" d=\"M321.546875,27.5L362.546875,27.5L424.34023876404495,52.5\" marker-end=\"url(#arrowhead17)\" style=\"fill:none;stroke-width:2px;stroke-dasharray:3;\"></path><defs><marker id=\"arrowhead17\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-render开始 LE-工作单元的集合\" id=\"L-render开始-工作单元的集合\" style=\"opacity: 1;\"><path class=\"path\" d=\"M90.53932584269663,91.5L132.546875,116.5L173.546875,116.5\" marker-end=\"url(#arrowhead18)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead18\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-工作单元的集合 LE-commit提交渲染\" id=\"L-工作单元的集合-commit提交渲染\" style=\"opacity: 1;\"><path class=\"path\" d=\"M305.546875,116.5L362.546875,116.5L424.34023876404495,91.5\" marker-end=\"url(#arrowhead19)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead19\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"translate(362.546875,27.5)\" style=\"opacity: 1;\"><g transform=\"translate(-16,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"32\" height=\"19\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">同步</tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"translate(362.546875,116.5)\" style=\"opacity: 1;\"><g transform=\"translate(-16,-9.5)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"32\" height=\"19\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">异步</tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"flowchart-render开始-6\" transform=\"translate(57.7734375,72)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-49.7734375\" y=\"-19.5\" width=\"99.546875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-39.7734375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">render开始</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-停不下来的递归计算-7\" transform=\"translate(239.546875,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-82\" y=\"-19.5\" width=\"164\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-72,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">停不下来的递归计算</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-commit提交渲染-8\" transform=\"translate(472.5390625,72)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-68.9921875\" y=\"-19.5\" width=\"137.984375\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-58.9921875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">commit提交渲染</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-工作单元的集合-10\" transform=\"translate(239.546875,116.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-66\" y=\"-19.5\" width=\"132\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-56,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">工作单元的集合</tspan></text></g></g></g></g></g></g></svg></pre><h2 id=\"reactdomrender调用栈\"><a class=\"anchor\" href=\"#reactdomrender调用栈\">#</a> ReactDOM.render 调用栈</h2>\n<p>调用栈大致分为三个阶段：</p>\n<ol>\n<li>初始化阶段：render 调用到 scheduleUpdateOnFiber</li>\n<li>render 阶段：scheduleUpdateOnFiber 到 commitRoot</li>\n<li>commit 阶段：commitRoot 到结束</li>\n</ol>\n<p>初始化阶段只负责一件事：完成 Fiber 树基本实体（fiberRoot）的创建。大体流程如下：</p>\n<ul>\n<li>请求当前 Fiber 节点的 lane（优先级）</li>\n<li>结合 lane（优先级）创建当前 Fiber 节点的 update 对象，并将其入队</li>\n<li>调度当前节点（rootFiber）</li>\n</ul>\n<p>在 ReactDOM.render 中，perfromSyncWorkOnRoot 是 render 阶段的起点，render 阶段的任务就是完成 Fiber 树的构建，它是整个渲染链路中最核心的一环（虽然 Fiber 架构下，render 阶段是可打断的，然而 perfromSyncWorkOnRoot 却让 render 阶段是同步执行的）</p>\n<p><strong>那么为什么 ReactDOM.render 触发的首次渲染是个同步过程呢？</strong></p>\n<p>原因在于 React 在 16 + 后都有 3 种启动方式：</p>\n<ol>\n<li><strong>legacy 模式</strong>：ReactDOM.render (&lt;App/&gt;, rootNode)，不支持 Fiber 架构带来的新功能，触发的仍然是同步的渲染链路</li>\n<li>blocking 模式：ReactDOM.createBlockingRoot (rootNode).render (&lt;App/&gt;)，目前作为向第三种模式迁移的中间态</li>\n<li><strong>concurrent 模式</strong>：ReactDOM.createRoot (rootNode).render (&lt;App/&gt;)，这种模式开启了所有的新功能，最终的稳定模式</li>\n</ol>\n<p>其实不同的渲染模式在挂载阶段的差异，本质上来说是 mode 属性的差异，<strong>mode 属性</strong>决定这个工作流是同步的还是异步的</p>\n<p>Fiber 架构一定是异步渲染吗？React16 + 如果没有开启 Concurrent 模式还能叫 Fiber 架构吗？</p>\n<p>从动机上来看，Fiber 架构的设计确实是为了 Concurrent 而存在。但是 Fiber 架构在 React 中并不能够和异步渲染画严格的等号，因为它是一种同时兼容了同步渲染与异步渲染的设计</p>\n<h2 id=\"dom原生事件与react合成事件\"><a class=\"anchor\" href=\"#dom原生事件与react合成事件\">#</a> DOM 原生事件与 React 合成事件</h2>\n<p>一个页面往往会被绑定许许多多的事件，而页面接收事件的顺序，就是<strong>事件流</strong></p>\n<p>一个事件的传播过程以此经历 3 个阶段：事件捕获阶段、目标阶段、事件冒泡阶段</p>\n<p>通过 event.target 可以拿到实际触发事件的那个元素，因而可以实现<strong>事件委托</strong>：把多个子元素的同一类型的监听逻辑合并到父元素上，通过一个监听函数来管理的行为</p>\n<p>当事件在具体的 DOM 节点上被触发后，最终都会冒泡到 document 上，因此 React 事件系统就可以依赖事件委托，在 document 上绑定统一的事件处理程序，将事件分发到具体的组件实例</p>\n<p>React 合成事件在底层抹平了不同浏览器的差异，在上层面向开发者暴露统一的、稳定的、与 DOM 原生事件相同的事件接口，虽然合成事件并不是原生 DOM 事件，但也存了原生 DOM 事件的引用（e.nativeEvent）</p>\n<p>React 通过 path 数组模拟事件的捕获阶段和冒泡阶段传播顺序，然后再分别执行按照顺序的事件处理回调函数</p>\n<h2 id=\"react应用性能优化\"><a class=\"anchor\" href=\"#react应用性能优化\">#</a> React 应用性能优化</h2>\n<p>前端项目普适的性能优化手段对 React 应用也适用（如资源加载过程优化、减少重绘与回流、服务端渲染、启用 CDN 等），不过 React 还有一些特色的优化手段：</p>\n<ol>\n<li>\n<p>使用<strong> shouldComponentUpdate</strong> 规避冗余的更新逻辑</p>\n<p>shouldComponentUpdate 的默认返回值为 true，也就是<strong>无条件 re-render</strong>，我们可以手动增加逻辑，实现有条件的重绘，减少不必要的重绘</p>\n</li>\n<li>\n<p><strong>PureComponent</strong>+<strong>Immutable.js</strong></p>\n<p>PureComponent 能提前安排好更新判定逻辑（内置了 shouldComponentUpdate 的 props 和 state 的浅比较逻辑），然而 PureComponent 自带的浅比较逻辑会有两个问题：</p>\n<ol>\n<li>若数据内容没变，但是引用变了，会认为数据发生了变化，从而导致触发不必要的渲染</li>\n<li>若数据内容变了，但是引用没变，会认为数据没有发生变化，从而导致不渲染</li>\n</ol>\n<p>PureComponent 浅比较带来的问题本质上是对 “变化” 的判断不够精准导致的，而 Immutable 则可以让变化无处遁形</p>\n</li>\n<li>\n<p><strong>React.memo</strong> 与<strong> useMemo</strong></p>\n<p>在函数组件中，也有类似 shouldComponentUpdate/PureComponent 的工具可以使用：React.memo，通过它包装的函数组件会记住前一次的渲染结果，当入参不变时，渲染结果会直接复用前一次的结果</p>\n<p>useMemo 与 React.memo 类似：</p>\n<p>React.memo 控制是否需要重渲染一个组件</p>\n<p>useMemo 控制的则是是否需要重复执行某一段逻辑</p>\n</li>\n</ol>\n<h2 id=\"react应用设计模式\"><a class=\"anchor\" href=\"#react应用设计模式\">#</a> React 应用设计模式</h2>\n<h3 id=\"高阶组件hoc\"><a class=\"anchor\" href=\"#高阶组件hoc\">#</a> 高阶组件（HOC）</h3>\n<p>作为 React 中最经典的组件逻辑复用方式，HOC 在概念上沿袭了 HOF（高阶函数），高阶组件本质是一个函数，接收一个组件作为参数，返回值为一个新的组件，通过 HOC 可以复用同样的逻辑</p>\n<h3 id=\"render-props\"><a class=\"anchor\" href=\"#render-props\">#</a> Render Props</h3>\n<p>Render Props 本身作为一个函数组件，它可以接受一个函数作为入参，这个函数可以处理自己的逻辑并返回一个新的组件，相对于 HOC 而言会更加灵活</p>\n<h3 id=\"单一职责-有状态组件-无状态组件\"><a class=\"anchor\" href=\"#单一职责-有状态组件-无状态组件\">#</a> 单一职责、有状态组件、无状态组件</h3>\n<p>单一职责指的是：一个类或者模块有且只有一个改变的原因</p>\n<p>当一个组件内部不维护 state 时，它就是一个无状态组件，无状态组件也有一些别名，如 “容器组件”、“展示组件” 等，它最核心的的特点就是：把数据处理和页面渲染这两个工作剥离开来</p>\n<p>说到底，React 组件做的事无非两件：<strong>处理数据</strong>（数据的获取、格式化、分发等）和<strong>渲染界面</strong></p>\n<p>按照单一职责的原则，我们应该将数据处理和渲染界面的逻辑分离到不同的组件中，这样功能模块的组合将会更加灵活，也会更加有利于逻辑的复用</p>\n<h3 id=\"设计模式解决不了所有的问题\"><a class=\"anchor\" href=\"#设计模式解决不了所有的问题\">#</a> 设计模式解决不了所有的问题</h3>\n<p>就 React 来说，无论是高阶组件，还是 Render Props，两者的出现都是为了弥补类组件在 “逻辑复用” 这个层面的不灵活性，然而两者都有一些无法解决的问题，如：嵌套地狱、较高的学习成本、props 属性命名冲突等</p>\n<p>当 React-Hooks 出现后，现在我们想去复用一段逻辑时，首选应该是 “<a href=\"https://react.docschina.org/docs/hooks-custom.html\"><strong>自定义 Hook</strong></a>”</p>\n<h2 id=\"react17承上启下的基石\"><a class=\"anchor\" href=\"#react17承上启下的基石\">#</a> React17：承上启下的基石</h2>\n<blockquote>\n<p>React17 没有增加任何的新特性，但是这个版本会使 React 自身的升级变得更容易，而且让不同版本的 React 互相嵌套变得更加容易</p>\n<p>React17 开启了渐进式升级的新篇章，将项目从 React17 迁移至 18、19 等更新的版本时，可以部分升级</p>\n</blockquote>\n<p>React17 带来的新变化：</p>\n<ul>\n<li>新的 JSX 转换逻辑</li>\n<li>事件系统重构</li>\n<li>Lane 模型的引入</li>\n</ul>\n<p>在 React17 + 中：</p>\n<ul>\n<li>\n<p>编写 JSX 代码将不再需要手动导入 React 包，编译器会针对 JSX 代码进行自动导入（react/jsx-runtime）和优化</p>\n</li>\n<li>\n<p>事件系统将放弃利用 document 来做事件的中心化管控，管控相关的逻辑被转移到了每个 React 组件自己的容器 DOM 节点中</p>\n<p>放弃了事件池的设计，现在随时都可以拿到合成事件的 target 对象</p>\n</li>\n</ul>\n<h2 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTJyNHkxcjd2TA==\">React 高级进阶教程_2021</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFjdC5kb2NzY2hpbmEub3JnLw==\">React 官网</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5qYXZhc2NyaXB0LmluZm8v\">现代 JavaScript 教程</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "React",
                "Web",
                "前端",
                "React"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/03/26/%E5%85%B3%E4%BA%8EVSCode%E6%8E%A8%E9%80%81GitHub%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE403%E7%9A%84%E9%97%AE%E9%A2%98/",
            "url": "http://tagbug.github.io/2022/03/26/%E5%85%B3%E4%BA%8EVSCode%E6%8E%A8%E9%80%81GitHub%E5%9B%A2%E9%98%9F%E9%A1%B9%E7%9B%AE403%E7%9A%84%E9%97%AE%E9%A2%98/",
            "title": "关于VSCode推送GitHub团队项目403的问题",
            "date_published": "2022-03-26T11:17:10.000Z",
            "content_html": "<blockquote>\n<p>403 原因、解决方案</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"403原因\"><a class=\"anchor\" href=\"#403原因\">#</a> 403 原因</h1>\n<blockquote>\n<p>前置条件：不是网络问题（SSL Connection Reset）、使用 idea 可以推送但用 vscode 就会 403</p>\n</blockquote>\n<p>推测 403（Permission Denied）是由于 VSCode 自带的扩展 &quot;GitHub&quot; 登录 GitHub 账号时请求的权限不足导致。</p>\n<p>当使用 &quot;GitHub&quot; 扩展登录账号时，请求的权限可能只有 <code>private repo</code> ，所以其他你拥有权限但不是你独有的仓库，当使用 <code>Git: 克隆</code> 查找 GitHub 项目时，这些仓库也不会显示在列表中，并且搜索也不会起作用，当你从本地推送云端时，也会出现权限不足的问题。</p>\n<p>终端输出大致如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">git</span> push origin main:main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>remote: Permission to xxx/xxx denied to xxx.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fatal: unable to access <span class=\"token string\">'https://github.com/xxx/xxx.git/'</span><span class=\"token builtin class-name\">:</span> The requested URL returned error: <span class=\"token number\">403</span></pre></td></tr></table></figure><h1 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h1>\n<ol>\n<li>\n<p>对权限不足的项目更改 origin.url，使用独立认证</p>\n<p>更改 remote 地址如：  <code>https://&#123;token&#125;@github.com/xxx/xxx.git</code> （token 指的是 Personal access tokens）</p>\n</li>\n<li>\n<p>使用 git 全局配置</p>\n<p>执行如下命令： <code>git config --global url.&quot;https://&#123;token&#125;@github.com&quot;.insteadOf &quot;https://github.com&quot;</code> <br>\n 或者</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">git</span> config --global github.token <span class=\"token operator\">&lt;</span>你的GitHub token<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">git</span> config --global github.user <span class=\"token operator\">&lt;</span>github上的用户名<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "VSCode",
                "VSCode"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/03/25/MySQL%E5%9F%BA%E7%A1%80/",
            "url": "http://tagbug.github.io/2022/03/25/MySQL%E5%9F%BA%E7%A1%80/",
            "title": "MySQL基础",
            "date_published": "2022-03-25T13:27:08.000Z",
            "content_html": "<blockquote>\n<p>SQL 语法（DDL/DML/DQL/DCL）、函数、约束、多表查询、事务</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"mysql基础\"><a class=\"anchor\" href=\"#mysql基础\">#</a> MySQL 基础</h1>\n<h2 id=\"sql语法\"><a class=\"anchor\" href=\"#sql语法\">#</a> SQL 语法</h2>\n<h3 id=\"数据定义ddl\"><a class=\"anchor\" href=\"#数据定义ddl\">#</a> 数据定义（DDL）</h3>\n<ol>\n<li>\n<p>数据库操作</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">DATABASES</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> 数据库名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">USE</span> 数据库名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DATABASE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DATABASE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> 数据库名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>表操作</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">TABLES</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token punctuation\">(</span>字段 字段类型<span class=\"token punctuation\">,</span>字段 字段类型<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">DESC</span> 表名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token punctuation\">[</span><span class=\"token keyword\">ADD</span><span class=\"token operator\">/</span><span class=\"token keyword\">MODIFY</span><span class=\"token operator\">/</span>CHANGE<span class=\"token operator\">/</span><span class=\"token keyword\">DROP</span><span class=\"token operator\">/</span><span class=\"token keyword\">RENAME</span> <span class=\"token keyword\">TO</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"增删改dml\"><a class=\"anchor\" href=\"#增删改dml\">#</a> 增删改（DML）</h3>\n<ol>\n<li>\n<p>增加数据</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表名<span class=\"token punctuation\">(</span>字段<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>字段<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>修改数据</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> 表名 <span class=\"token keyword\">SET</span> 字段<span class=\"token number\">1</span><span class=\"token operator\">=</span>值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 字段<span class=\"token number\">2</span><span class=\"token operator\">=</span>值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span> 条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>删除数据</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> 表名 <span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span> 条件<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"数据查询dql\"><a class=\"anchor\" href=\"#数据查询dql\">#</a> 数据查询（DQL）</h3>\n<ol>\n<li>\n<p>DQL 语句</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> 字段列表 <span class=\"token operator\">-</span><span class=\"token operator\">></span> 字段名<span class=\"token punctuation\">[</span><span class=\"token keyword\">AS</span><span class=\"token punctuation\">]</span>别名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> 表名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHERE</span> 条件列表 <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">></span> <span class=\"token operator\">>=</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&lt;=</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;></span> <span class=\"token operator\">like</span> <span class=\"token operator\">between</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">and</span> <span class=\"token operator\">in</span> <span class=\"token operator\">and</span> <span class=\"token operator\">or</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> 分组字段列表</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">HAVING</span> 分组后条件列表 <span class=\"token operator\">-</span><span class=\"token operator\">></span> 分组后过滤</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> 排序字段列表 <span class=\"token operator\">-</span><span class=\"token operator\">></span> 升序<span class=\"token keyword\">ASC</span>，降序<span class=\"token keyword\">DESC</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">LIMIT</span> 分页参数 <span class=\"token operator\">-</span><span class=\"token operator\">></span> 起始索引（从<span class=\"token number\">0</span>开始），每页展示记录数</pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"用户管理dcl\"><a class=\"anchor\" href=\"#用户管理dcl\">#</a> 用户管理（DCL）</h3>\n<ol>\n<li>\n<p>用户管路</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span> IDENTIFIED <span class=\"token keyword\">WITH</span> mysql_native_password <span class=\"token keyword\">BY</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>权限控制</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">GRANT</span> 权限列表 <span class=\"token keyword\">ON</span> 数据库名<span class=\"token punctuation\">.</span>表名 <span class=\"token keyword\">TO</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">REVOKE</span> 权限列表 <span class=\"token keyword\">ON</span> 数据库名<span class=\"token punctuation\">.</span>表名 <span class=\"token keyword\">FROM</span> <span class=\"token string\">'用户名'</span><span class=\"token variable\">@'主机名'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<ol>\n<li>\n<p>字符串函数</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CONCAT<span class=\"token punctuation\">,</span> LOWER<span class=\"token punctuation\">,</span> UPPER<span class=\"token punctuation\">,</span> LPAD<span class=\"token punctuation\">,</span> RPAD<span class=\"token punctuation\">,</span> TRIM<span class=\"token punctuation\">,</span> SUBSTRING</pre></td></tr></table></figure></li>\n<li>\n<p>数值函数</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CEIL<span class=\"token punctuation\">,</span> FLOOR<span class=\"token punctuation\">,</span> MOD<span class=\"token punctuation\">,</span> RAND<span class=\"token punctuation\">,</span> ROUND</pre></td></tr></table></figure></li>\n<li>\n<p>日期函数</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CURDATE<span class=\"token punctuation\">,</span> CURTIME<span class=\"token punctuation\">,</span> NOW<span class=\"token punctuation\">,</span> <span class=\"token keyword\">YEAR</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">MONTH</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">DAY</span><span class=\"token punctuation\">,</span> DATE_ADD<span class=\"token punctuation\">,</span> DATEDIFF</pre></td></tr></table></figure></li>\n<li>\n<p>流程函数</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">IF</span><span class=\"token punctuation\">,</span> IFNULL<span class=\"token punctuation\">,</span> <span class=\"token keyword\">CASE</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">WHEN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">THEN</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">ELSE</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">END</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"约束\"><a class=\"anchor\" href=\"#约束\">#</a> 约束</h2>\n<ol>\n<li>非空约束： <code>NOT NULL</code></li>\n<li>唯一约束： <code>UNIQUE</code></li>\n<li>主键约束： <code>PRIMARY KEY</code> （自增：AUTO_INCREMENT）</li>\n<li>默认约束： <code>DEFAULT</code></li>\n<li>检查约束： <code>CHECK</code></li>\n<li>外键约束： <code>FOREIGN KEY</code></li>\n</ol>\n<h3 id=\"外键约束语法\"><a class=\"anchor\" href=\"#外键约束语法\">#</a> 外键约束语法</h3>\n<p>添加外键</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    字段名 数据类型<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token keyword\">CONSTRAINT</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>外键名称<span class=\"token punctuation\">]</span> <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>外键字段<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> 主表<span class=\"token punctuation\">(</span>主表列名<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">CONSTRAINT</span> 外键名称 <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>外键字段名<span class=\"token punctuation\">)</span> <span class=\"token keyword\">REFERENCES</span> 主表<span class=\"token punctuation\">(</span>主表列名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>删除外键</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名 <span class=\"token keyword\">DROP</span> <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> 外键名称<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>删除 / 更新行为</p>\n<table>\n<thead>\n<tr>\n<th>行为</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NO ACTION</td>\n<td>当在父表中删除／更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除／更新。（与 RESTRICT 一致）</td>\n</tr>\n<tr>\n<td>RESTRICT</td>\n<td>当在父表中删除／更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除／更新。（与 NO ACTION 一致）</td>\n</tr>\n<tr>\n<td>CASCADE</td>\n<td>当在父表中删除／更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除／更新外键在子表中的记录。</td>\n</tr>\n<tr>\n<td>SET NULL</td>\n<td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为 null（这就要求该外键允许取 null）。</td>\n</tr>\n<tr>\n<td>SET DEFAULT</td>\n<td>父表有变更时，子表将外键列设置成一个默认的值（Innodb 不支持）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"多表查询\"><a class=\"anchor\" href=\"#多表查询\">#</a> 多表查询</h2>\n<ol>\n<li>\n<p>多表关系</p>\n<ul>\n<li>一对多：在多的一方设置外键，关联一的一方的主键</li>\n<li>多对多：建立中间表，中间表包含两个外键，关联两张表的主键</li>\n<li>一对一：用于表结构拆分，在其中任何一方设置外键（UNIQUE），关联另一方的主键</li>\n</ul>\n</li>\n<li>\n<p>多表查询</p>\n<ul>\n<li>\n<p>内连接</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>隐式：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">FROM</span> 表A<span class=\"token punctuation\">,</span>表B <span class=\"token keyword\">WHERE</span> 条件<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>显式：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">FROM</span> 表A <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> 表B <span class=\"token keyword\">ON</span> 条件<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure></li>\n<li>\n<p>外连接</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>左外：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">FROM</span> 表A <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> 表B <span class=\"token keyword\">ON</span> 条件<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>右外：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">SELECT</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">FROM</span> 表A <span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> 表B <span class=\"token keyword\">ON</span> 条件<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure></li>\n<li>\n<p>自连接：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">FROM</span> 表A 别名<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>表A 别名<span class=\"token number\">2</span> <span class=\"token keyword\">WHERE</span> 条件<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure></li>\n<li>\n<p>子查询：标量子查询、列子查询、行子查询、表子查询</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h2>\n<ol>\n<li>\n<p>事务简介：事务是一组操作的集合，这组操作，要么全部执行成功，要么全部执行失败。</p>\n</li>\n<li>\n<p>事务操作</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">START</span> <span class=\"token keyword\">TRANSACTION</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">-- 开启事务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">COMMIT</span><span class=\"token operator\">/</span><span class=\"token keyword\">ROLLBACK</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">-- 提交／回滚事务</span></pre></td></tr></table></figure></li>\n<li>\n<p>事务四大特性<br>\n原子性（<strong>A</strong>tomicity）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation）、持久性（<strong>D</strong>urability）</p>\n</li>\n<li>\n<p>并发事务问题<br>\n赃读、不可重复读、幻读</p>\n</li>\n<li>\n<p>事务隔离级别<br>\n READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ、SERIALIZABLE</p>\n</li>\n</ol>\n",
            "tags": [
                "数据库",
                "MySQL",
                "MySQL",
                "数据库"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/02/01/TypeScript%E5%85%A5%E9%97%A8/",
            "url": "http://tagbug.github.io/2022/02/01/TypeScript%E5%85%A5%E9%97%A8/",
            "title": "TypeScript入门",
            "date_published": "2022-02-01T08:25:38.000Z",
            "content_html": "<blockquote>\n<p>什么是 TypeScript、基本语法、高级类型、工程应用</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"typescript入门\"><a class=\"anchor\" href=\"#typescript入门\">#</a> TypeScript 入门</h1>\n<h2 id=\"什么是typescript\"><a class=\"anchor\" href=\"#什么是typescript\">#</a> 什么是 TypeScript</h2>\n<h3 id=\"发展历史\"><a class=\"anchor\" href=\"#发展历史\">#</a> 发展历史</h3>\n<p>2012-10：微软发布了 TypeScript 第一个版本 (0.8)</p>\n<p>2014-10：Angular 发布了基于 TypeScript 的 2.0 版本</p>\n<p>2015-04：微软发布了 Visual Studio Code</p>\n<p>2016-05：@types/react 发布，TypeScript 可开发 React</p>\n<p>2020-09：Vue 发布了 3.0 版本，官方支持 TypeScript</p>\n<p>2021-11：v4.5 版本发布</p>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h3>\n<p>JS：<strong>动态类型</strong>、弱类型</p>\n<p>TS：<strong>静态类型</strong>、弱类型</p>\n<p>JS 的本质是脚本语言，当被执行时才会匹配类型</p>\n<p>TS 是不能被直接执行的，会在执行前进行类型匹配，编译后才能执行</p>\n<h3 id=\"优势\"><a class=\"anchor\" href=\"#优势\">#</a> 优势</h3>\n<ol>\n<li>\n<p>静态类型：</p>\n<p>可读性增强：基于语法解析 TSDoc，ide 增强</p>\n<p>可维护性增强：在编译阶段暴露大部分错误 =&gt; 多人合作的大型项目中，获得更好的稳定性和开发效率</p>\n</li>\n<li>\n<p>JS 的超集：</p>\n<p>包含于兼容所有 JS 特性，支持共存</p>\n<p>支持渐进式引入与升级</p>\n</li>\n</ol>\n<h2 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<h3 id=\"基础数据类型\"><a class=\"anchor\" href=\"#基础数据类型\">#</a> 基础数据类型</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 字符串 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> q<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/* 数字 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> w<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 布尔值 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> e<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* null */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> r<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* undefined */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> t<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"对象类型\"><a class=\"anchor\" href=\"#对象类型\">#</a> 对象类型</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> bytedancer<span class=\"token operator\">:</span> IBytedancer <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    jobId<span class=\"token operator\">:</span> <span class=\"token number\">9303245</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'Lin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sex<span class=\"token operator\">:</span> <span class=\"token string\">'man'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    hobby<span class=\"token operator\">:</span> <span class=\"token string\">'swimming'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IBytedancer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* 只读属性：约束属性不可在对象初始化外赋值 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">readonly</span> jobId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    sex<span class=\"token operator\">:</span> <span class=\"token string\">'man'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'woman'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'other'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/* 可选属性：定义该属性可以不存在 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    hobby<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/* 任意属性：约束所有对象属性都必须是该属性的子类型 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/* 报错：无法分配到 \"jobId\"，因为它是只读属性 */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>bytedancer<span class=\"token punctuation\">.</span>job1d <span class=\"token operator\">=</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/* 成功：任意属性标注下可以添加任意属性 */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>bytedancer<span class=\"token punctuation\">.</span>plateform <span class=\"token operator\">=</span> <span class=\"token string\">'data '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/* 报错：缺少属性 \"name\", hobby 可缺省 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">const</span> bytedancer2<span class=\"token operator\">:</span> IBytedancer <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    jobId<span class=\"token operator\">:</span> <span class=\"token number\">89757</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    sex<span class=\"token operator\">:</span> <span class=\"token string\">'woman'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"函数类型\"><a class=\"anchor\" href=\"#函数类型\">#</a> 函数类型</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mult</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"函数重载\"><a class=\"anchor\" href=\"#函数重载\">#</a> 函数重载</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 对 getDate 函数进行重载，timestamp 为可缺省参数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'string '</span> <span class=\"token punctuation\">,</span> timestamp<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'date'</span> <span class=\"token punctuation\">,</span> timestamp<span class=\"token operator\">?</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'date'</span><span class=\"token punctuation\">,</span> timestamp<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Date <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'date'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x: Date</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2018-01-10'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  y: string</span></pre></td></tr></table></figure><figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IGetDate</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'string'</span> <span class=\"token punctuation\">,</span> timestamp<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'date'</span><span class=\"token punctuation\">,</span> timestamp<span class=\"token operator\">?</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'date '</span><span class=\"token punctuation\">,</span> timestamp<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Date <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 不能将类型 \"(type: any,timestamp: any) => string | Date\" 分配给类型 \"IGetDate\"。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>不能将类型 \"string | Date\" 分配给类型 “string”。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>不能将类型 \"Date\" 分配给类型 “string\"。ts (2322) */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> getDate2<span class=\"token operator\">:</span> <span class=\"token function-variable function\">IGetDate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">type</span> <span class=\"token operator\">==</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"数组类型\"><a class=\"anchor\" href=\"#数组类型\">#</a> 数组类型</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*「类型＋方括号」表示 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IArr1</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/* 泛型表示 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IArr2</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">number</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 元祖表示 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IArr3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 接口表示 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IArr4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> arr1<span class=\"token operator\">:</span> IArr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> arr2<span class=\"token operator\">:</span> IArr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> arr3<span class=\"token operator\">:</span> IArr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> arr4<span class=\"token operator\">:</span> IArr4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"泛型\"><a class=\"anchor\" href=\"#泛型\">#</a> 泛型</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getRepeatArr</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IGetRepeatArr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 不预先指定具体的类型，而在使用的时候再指定类型的一种特性 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IGetRepeatArrR</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 泛型接口 & amp; 多泛型 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IX</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span>，<span class=\"token constant\">U</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    val<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* 泛型类 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IMan<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    instance<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/* 泛型别名 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">ITypeArr<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 泛型约束：限制泛型必须符合字符串 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IGetRepeatStringArr</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> getStrArr<span class=\"token operator\">:</span> <span class=\"token function-variable function\">IGetRepeatStringArr</span> <span class=\"token operator\">=</span> target <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 报错：类型 \"number” 的参数不能赋给类型\"string\" 的参数 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">getStrArr</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 泛型参数默认类型 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IGetRepeatArr<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> getRepeatArr<span class=\"token operator\">:</span> <span class=\"token function-variable function\">IGetRepeatArr</span> <span class=\"token operator\">=</span> target <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/* 报错：类型 “string\"的参数不能赋给类型\"number\" 的参数 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">getRepeatArr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"类型别名类型断言\"><a class=\"anchor\" href=\"#类型别名类型断言\">#</a> 类型别名 &amp; 类型断言</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 通过 type 关键字定义了 I0bjArr 的别名类型 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IObjArr</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span>objKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">keyBy</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> IObjArr<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>objArr<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/* 未指定类型时，result 类型为 &#123;(&#125;*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> objArr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> res<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        res <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>，<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/* 通过 as 关键字，断言 result 类型为正确类型 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> result <span class=\"token keyword\">as</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span>，<span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"高级类型\"><a class=\"anchor\" href=\"#高级类型\">#</a> 高级类型</h2>\n<h3 id=\"联合交叉类型\"><a class=\"anchor\" href=\"#联合交叉类型\">#</a> 联合 / 交叉类型</h3>\n<p>常规写法：繁琐且不准确</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IHistoryBook</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    author<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    range<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IStoryBook</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    author<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    theme<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IBookList</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>IHistoryBook <span class=\"token operator\">|</span> IStoryBook<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>联合和交叉类型：</p>\n<p>联合类型：IA <strong>│</strong> IB；联合类型表示一个值可以是几种类型之一</p>\n<p>交叉类型：IA <strong>&amp;</strong> IB；多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IBookList</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    author<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    range<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'story'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    theme<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"类型保护与类型守卫\"><a class=\"anchor\" href=\"#类型保护与类型守卫\">#</a> 类型保护与类型守卫</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IA</span></span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a1<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IB</span></span> <span class=\"token punctuation\">&#123;</span> b<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b1<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">IA</span><span class=\"token operator\">|</span><span class=\"token constant\">IB</span>）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/* 报错：类型 “IA│IB\"上不存在属性\"a\"”。类型 “IB” 上不存在属性 “a\" */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/* 结论：访问联合类型时，处于程序安全，仅能访问联合类型中的交集部分 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>a1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/* 类型守卫：定义一个函数，它的返回值是一个类型谓词，生效范围为子作用域 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getIsIA</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">IA</span> <span class=\"token operator\">|</span><span class=\"token constant\">IB</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> arg <span class=\"token keyword\">is</span> <span class=\"token constant\">IA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>arg <span class=\"token keyword\">as</span> <span class=\"token constant\">IA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">IA</span> <span class=\"token operator\">|</span> <span class=\"token constant\">IB</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getIsIA</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>a1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>                          </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"高级类型-2\"><a class=\"anchor\" href=\"#高级类型-2\">#</a> 高级类型</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IMerge</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token keyword\">extends</span> <span class=\"token class-name\">Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>sourceObj<span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> targetObj<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">any</span><span class=\"token operator\">>></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 索引类型：关键字【keyof】，其相当于取值对象中的所有 key 组成的字符串字面量，如</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IKeys</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = >type IKeys = \"a\"|\"b\"“</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 关键字【in】，其相当于取值字符串字面量中的一种可能，配合泛型 P，即表不母个 key</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 关键字【?】，通过设定对象可选选项，即可自动推导出子集类型</span></pre></td></tr></table></figure><h3 id=\"函数返回值类型\"><a class=\"anchor\" href=\"#函数返回值类型\">#</a> 函数返回值类型</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IDelayCall</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>func<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>infer <span class=\"token constant\">R</span><span class=\"token operator\">?</span> <span class=\"token constant\">R</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 关键字【extends】跟随泛型出现时，表示类型推断，其表达可类比三元表达式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 如： T == 判断类型？类型 A: 类型 B</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 关键字【infer】出现在类型推荐中，表示定义类型变量，可以用于指代类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 如该场景下，将函数的返回值类型作为变量，使用新泛型 R 表示，使用在类型推荐命中的结果中</span></pre></td></tr></table></figure><h2 id=\"工程应用\"><a class=\"anchor\" href=\"#工程应用\">#</a> 工程应用</h2>\n<ol>\n<li>\n<p>Webpack</p>\n<p>在 webpack 中导入 awesome-typescript-loader、babel-loader，配置 tsconfig.js 文件</p>\n</li>\n<li>\n<p>Node.js</p>\n<p>使用 npm 安装 tsc，配置 tsconfig.js，运行 tsc 编译 ts 文件</p>\n</li>\n</ol>\n",
            "tags": [
                "前端",
                "TypeScript",
                "Web",
                "前端",
                "TypeScript"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/26/Webpack%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/26/Webpack%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB-%E7%AC%94%E8%AE%B0/",
            "title": "Webpack知识体系 - 笔记",
            "date_published": "2022-01-26T08:46:36.000Z",
            "content_html": "<blockquote>\n<p>什么是 Webpack、Webpack 打包核心流程、使用 Webpack、理解 Loader、理解插件、学习方法</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"webpack-知识体系\"><a class=\"anchor\" href=\"#webpack-知识体系\">#</a> Webpack 知识体系</h1>\n<h2 id=\"为什么要学习webpack\"><a class=\"anchor\" href=\"#为什么要学习webpack\">#</a> 为什么要学习 Webpack</h2>\n<ul>\n<li>理解前端 “工程化” 概念、工具、目标</li>\n<li>一个团队总要有那么几个人熟悉 Webpack，某种程度上可以成为个人的核心竞争力</li>\n<li>高阶前端必经之路</li>\n</ul>\n<h2 id=\"什么是webpack\"><a class=\"anchor\" href=\"#什么是webpack\">#</a> 什么是 Webpack</h2>\n<p>前端项目由许多不同类型的文件、资源构成，比如：</p>\n<p>我们当然可以手动管理这些资源，而且在旧时代我们也的确是这样做的，比如：</p>\n<pre><code class=\"language-html\"></code></pre>\n<p>但是，会有许多潜在问题：</p>\n<ul>\n<li>\n<p>依赖手工，比如有 50 个 JS 文件… 操作，过程繁<br>\n琐</p>\n</li>\n<li>\n<p>当代码文件之间有依赖的时候，就得严格按依<br>\n赖顺序书写</p>\n</li>\n<li>\n<p>开发与生产环境一致，难以接入 TS 或  JS 新特<br>\n性</p>\n</li>\n<li>\n<p>比较难接入 Less、Sass 等工具</p>\n</li>\n<li>\n<p>JS、图片、CSS 资源管理模型不一致</p>\n</li>\n</ul>\n<p>这些都是旧时代非常突出的问题，对开发效率影响非常大，直到… 出现了很多的工程化工具，比如：webpack、vite、esbuild、rollup.js 等等</p>\n<p>某种程度上，正是这些工具的出现，才有了 “前端工程” 这一概念</p>\n<p>webpack 本质上是一种前端资源编译、打包工具：</p>\n<ul>\n<li>多份资源文件打包成一个 Bundle</li>\n<li>支持 Babel、Eslint、TS、CoffeScript、Less、Sass</li>\n<li>支持模块化处理 css、图片 等资源文件</li>\n<li>支持 HMR + 开发服务器</li>\n<li>支持持续监听、持续构建</li>\n<li>支持代码分离</li>\n<li>支持 Tree-shaking</li>\n<li>支持 SourceMap</li>\n</ul>\n<p>简单示例：</p>\n<ol>\n<li>\n<p>安装： <code>npm install webpack</code></p>\n</li>\n<li>\n<p>编辑配置文件： <code>webpack.config.js</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>执行编译命令： <code>npx webpack</code></p>\n</li>\n</ol>\n<h2 id=\"webpack-打包核心流程\"><a class=\"anchor\" href=\"#webpack-打包核心流程\">#</a> Webpack 打包核心流程</h2>\n<p>核心流程：</p>\n<pre class=\"mermaid graph\"><svg id=\"mermaid-1649668112844\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"233\" style=\"max-width: 652.96875px;\" viewBox=\"0 0 652.96875 233\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath LS-Get-Start LE-Dependencies-Lookup\" id=\"L-Get-Start-Dependencies-Lookup\" style=\"opacity: 1;\"><path class=\"path\" d=\"M95.4375,27.5L120.4375,27.5L145.4375,27.5\" marker-end=\"url(#arrowhead21)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead21\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-Dependencies-Lookup LE-Transform\" id=\"L-Dependencies-Lookup-Transform\" style=\"opacity: 1;\"><path class=\"path\" d=\"M321.390625,27.5L346.390625,27.5L371.390625,27.5\" marker-end=\"url(#arrowhead22)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead22\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-Transform LE-Combine-Assets\" id=\"L-Transform-Combine-Assets\" style=\"opacity: 1;\"><path class=\"path\" d=\"M462.765625,27.5L487.765625,27.5L512.765625,27.5\" marker-end=\"url(#arrowhead23)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead23\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-`entry` LE-`require`&amp;`inport`\" id=\"L-`entry`-`require`&amp;`inport`\" style=\"opacity: 1;\"><path class=\"path\" d=\"M89.0703125,116.5L120.4375,116.5L153.2421875,116.5\" marker-end=\"url(#arrowhead24)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead24\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-`require`&amp;`inport` LE-`module`\" id=\"L-`require`&amp;`inport`-`module`\" style=\"opacity: 1;\"><path class=\"path\" d=\"M313.5859375,116.5L346.390625,116.5L372.203125,116.5\" marker-end=\"url(#arrowhead25)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead25\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-`module` LE-`output`\" id=\"L-`module`-`output`\" style=\"opacity: 1;\"><path class=\"path\" d=\"M461.953125,116.5L487.765625,116.5L536.640625,116.5\" marker-end=\"url(#arrowhead26)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead26\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-入口处理 LE-y解析\" id=\"L-入口处理-y解析\" style=\"opacity: 1;\"><path class=\"path\" d=\"M93.71875,205.5L120.4375,205.5L203.46875,205.5\" marker-end=\"url(#arrowhead27)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead27\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"flowchart-Get-Start-10\" transform=\"translate(51.71875,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-43.71875\" y=\"-19.5\" width=\"87.4375\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-33.71875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">Get-Start</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-Dependencies-Lookup-11\" transform=\"translate(233.4140625,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-87.9765625\" y=\"-19.5\" width=\"175.953125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-77.9765625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">Dependencies-Lookup</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-Transform-12\" transform=\"translate(417.078125,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-45.6875\" y=\"-19.5\" width=\"91.375\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-35.6875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">Transform</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-Combine-Assets-13\" transform=\"translate(578.8671875,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-66.1015625\" y=\"-19.5\" width=\"132.203125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-56.1015625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">Combine-Assets</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-`entry`-14\" transform=\"translate(51.71875,116.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-37.3515625\" y=\"-19.5\" width=\"74.703125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-27.3515625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">`entry`</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-`require`&amp;`inport`-15\" transform=\"translate(233.4140625,116.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-80.171875\" y=\"-19.5\" width=\"160.34375\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-70.171875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">`require`&amp;`inport`</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-`module`-16\" transform=\"translate(417.078125,116.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-44.875\" y=\"-19.5\" width=\"89.75\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-34.875,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">`module`</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-`output`-17\" transform=\"translate(578.8671875,116.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-42.2265625\" y=\"-19.5\" width=\"84.453125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32.2265625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">`output`</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-入口处理-18\" transform=\"translate(51.71875,205.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-42\" y=\"-19.5\" width=\"84\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">入口处理</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-y解析-19\" transform=\"translate(233.4140625,205.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-29.9453125\" y=\"-19.5\" width=\"59.890625\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-19.9453125,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">y解析</tspan></text></g></g></g></g></g></g></svg></pre><p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220123102147141.png\" alt=\"image-20220123102147141\"></p>\n<h2 id=\"使用-webpack\"><a class=\"anchor\" href=\"#使用-webpack\">#</a> 使用 Webpack</h2>\n<p>使用 Webpack 的好处：</p>\n<ul>\n<li>多个文件资源合并成一个，减少 http 请求数支持模块化开发</li>\n<li>支持高级 JS 特性</li>\n<li>支持 Typescript、CoffeeScript 方言</li>\n<li>统一图片、CSS、字体等其它资源的处理模型</li>\n</ul>\n<p>关于 Webpack 的使用方法，基本都围绕 “配置” 展开，而这些配置大致可划分为两类:</p>\n<ul>\n<li>\n<p>流程类：作用于流程中某个 or 若干个环节，直接影响打包效果的配置项</p>\n</li>\n<li>\n<p>工具类：主流程之外，提供更多工程化能力的配置项</p>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220123102907178.png\" alt=\"image-20220123102907178\"></p>\n<h3 id=\"解析css\"><a class=\"anchor\" href=\"#解析css\">#</a> 解析 CSS</h3>\n<p>Loader 有什么作用？为什么这里需要用到 css-loader、style-loader？</p>\n<p>与旧时代 —— 在 HTML 文件中维护 css 相比，这种方式会有什么优劣处？</p>\n<p>有没有接触过 Less、Sass、Stylus 这一类 CSS 预编译框架？如何在 Webpack 接入这些工具？</p>\n<h3 id=\"解析js\"><a class=\"anchor\" href=\"#解析js\">#</a> 解析 JS</h3>\n<p>Babel：一个 JS 的降级化转义器，为了让 ES6 等新语言特性能够兼容尽量多的浏览器，需要将 ES6 等新语言特性装换成 ES5 等兼容性更强的代码</p>\n<p>接入 Babel：</p>\n<ol>\n<li>\n<p>安装依赖： <code>npm i -D @babel/core @bebel/preset-env babel-loader</code></p>\n</li>\n<li>\n<p>声明产物出口 <code>output</code> ：</p>\n<pre><code class=\"language-js\">\n</code></pre>\n</li>\n<li>\n<p>执行 <code>npx webpack</code></p>\n</li>\n</ol>\n<p>Babel 具体有什么功能？</p>\n<p>Babel 与 Webpack 分别解决了什么问题？为何两者能协作到一起了？</p>\n<h3 id=\"生成html\"><a class=\"anchor\" href=\"#生成html\">#</a> 生成 HTML</h3>\n<p>当各种资源文件都已经由 Webpack 统一管理后，HTML 也不必要我们自己维护，可以使用 Webpack 插件生成</p>\n<p>接入 <code>html-webpack-plugin</code> ：</p>\n<p>相比于手工维护 HTML，使用 Webpack 自动化有什么优缺点？</p>\n<h3 id=\"模块热替换-hmr\"><a class=\"anchor\" href=\"#模块热替换-hmr\">#</a> 模块热替换 - HMR</h3>\n<ol>\n<li>\n<p>开启 HMR</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 其他配置项...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        hot<span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    watch<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 持续监听本地文件变化并即时构建</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>…</p>\n</li>\n</ol>\n<h3 id=\"tree-shaking\"><a class=\"anchor\" href=\"#tree-shaking\">#</a> Tree-Shaking</h3>\n<p>删除未被使用的代码（Dead Code）：</p>\n<ul>\n<li>代码没有被用到，不可到达</li>\n<li>代码的执行结果不会被用到</li>\n<li>代码只读不写</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li>只需要配置 <code>mode = &quot;production&quot;</code>  和 <code>optimization.usedExports = true</code>  即可</li>\n</ul>\n<p>PS：对工具类库，如 Lodash 有奇效</p>\n<h3 id=\"其他工具\"><a class=\"anchor\" href=\"#其他工具\">#</a> 其他工具</h3>\n<p>缓存、SourceMap、性能监控、日志、代码压缩、分包等等</p>\n<ul>\n<li>\n<p>除上面提到的内容，还有哪些配置可划分为 “流程类” 配置？</p>\n</li>\n<li>\n<p>工具类配置具体有什么作用？包括 <code>devtool/cache/stat</code>  等</p>\n</li>\n</ul>\n<h2 id=\"理解-loader\"><a class=\"anchor\" href=\"#理解-loader\">#</a> 理解 Loader</h2>\n<p>为什么需要 Loader：因为<strong> Webpack 只认识 JS</strong>，所以为了<strong>处理非标准 JS 资源</strong>，设计出资源翻译模块 ——Loader，用于将资源翻译为标准 JS</p>\n<p>Loader 特性：链式调用、支持异步执行、分 normal/pitch 两种模式</p>\n<h3 id=\"链式调用\"><a class=\"anchor\" href=\"#链式调用\">#</a> 链式调用</h3>\n<p>以 Less 语法文件的解析为例：</p>\n<ol>\n<li>\n<p>less-loader：实现 less =&gt; css 的转换</p>\n</li>\n<li>\n<p>css-loader：将 CSS 包装成类似 module.exports = “${css}” 的内容，包装后的内容符合 JavaScript 语法</p>\n</li>\n<li>\n<p>style-loader：将 css 模块包进 require 语句，并在运行时调用 injectStyle 等函数将内容注入到页面的 style 标签</p>\n</li>\n</ol>\n<h3 id=\"如何编写loader\"><a class=\"anchor\" href=\"#如何编写loader\">#</a> 如何编写 Loader</h3>\n<p>Loader 输入是什么？要求的输出是什么？</p>\n<p>Loader 的链式调用是什么意思？如何串联多个 Loader ？</p>\n<p>Loader 中如何处理异步场景？</p>\n<h2 id=\"理解插件\"><a class=\"anchor\" href=\"#理解插件\">#</a> 理解插件</h2>\n<p>很多知名工具，如:</p>\n<ul>\n<li>VS Code、Web Storm、Chrome、Firefox</li>\n<li>Babel、Webpack、Rollup、Eslint</li>\n<li>Vue、Redux、Quill、Axios</li>\n</ul>\n<p>等等，都设计了所谓 “插件” 架构，为什么？</p>\n<p>工具的源码和工作原理是一个特别复杂的过程，那么∶</p>\n<ul>\n<li>\n<p>新人需要了解整个流程细节，上手成本高</p>\n</li>\n<li>\n<p>功能迭代成本高，牵一发动全身</p>\n</li>\n<li>\n<p>功能僵化，作为开源项目而言缺乏成长性</p>\n</li>\n<li>\n<p>学习的心智成本高 =&gt; 可维护性低 =&gt; 生命力弱</p>\n</li>\n</ul>\n<p>插件架构精髓：对扩展开放，对修改封闭</p>\n<h3 id=\"钩子\"><a class=\"anchor\" href=\"#钩子\">#</a> 钩子</h3>\n<p>钩子的核心信息∶</p>\n<ol>\n<li>\n<p>时机：编译过程的特定节点，Webpack 会以钩子形式通知插件此刻正在发生什么事情</p>\n</li>\n<li>\n<p>上下文：通过 tapable 提供的回调机制，以参数方式传递上下文信息义</p>\n</li>\n<li>\n<p>交互：在上下文参数对象中附带了很多存在 side effect 的交互接口，插件可以通过这些接口改变</p>\n</li>\n</ol>\n<h2 id=\"学习方法\"><a class=\"anchor\" href=\"#学习方法\">#</a> 学习方法</h2>\n<ol>\n<li>\n<p>入门应用</p>\n<ul>\n<li>理解打包流程</li>\n<li>熟练掌握常用配置项、Loader、插件的使用方法，能够灵活搭建集成 Vue、React、Babel、Eslint、Less、Sass、图片处理等工具的 Webpack 环境</li>\n<li>掌握常见脚手架工具的用法，例如：Vue-cli、create-react-app、@angular/cli</li>\n</ul>\n</li>\n<li>\n<p>进阶</p>\n<ul>\n<li>\n<p>理解 Loader、Plugin 机制，能够自行开发 Webpack 组件</p>\n</li>\n<li>\n<p>理解常见性能优化手段，并能用于解决实际问题</p>\n</li>\n<li>\n<p>理解前端工程化概念与生态现状</p>\n</li>\n</ul>\n</li>\n<li>\n<p>大师级</p>\n<ul>\n<li>阅读源码，理解 Webpack 编译、打包原理，甚至能够参与共建</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220123145507754.png\" alt=\"image-20220123145507754\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRtaW5kLmNuL2FwcC9kb2MvZmFjMWMxOTZlMjliOGY5MDUyMjM5ZjE2Y2ZmN2Q0Yzc=\">Webpack 进阶知识体系</span></p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bS5qdWVqaW4uY24veW91dGhjYW1w\">青训营</span>课程</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划",
                "Webpack"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/26/Web%E5%A4%9A%E5%AA%92%E4%BD%93%E5%85%A5%E9%97%A8-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/26/Web%E5%A4%9A%E5%AA%92%E4%BD%93%E5%85%A5%E9%97%A8-%E7%AC%94%E8%AE%B0/",
            "title": "Web多媒体入门 - 笔记",
            "date_published": "2022-01-26T08:44:59.000Z",
            "content_html": "<blockquote>\n<p>基础知识、多媒体元素和扩展 API、应用场景、总结与展望</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"web多媒体入门\"><a class=\"anchor\" href=\"#web多媒体入门\">#</a> Web 多媒体入门</h1>\n<h2 id=\"基础知识\"><a class=\"anchor\" href=\"#基础知识\">#</a> 基础知识</h2>\n<h3 id=\"编码格式\"><a class=\"anchor\" href=\"#编码格式\">#</a> 编码格式</h3>\n<h4 id=\"图像基本概念\"><a class=\"anchor\" href=\"#图像基本概念\">#</a> 图像基本概念</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126100508041.png\" alt=\"image-20220126100508041\"></p>\n<h4 id=\"视频基本概念\"><a class=\"anchor\" href=\"#视频基本概念\">#</a> 视频基本概念</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126100639576.png\" alt=\"image-20220126100639576\"></p>\n<h4 id=\"视频帧\"><a class=\"anchor\" href=\"#视频帧\">#</a> 视频帧</h4>\n<p>视频帧格式：I 帧、P 帧、B 帧</p>\n<p>I 帧：不依赖于任何帧，可以独立解码</p>\n<p>P 帧：依赖于前面一帧，必须先把前面的帧解码出来才能解码</p>\n<p>B 帧：依赖于前面一帧和后面一帧，必须先把前面和后面的帧解码出来才能解码</p>\n<p>GOP（group of picture）：两个 I 帧之间的间隔</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126101331077.png\" alt=\"image-20220126101331077\"></p>\n<h4 id=\"为什么要编码\"><a class=\"anchor\" href=\"#为什么要编码\">#</a> 为什么要编码</h4>\n<p>如果不进行编码、压缩，现代存储设备根本存不了一两部电影</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126101458939.png\" alt=\"image-20220126101458939\"></p>\n<h4 id=\"冗余\"><a class=\"anchor\" href=\"#冗余\">#</a> 冗余</h4>\n<p>时间冗余、空间冗余、编码冗余、视觉冗余</p>\n<h4 id=\"编码数据处理流程\"><a class=\"anchor\" href=\"#编码数据处理流程\">#</a> 编码数据处理流程</h4>\n<pre class=\"mermaid graph\"><svg id=\"mermaid-1649668111540\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"144\" style=\"max-width: 705.296875px;\" viewBox=\"0 0 705.296875 144\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath LS-预测 LE-变换\" id=\"L-预测-变换\" style=\"opacity: 1;\"><path class=\"path\" d=\"M129.6484375,27.5L224.296875,27.5L281.296875,27.5\" marker-end=\"url(#arrowhead20)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead20\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-变换 LE-量化\" id=\"L-变换-量化\" style=\"opacity: 1;\"><path class=\"path\" d=\"M333.296875,27.5L390.296875,27.5L447.296875,27.5\" marker-end=\"url(#arrowhead21)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead21\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-量化 LE-熵编码\" id=\"L-量化-熵编码\" style=\"opacity: 1;\"><path class=\"path\" d=\"M499.296875,27.5L556.296875,27.5L605.296875,27.5\" marker-end=\"url(#arrowhead22)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead22\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-去掉空间冗余&amp;时间冗余 LE-去除空间冗余\" id=\"L-去掉空间冗余&amp;时间冗余-去除空间冗余\" style=\"opacity: 1;\"><path class=\"path\" d=\"M199.296875,116.5L224.296875,116.5L249.296875,116.5\" marker-end=\"url(#arrowhead23)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead23\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-去除空间冗余 LE-去除视觉冗余\" id=\"L-去除空间冗余-去除视觉冗余\" style=\"opacity: 1;\"><path class=\"path\" d=\"M365.296875,116.5L390.296875,116.5L415.296875,116.5\" marker-end=\"url(#arrowhead24)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead24\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-去除视觉冗余 LE-去除编码冗余\" id=\"L-去除视觉冗余-去除编码冗余\" style=\"opacity: 1;\"><path class=\"path\" d=\"M531.296875,116.5L556.296875,116.5L581.296875,116.5\" marker-end=\"url(#arrowhead25)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead25\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"flowchart-预测-8\" transform=\"translate(103.6484375,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">预测</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-变换-9\" transform=\"translate(307.296875,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">变换</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-量化-10\" transform=\"translate(473.296875,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">量化</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-熵编码-11\" transform=\"translate(639.296875,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-34\" y=\"-19.5\" width=\"68\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-24,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">熵编码</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-去掉空间冗余&amp;时间冗余-12\" transform=\"translate(103.6484375,116.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-95.6484375\" y=\"-19.5\" width=\"191.296875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-85.6484375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">去掉空间冗余&amp;时间冗余</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-去除空间冗余-13\" transform=\"translate(307.296875,116.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-58\" y=\"-19.5\" width=\"116\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-48,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">去除空间冗余</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-去除视觉冗余-14\" transform=\"translate(473.296875,116.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-58\" y=\"-19.5\" width=\"116\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-48,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">去除视觉冗余</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-去除编码冗余-15\" transform=\"translate(639.296875,116.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-58\" y=\"-19.5\" width=\"116\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-48,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">去除编码冗余</tspan></text></g></g></g></g></g></g></svg></pre><h4 id=\"编码格式历史\"><a class=\"anchor\" href=\"#编码格式历史\">#</a> 编码格式历史</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126102418348.png\" alt=\"image-20220126102418348\"></p>\n<h3 id=\"封装格式\"><a class=\"anchor\" href=\"#封装格式\">#</a> 封装格式</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126102731989.png\" alt=\"image-20220126102731989\"></p>\n<h4 id=\"常用的封装格式\"><a class=\"anchor\" href=\"#常用的封装格式\">#</a> 常用的封装格式</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126102845963.png\" alt=\"image-20220126102845963\"></p>\n<h2 id=\"多媒体元素和扩展api\"><a class=\"anchor\" href=\"#多媒体元素和扩展api\">#</a> 多媒体元素和扩展 API</h2>\n<h2 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h2>\n<p>点播、直播、图片、云游戏、实时通信、视频编辑</p>\n<h2 id=\"总结与展望\"><a class=\"anchor\" href=\"#总结与展望\">#</a> 总结与展望</h2>\n<p>总结：</p>\n<ul>\n<li>Flash -&gt; H5 video -&gt; MSE</li>\n<li>编码格式、封装格式、多媒体元素、流媒体协议</li>\n<li>应用场景</li>\n</ul>\n<p>新技术标准：</p>\n<ul>\n<li>WebAssembly：将 C++ 等语言写的编码器能放到 Web 上运行</li>\n<li>WebCodecs：暴露底层的音视频解码器接口</li>\n<li>WebGPU：第二代 WebGL</li>\n<li>WebVR、WebXR</li>\n</ul>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bS5qdWVqaW4uY24veW91dGhjYW1w\">青训营</span>课程</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划",
                "Web多媒体"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/25/%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E6%A6%82%E8%BF%B0-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/25/%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E6%A6%82%E8%BF%B0-%E7%AC%94%E8%AE%B0/",
            "title": "小游戏开发概述 - 笔记",
            "date_published": "2022-01-25T08:42:23.000Z",
            "content_html": "<blockquote>\n<p>游戏引擎、游戏开发的技能树、PixiJS+Web 开发</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"小游戏开发概览\"><a class=\"anchor\" href=\"#小游戏开发概览\">#</a> 小游戏开发概览</h1>\n<h2 id=\"为什么要用游戏引擎\"><a class=\"anchor\" href=\"#为什么要用游戏引擎\">#</a> 为什么要用游戏引擎</h2>\n<p>因为使用游戏引擎的最大优势就是：<strong>渲染</strong></p>\n<p>引擎的诞生就是因为一家公司做了一款游戏，做下一款游戏时复用了上一款游戏的代码，后来发现这些代码几乎每个游戏都会用到，抽离出来就成了一个引擎。</p>\n<p>如果不使用引擎，你可以做复杂的动效渲染和交互吗？当然可以。方便吗？不一定。</p>\n<p>所以游戏引擎更像是一套<strong>解决方案</strong>，让你在制作某一类型的产品的时候能够提高你的开发效率。</p>\n<p>游戏引擎能让你<strong>花更少的时间做出更好的效果</strong></p>\n<h2 id=\"游戏引擎\"><a class=\"anchor\" href=\"#游戏引擎\">#</a> 游戏引擎</h2>\n<p>游戏引擎通常会包含：渲染器，2D/3D 图形元素，碰撞检测，物理引擎，声音，控制器支持，动画等部分。</p>\n<p>现在很多主流的 2d 游戏引擎都支持使用 JavaScript 进行开发同时使用相关的工程化能力，也是游戏开发向 web 前端开发靠拢的一种表现。</p>\n<p>游戏开发其实更关注<strong>内容</strong></p>\n<p>作为前端游戏开发，我们没必要一开始就去学端游的游戏引擎，而是可以从简单易用的开始。</p>\n<ol>\n<li>\n<p>NVL Marker</p>\n</li>\n<li>\n<p>RPG Marker</p>\n<p>RPG Maker 可以 Low Code 搭建一个关卡类型的游戏，适合代码能力不强但是想发挥自己的创意的开发者。</p>\n</li>\n<li>\n<p>Web 游戏引擎</p>\n<p>Web 游戏引擎有一些通用能力：预加载、展示与图层组合系统、动画系统、音效和声音系统</p>\n</li>\n</ol>\n<h3 id=\"web游戏引擎\"><a class=\"anchor\" href=\"#web游戏引擎\">#</a> Web 游戏引擎</h3>\n<h4 id=\"cocos\"><a class=\"anchor\" href=\"#cocos\">#</a> Cocos</h4>\n<p><strong>优势</strong>：</p>\n<ul>\n<li>\n<p>平台支持能力好</p>\n</li>\n<li>\n<p>完善的游戏功能支持生态较好</p>\n</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>\n<p>3D 能力仍在建设中</p>\n</li>\n<li>\n<p>版本迭代过快</p>\n</li>\n</ul>\n<h4 id=\"laya\"><a class=\"anchor\" href=\"#laya\">#</a> Laya</h4>\n<p><strong>优势</strong>：</p>\n<ul>\n<li>\n<p>3D 能力比较成熟，号称市场占有率 90%</p>\n</li>\n<li>\n<p>支持 JS、TS、AS</p>\n</li>\n<li>\n<p>引擎体积小</p>\n</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>\n<p>界面能力不友好</p>\n</li>\n<li>\n<p>生态很差</p>\n</li>\n</ul>\n<h4 id=\"egret白鹭\"><a class=\"anchor\" href=\"#egret白鹭\">#</a> Egret（白鹭）</h4>\n<p><strong>优势</strong>：</p>\n<ul>\n<li>\n<p>工具链比较完善</p>\n</li>\n<li>\n<p>第三方库支持好</p>\n</li>\n<li>\n<p>企业定制能力强</p>\n</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>\n<p>更新迭代遭瓶颈</p>\n</li>\n<li>\n<p>生态较差</p>\n</li>\n</ul>\n<h4 id=\"createjs库-phaser游戏引擎\"><a class=\"anchor\" href=\"#createjs库-phaser游戏引擎\">#</a> CreateJS 库 &amp; Phaser 游戏引擎</h4>\n<p>CreateJS：它是多个库的集合，EASELJS (控制素材展示与组合)、TWEENJS (控制素材缓动动画)、SOUNDJS (控制声音)、PRELOADJS (控制加载)，通过预加载后的素材展示、动画、声音构成游戏。</p>\n<p>Phaser 游戏引擎：除了 CreateJS 为基础的展示、声音、动画、加载系统，还设计了摄像机、物理引擎、内置浏览器、插件系统等高级功能。</p>\n<p><strong>缺点</strong>：没有可视化界面</p>\n<h3 id=\"功能引擎\"><a class=\"anchor\" href=\"#功能引擎\">#</a> 功能引擎</h3>\n<p>大型游戏引擎往往是由小的<strong>功能引擎</strong>组装成的，一个大型游戏引擎往往包含渲染引擎、物理引擎、UI 系统、声音系统、动画系统、粒子系统、骨骼系统、网络系统等组合而成</p>\n<p>其中最重要的便是<strong>渲染引擎</strong>和<strong>物理引擎</strong></p>\n<h3 id=\"2d游戏引擎的技术架构\"><a class=\"anchor\" href=\"#2d游戏引擎的技术架构\">#</a> 2D 游戏引擎的技术架构</h3>\n<p>以 Cocos 引擎架构为例：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220124143617423.png\" alt=\"image-20220124143617423\"></p>\n<h2 id=\"游戏开发的技能树\"><a class=\"anchor\" href=\"#游戏开发的技能树\">#</a> 游戏开发的技能树</h2>\n<p>入门技能树：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220124145444570.png\" alt=\"image-20220124145444570\"></p>\n<h2 id=\"pixijsweb开发\"><a class=\"anchor\" href=\"#pixijsweb开发\">#</a> PixiJS+Web 开发</h2>\n<ol>\n<li>\n<p>安装和引入 PixiJS</p>\n</li>\n<li>\n<p>创建 Pixi 应用和舞台（Stage）</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220124150055574.png\" alt=\"image-20220124150055574\"></p>\n</li>\n<li>\n<p>创建一个 Sprite（精灵）</p>\n<p>Sprite（精灵）：在 Pixi 或者更多游戏引擎中的 Sprite 是一个用于承载图像的对象，你能够控制它的大小、位置等属性来产生交互、动画</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220124150630727.png\" alt=\"image-20220124150630727\"></p>\n</li>\n<li>\n<p>显示一个精灵：</p>\n</li>\n<li>\n<p>让精灵动起来：</p>\n<p>使用游戏循环的处理函数添加动画</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span>ticker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"cocos-creator\"><a class=\"anchor\" href=\"#cocos-creator\">#</a> Cocos Creator</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220124151529420.png\" alt=\"image-20220124151529420\"></p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bS5qdWVqaW4uY24veW91dGhjYW1w\">青训营</span>课程</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划",
                "小游戏开发"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/25/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF%E5%85%A8%E8%A7%A3-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/25/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%80%E6%9C%AF%E5%85%A8%E8%A7%A3-%E7%AC%94%E8%AE%B0/",
            "title": "小程序技术全解 - 笔记",
            "date_published": "2022-01-25T08:37:40.000Z",
            "content_html": "<blockquote>\n<p>发展历程、业务价值、技术解析、相关扩展</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"小程序技术全解-笔记\"><a class=\"anchor\" href=\"#小程序技术全解-笔记\">#</a> 小程序技术全解 - 笔记</h1>\n<h2 id=\"发展历程\"><a class=\"anchor\" href=\"#发展历程\">#</a> 发展历程</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220125100454216.png\" alt=\"image-20220125100454216\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220125100805879.png\" alt=\"image-20220125100805879\"></p>\n<h3 id=\"核心数据\"><a class=\"anchor\" href=\"#核心数据\">#</a> 核心数据</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220125100847669.png\" alt=\"image-20220125100847669\"></p>\n<h3 id=\"小程序生态\"><a class=\"anchor\" href=\"#小程序生态\">#</a> 小程序生态</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220125101008297.png\" alt=\"image-20220125101008297\"></p>\n<h2 id=\"业务价值\"><a class=\"anchor\" href=\"#业务价值\">#</a> 业务价值</h2>\n<h3 id=\"与web的区别\"><a class=\"anchor\" href=\"#与web的区别\">#</a> 与 Web 的区别</h3>\n<ol>\n<li>有着固定的语法以及统一的版本管理，平台可以更方便的进行审核</li>\n<li>平台能够控制各个入口，如二维码，文章内嵌，端内分享。入口上也能带来更好的用户体验</li>\n<li>小程序基于特殊的架构，在流畅度上比 WEB 更好，有更优秀的跳转体验</li>\n</ol>\n<h3 id=\"三大价值\"><a class=\"anchor\" href=\"#三大价值\">#</a> 三大价值</h3>\n<ol>\n<li>\n<p>渠道价值：</p>\n<p>由于小程序的便捷性，依托于超级平台，小程序能够充分为很多场景导流，如美团和美团优选微信小程序带来的流量占比分别是 40% 和 80%</p>\n</li>\n<li>\n<p>业务探索价值：</p>\n<p>相比原生 APP 来说，小程序的开发难度和成本都降低的很多，这就创造了很多场景开发者能够用小程序来快速试错，不断探索新的业务价值</p>\n</li>\n<li>\n<p>数字升级价值：</p>\n<p>线下到线上如何做？从轻消费类的快餐、茶饮到地产汽车等大宗消费，小程序都展示了良好的容错空间。我们线下场景的小程序覆盖范围很广。</p>\n</li>\n</ol>\n<h2 id=\"技术解析\"><a class=\"anchor\" href=\"#技术解析\">#</a> 技术解析</h2>\n<h3 id=\"小程序原理\"><a class=\"anchor\" href=\"#小程序原理\">#</a> 小程序原理</h3>\n<p>第三方应用最简单最方便的方式：Hybrid App，即 WebView + JSBridge</p>\n<h4 id=\"problem\"><a class=\"anchor\" href=\"#problem\">#</a> Problem</h4>\n<ol>\n<li>\n<p>无网络的情况体验不佳 / 网页切换体验不佳：</p>\n<p><strong>资源离线化</strong></p>\n</li>\n<li>\n<p>如何管控保证安全：</p>\n<p><strong>独立 JS 沙箱</strong></p>\n</li>\n</ol>\n<h4 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h4>\n<ol>\n<li>开发门槛低：HTML + JS + CSS</li>\n<li>接近原生的使用体验：资源加载（离线化） + 渲染 + 页面切换（使用多 WebView）</li>\n<li>能够保证安全可控：独立 JS 沙箱（JS 只能操作数据，通过数据渲染页面）</li>\n</ol>\n<h4 id=\"架构\"><a class=\"anchor\" href=\"#架构\">#</a> 架构</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220125102636826.png\" alt=\"image-20220125102636826\"></p>\n<h3 id=\"小程序语法\"><a class=\"anchor\" href=\"#小程序语法\">#</a> 小程序语法</h3>\n<p>以字节的头条小程序为例：</p>\n<ol>\n<li>\n<p>HTML =&gt; TTML</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\"><span class=\"token namespace\">tt:</span>for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token attr-name\"><span class=\"token namespace\">tt:</span>if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token attr-name\">bindtap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onTap<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>JS</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        list<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        isOpen<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function-variable function\">onTap</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tap me!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>CSS =&gt; TTSS</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">view</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 750rpx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"相关扩展\"><a class=\"anchor\" href=\"#相关扩展\">#</a> 相关扩展</h2>\n<h3 id=\"跨端框架\"><a class=\"anchor\" href=\"#跨端框架\">#</a> 跨端框架</h3>\n<p>主要解决两个问题：复杂应用构建、一次开发可以跨多端</p>\n<p>常见框架：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>remax</th>\n<th>taro</th>\n<th>megalo</th>\n<th>mpvue</th>\n<th>uni-app</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>语法</strong></td>\n<td>React</td>\n<td>React/Vue</td>\n<td>Vue</td>\n<td>Vue</td>\n<td>Vue</td>\n</tr>\n<tr>\n<td><strong>厂家</strong></td>\n<td>蚂蚁金服</td>\n<td>京东</td>\n<td>网易</td>\n<td>美团</td>\n<td>Hbuilder</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"跨端框架原理\"><a class=\"anchor\" href=\"#跨端框架原理\">#</a> 跨端框架原理</h3>\n<h4 id=\"编译时\"><a class=\"anchor\" href=\"#编译时\">#</a> 编译时</h4>\n<p>使用 AST（抽象语法树）解析代码语法，有了 AST 之后，就可以重新组合语法，生成适用于不同平台的特定代码</p>\n<p>例如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">></span></span>&#123;foo ? <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token punctuation\">/></span></span> : <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token punctuation\">/></span></span>&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>view</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span> <span class=\"token attr-name\"><span class=\"token namespace\">tt:</span>if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>&#123;foo&#125;</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>block</span> <span class=\"token attr-name\"><span class=\"token namespace\">tt:</span>else</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>block</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>view</span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h4 id=\"运行时\"><a class=\"anchor\" href=\"#运行时\">#</a> 运行时</h4>\n<p>使用 Virtual DOM 和 template 模板语法 动态生成模板组件</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220125104716472.png\" alt=\"image-20220125104716472\"></p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bS5qdWVqaW4uY24veW91dGhjYW1w\">青训营</span>课程</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划",
                "小程序"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/25/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%BA%E7%A1%80-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/25/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%BA%E7%A1%80-%E7%AC%94%E8%AE%B0/",
            "title": "数据可视化基础 - 笔记",
            "date_published": "2022-01-25T08:34:07.000Z",
            "content_html": "<blockquote>\n<p>什么是数据可视化、可视化的设计原则和方法、视觉感知、视觉编码、前端可视化工具</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"数据可视化基础-笔记\"><a class=\"anchor\" href=\"#数据可视化基础-笔记\">#</a> 数据可视化基础 - 笔记</h1>\n<h2 id=\"什么是数据可视化\"><a class=\"anchor\" href=\"#什么是数据可视化\">#</a> 什么是数据可视化</h2>\n<p>统计图表、地图、游戏中的小地图、温度计、词云等等</p>\n<p>任何可以<strong>把数据转化成可见的表现形式</strong>都是数据可视化</p>\n<p>数据可视化分类：</p>\n<ul>\n<li>科学可视化：科学实验数据的直观展示</li>\n<li>信息可视化：对抽象数据的直观展示，更关注抽象与高维数据</li>\n<li>可视分析：对分析结果的直观展现，及交互式反馈，是一个跨领域的方向</li>\n</ul>\n<p>为什么要数据可视化：</p>\n<ul>\n<li>记录信息</li>\n<li>分析推理</li>\n<li>证实假设</li>\n<li>交流思想</li>\n</ul>\n<h2 id=\"可视化设计原则和方法\"><a class=\"anchor\" href=\"#可视化设计原则和方法\">#</a> 可视化设计原则和方法</h2>\n<p>能够<strong>正确</strong>的表达数据中的信息而<strong>不产生偏差与歧义</strong></p>\n<h3 id=\"常见的错误\"><a class=\"anchor\" href=\"#常见的错误\">#</a> 常见的错误</h3>\n<ol>\n<li><strong>透视失真</strong>：\n<ul>\n<li>如果数字是由视觉元素表示的，那么他们应该与视觉元素的感知程度成正比</li>\n<li>使用清晰、详细和彻底的标签，以避免图形失真和含糊不清</li>\n<li><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126141359958.png\" alt=\"image-20220126141359958\"></li>\n</ul>\n</li>\n<li><strong>图形设计 &amp; 数据尺度</strong>：\n<ul>\n<li>图形的每一部分都会产生对其的视觉预期：</li>\n<li>这些预期往往决定了眼睛实际看到的东西</li>\n<li>错误的数据洞察，产生于在图形的某个地方发生的不正确的视觉预期推断</li>\n<li>一个典型的例子：轴刻度，我们期望它从始至终能够保持连贯且一致</li>\n<li><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126160754580.png\" alt=\"image-20220126160754580\"></li>\n</ul>\n</li>\n<li><strong>数据上下文</strong>：\n<ul>\n<li>应该把数据的全貌展现出来，不能断章取义，否则可能会产生很强的误导性</li>\n<li><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126160919495.png\" alt=\"image-20220126160919495\"></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"可视化设计原则\"><a class=\"anchor\" href=\"#可视化设计原则\">#</a> 可视化设计原则</h3>\n<ul>\n<li>准确地展示数据</li>\n<li>节省笔墨</li>\n<li>节省空间</li>\n<li>消除不必要的【无价值】图形</li>\n<li>在最短时间内传达最多的信息</li>\n</ul>\n<h3 id=\"优秀数据墨水样例\"><a class=\"anchor\" href=\"#优秀数据墨水样例\">#</a> 优秀数据墨水样例</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126142033074.png\" alt=\"image-20220126142033074\"></p>\n<h2 id=\"视觉感知\"><a class=\"anchor\" href=\"#视觉感知\">#</a> 视觉感知</h2>\n<p>可视化致力于外部认知，也就是说，怎样<strong>利用大脑以外的资源</strong>来<strong>增强大脑本身的认知能力</strong></p>\n<h3 id=\"两个例子\"><a class=\"anchor\" href=\"#两个例子\">#</a> 两个例子</h3>\n<ol>\n<li>如果要从一串都是黑色的数字中找出<em>数字 3</em> 是一件很困难的事，但是如果把<em>数字 3</em> 通过不同颜色与其他数字区分开来，就变得很容易了</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126142419526.png\" alt=\"image-20220126142419526\"></p>\n<ol start=\"2\">\n<li>乍一看，字母 A 与 B 的颜色似乎不同，但这其实只是环境的误导，当把误导人的环境给遮挡住后，就能够很明显的看出来</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126142425640.png\" alt=\"image-20220126142425640\"></p>\n<h3 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h3>\n<ul>\n<li>\n<p>人类视觉系统观察的是变化，而不是绝对值，并且<strong>容易被边界吸引</strong></p>\n</li>\n<li>\n<p>在可视化设计中，设计者需要充分考虑到人类感知系统的这些现象，以使得设计的可视化结果<strong>不会</strong>存在<strong>阻碍或误导用户</strong>的可视化元素</p>\n</li>\n</ul>\n<h3 id=\"格式塔理论\"><a class=\"anchor\" href=\"#格式塔理论\">#</a> 格式塔理论</h3>\n<ol>\n<li>\n<p><strong>就近原则</strong></p>\n<p>当视觉元素在空间距离上相距较近时，人们通常倾向于将他们归为一组。</p>\n<p>将数据元素放在靠近的位置，可以突出它们之间的关联性。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126164154339.png\" alt=\"image-20220126164154339\"></p>\n</li>\n<li>\n<p><strong>相似原则</strong></p>\n<p>形状、大小、颜色、强度等属性方面比较相似时，这些物体就容易被看作一个整体。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126164214258.png\" alt=\"image-20220126164214258\"></p>\n</li>\n<li>\n<p><strong>连续性原则</strong></p>\n<p>人们在观察事物的时候会很自然地沿着物体的边界，将不连续的物体视为连续的整体。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126164233149.png\" alt=\"image-20220126164233149\"></p>\n</li>\n<li>\n<p><strong>闭合原则</strong></p>\n<p>有些图形可能本身是不完整或者不闭合的，但主体有一种使其闭合的倾向，人们就会很容易地感知整个物体而忽略未闭合的特征。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126143048168.png\" alt=\"image-20220126143048168\"></p>\n</li>\n<li>\n<p><strong>共势原则</strong></p>\n<p>如果一个对象中的一部分都向共同的方向去运动，那这些共同移动的部分就易被感知为一个整体。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126143134163.png\" alt=\"image-20220126143134163\"></p>\n</li>\n<li>\n<p><strong>对称性原则</strong></p>\n<p>对称的元素被视为同一组的一部分。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126143207724.png\" alt=\"image-20220126143207724\"></p>\n</li>\n<li>\n<p><strong>图形与背景关系原则</strong></p>\n<p>大脑通常认为构图中最小的物体是图形，而更大的物体则是背景。・跟凹面元素相比，凸面元素与图形相关联更多些。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126143259746.png\" alt=\"image-20220126143259746\"></p>\n</li>\n</ol>\n<p>总结：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126143337210.png\" alt=\"image-20220126143337210\"></p>\n<h2 id=\"视觉编码\"><a class=\"anchor\" href=\"#视觉编码\">#</a> 视觉编码</h2>\n<p>视觉编码是一种：将<strong>数据信息</strong>（属性 + 值）映射成<strong>可视化元素</strong>（可视化符号 + 视觉通道）的技术</p>\n<h3 id=\"可视化符号\"><a class=\"anchor\" href=\"#可视化符号\">#</a> 可视化符号</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126143645686.png\" alt=\"image-20220126143645686\"></p>\n<h3 id=\"视觉通道\"><a class=\"anchor\" href=\"#视觉通道\">#</a> 视觉通道</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220126143802028.png\" alt=\"image-20220126143802028\"></p>\n<h3 id=\"特性\"><a class=\"anchor\" href=\"#特性\">#</a> 特性</h3>\n<p>不同的视觉编码在表达信息的<strong>作用</strong>和<strong>能力</strong>上有不同的特性：</p>\n<ul>\n<li>\n<p>当利用数量通道编码表示数值属性时:</p>\n<p>位置通道是最为精确的，其次是长度、角度、面积、深度、色温、饱和度、曲率、最后是体积</p>\n</li>\n<li>\n<p>当利用标识通道表示分类属性时:</p>\n<p>划分空间区域最为有效，其后依次是色向、动向、形状</p>\n</li>\n</ul>\n<h2 id=\"面向前端的数据可视化工具\"><a class=\"anchor\" href=\"#面向前端的数据可视化工具\">#</a> 面向前端的数据可视化工具</h2>\n<ol>\n<li><strong>D3</strong>：公认的最好的可视化工具，但是上手较难</li>\n<li><strong>Vega</strong>：一种可视化语法。通过其<strong>声明式语言</strong>，可以用 JSON 格式描述可视化的视觉外观和交互行为，并使用 Canvas 或 SVG 生成视图</li>\n<li><strong>G2</strong>：— 套面向常规统计图表，以数据驱动的高交互<strong>可视化图形语法</strong>，具有高度的易用性和扩展性。使用 G2，你可以无需关注图表各种繁琐的实现细节，一条语句即可使用 Canvas 或 SVG 构建出各种各样的可交互的统计图表。</li>\n<li><strong>ECharts</strong>：一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（ IE9/10/11，Chrome，Firefox，Safari 等），底层依赖矢量图形库 ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表</li>\n</ol>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bS5qdWVqaW4uY24veW91dGhjYW1w\">青训营</span>课程</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划",
                "数据可视化"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/21/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/21/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80-%E7%AC%94%E8%AE%B0/",
            "title": "Web安全基础 - 笔记",
            "date_published": "2022-01-21T15:40:47.000Z",
            "content_html": "<blockquote>\n<p>从攻击角度和防御角度看 Web 安全：XSS、CSRF、Injection、Dos、DDos、中间人攻击</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"web开发安全-笔记\"><a class=\"anchor\" href=\"#web开发安全-笔记\">#</a> Web 开发安全 - 笔记</h1>\n<h2 id=\"攻击篇\"><a class=\"anchor\" href=\"#攻击篇\">#</a> 攻击篇</h2>\n<h3 id=\"xss\"><a class=\"anchor\" href=\"#xss\">#</a> XSS</h3>\n<ul>\n<li>XSS（<em> <code>Cross-Site Scripting</code> </em>）</li>\n<li>在安全内容中插入用户自己的恶意代码</li>\n<li>利用了网站开发者<strong>盲目信任用户的提交内容</strong> + HTML 文档特性（string -&gt; DOM）</li>\n</ul>\n<h4 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h4>\n<ul>\n<li>通常难以从 UI 上感知（暗地里执行脚本）</li>\n<li>窃取用户信息（cookie/token）</li>\n<li>绘制 UI（例如弹窗），诱骗用户点击 / 填写表单</li>\n</ul>\n<h4 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h4>\n<ul>\n<li>\n<p>Stored XSS</p>\n<ul>\n<li>恶意脚本被存在数据库中</li>\n<li>访问页面 -&gt; 读数据 -&gt; 被攻击</li>\n<li>危害<strong>最大</strong>，对全部用户可见</li>\n</ul>\n</li>\n<li>\n<p>Reflected XSS</p>\n<ul>\n<li>不涉及数据库</li>\n<li>从 URL 上攻击</li>\n<li>例如： <code>host/path/?param=&lt;script&gt;alert('123')&lt;/script&gt;</code></li>\n</ul>\n</li>\n<li>\n<p>DOM-based XSS</p>\n<ul>\n<li>不需要服务器的参与</li>\n<li>恶意攻击的发起 + 执行，全在浏览器完成</li>\n</ul>\n</li>\n<li>\n<p>Mutation-based XSS</p>\n<ul>\n<li>\n<p>利用了浏览器渲染 DOM 的特性（独特优化）</p>\n</li>\n<li>\n<p>不同浏览器，会有区别（按浏览器进行攻击）</p>\n</li>\n<li>\n<p>例如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&lt;/noscript>&lt;img src=x onerror=alert(1)><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"csrf\"><a class=\"anchor\" href=\"#csrf\">#</a> CSRF</h3>\n<ul>\n<li>\n<p>CSRF（<em> <code>Cross-site request forgery</code> </em>）</p>\n</li>\n<li>\n<p>在用户不知情的前提下</p>\n</li>\n<li>\n<p>利用用户权限（cookie）</p>\n</li>\n<li>\n<p>构造指定 HTTP 请求，窃取或修改用户敏感信息</p>\n</li>\n<li>\n<p>例如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://bank.com/transfer?to=hacker&amp;amount=100<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"injection\"><a class=\"anchor\" href=\"#injection\">#</a> Injection</h3>\n<h4 id=\"sql-injection\"><a class=\"anchor\" href=\"#sql-injection\">#</a> SQL Injection</h4>\n<p>攻击流程：</p>\n<ol>\n<li>请求\n<ul>\n<li>SQL 参数（恶意注入）</li>\n</ul>\n</li>\n<li>Server\n<ul>\n<li>拼接参数 -&gt; 运行 SQL code</li>\n</ul>\n</li>\n<li>数据库\n<ul>\n<li>获取其他数据</li>\n<li>修改数据</li>\n<li>删除数据等</li>\n</ul>\n</li>\n</ol>\n<p>例如： <code>SELECT XXX FROM $&#123;'any; DROP TABLE table;'&#125;</code></p>\n<h4 id=\"其他-injection\"><a class=\"anchor\" href=\"#其他-injection\">#</a> 其他 Injection</h4>\n<ul>\n<li>CLI</li>\n<li>OS command</li>\n<li>SSRF（Server-Side Request Forgery），服务端伪造请求\n<ul>\n<li>严格而言，SSRF 不是 injection，但是原理类似</li>\n</ul>\n</li>\n</ul>\n<p>例如：</p>\n<ol>\n<li><code>const command =  <code>covert-cli video -o '$&#123;&quot;' &amp;&amp; rm -rf /&quot;&#125;'</code> </code></li>\n<li>请求<strong>用户自定义</strong>的 callback URL + web server 通常有内网访问权限</li>\n</ol>\n<h3 id=\"dos\"><a class=\"anchor\" href=\"#dos\">#</a> DoS</h3>\n<ul>\n<li>DoS（<em> <code>Denial of Service</code> </em>）</li>\n<li>通过某种方式（构造特定请求），导致服务器资源被显著消耗，来不及相应更多请求，导致请求挤压，进而雪崩</li>\n</ul>\n<p>例如：</p>\n<ul>\n<li>基于正则表达式的 DoS（利用正则表达式贪婪模式）\n<ul>\n<li><code>/^((ab)*)+$/</code></li>\n<li>构造 <code>&quot;abababababababa&quot;</code></li>\n<li>造成算法多次回溯，导致响应时间📈，接口吞吐量📉</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ddos\"><a class=\"anchor\" href=\"#ddos\">#</a> DDoS</h3>\n<ul>\n<li>DDoS（<em> <code>Distributed DoS</code> </em>）</li>\n<li>短时间内，来自大量僵尸设备的请求流量，服务器不能及时完成全部请求，导致请求堆积，进而雪崩效应，无法响应新请求</li>\n<li>攻击特点\n<ul>\n<li>直接访问 IP</li>\n<li>任意 API</li>\n<li>消耗大量带宽（耗尽）</li>\n</ul>\n</li>\n</ul>\n<p>例如： <code>SYN Flood</code></p>\n<h3 id=\"中间人攻击\"><a class=\"anchor\" href=\"#中间人攻击\">#</a> 中间人攻击</h3>\n<p>前提：</p>\n<ul>\n<li>HTTP 明文传输</li>\n<li>信息篡改不可知</li>\n<li>对方身份未验证</li>\n</ul>\n<p>危害：</p>\n<ul>\n<li>窃取信息</li>\n<li>修改请求、响应</li>\n</ul>\n<p>攻击方：</p>\n<ul>\n<li>恶意 WebView</li>\n<li>路由器</li>\n<li>ISP 等</li>\n</ul>\n<h2 id=\"防御篇\"><a class=\"anchor\" href=\"#防御篇\">#</a> 防御篇</h2>\n<h3 id=\"xss-2\"><a class=\"anchor\" href=\"#xss-2\">#</a> XSS</h3>\n<ul>\n<li>永远不信任用户的提交内容</li>\n<li>永远不要将用户提交内容直接转换成 DOM</li>\n</ul>\n<p>可用工具：</p>\n<ul>\n<li>前端\n<ul>\n<li>主流框架（React、Vue 等）默认防御 XSS</li>\n<li><code>google-closure-library</code></li>\n</ul>\n</li>\n<li>服务端（Node）\n<ul>\n<li>npm 包： <code>DOMPurify</code></li>\n</ul>\n</li>\n</ul>\n<p>注意点：</p>\n<ul>\n<li>⚠string -&gt; DOM：对 string 进行转义</li>\n<li>⚠上传 svg（svg 可以内嵌 script 标签）：对 svg 标签进行扫描</li>\n<li>⚠自定义跳转链接：最好不要允许，要做好过滤</li>\n<li>⚠自定义样式（问卷场景下利用 css 的 <code>background: url(&quot;https://example.com/?income=gt10k&quot;)</code>  窃取用户隐私）</li>\n</ul>\n<p>安全设置：</p>\n<ul>\n<li>Same-origin Policy：同源策略</li>\n<li>CSP（<em> <code>Content Security Policy</code> </em>）：确认安全来源的脚本、拒绝 <code>eval</code>  等</li>\n</ul>\n<h3 id=\"csrf-2\"><a class=\"anchor\" href=\"#csrf-2\">#</a> CSRF</h3>\n<ul>\n<li>Origin 头 + Referer 头</li>\n<li>token + token 过期时间：token 必须和注册用户绑定</li>\n<li>针对 iframe 攻击 -&gt;  <code>X-Frame-Options: DENY/SAMEORIGIN</code></li>\n<li>anti-pattern：<strong>不要</strong>将数据更新 &amp; 获取逻辑放在同一个接口中</li>\n<li>避免用户信息被携带：SameSite Cookie 设置（从根源上解决 CSRF）</li>\n<li>采用专门的中间件防御 CSRF</li>\n</ul>\n<h3 id=\"injection-2\"><a class=\"anchor\" href=\"#injection-2\">#</a> Injection</h3>\n<ul>\n<li>找到项目中使用 SQL 的地方，使用 <code>prepared statement</code></li>\n<li>最小权限原则\n<ul>\n<li>不要随便用 <code>sudo</code>  或者 <code>root</code>  执行命令</li>\n</ul>\n</li>\n<li>建立允许名单 + 过滤\n<ul>\n<li>不允许执行 <code>rm</code>  命令</li>\n</ul>\n</li>\n<li>对 URL 类型参数进行协议 / 域名 /ip 等限制\n<ul>\n<li>不允许访问内网</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"dos-2\"><a class=\"anchor\" href=\"#dos-2\">#</a> DoS</h3>\n<ul>\n<li>做好 Code Review：避免出现 <code>/(ab*)+/</code>  这样的代码</li>\n<li>代码扫描工具 + 正则性能测试</li>\n<li><strong>不允许</strong>使用用户提供的正则</li>\n</ul>\n<h3 id=\"ddos-2\"><a class=\"anchor\" href=\"#ddos-2\">#</a> DDoS</h3>\n<ul>\n<li>流量治理\n<ul>\n<li>负载均衡</li>\n<li>API 网关</li>\n<li>CDN</li>\n</ul>\n</li>\n<li>快速自动扩容</li>\n<li>非核心服务降级</li>\n</ul>\n<h3 id=\"防御中间人\"><a class=\"anchor\" href=\"#防御中间人\">#</a> 防御中间人</h3>\n<ul>\n<li>\n<p>使用 HTTPS：可靠性、完整性、不可抵赖性</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220121145153571.png\" alt=\"image-20220121145153571\"></p>\n</li>\n<li>\n<p>HSTS（<em> <code>HTTP Strict-Transport-Security</code> </em>）：将 HTTP 主动升级到 HTTPS</p>\n</li>\n<li>\n<p>SRI（<em> <code>SubResource Integrity</code> </em>）：对比从 CDN 中拿到的文件 hash 值，例如： <code>&lt;script src=&quot;/example/app.js&quot; integrity=&quot;sha384-&#123;some-hash-value&#125;&quot; crossorigin= &quot;anonymous&quot;&gt;&lt;/script&gt;</code></p>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V0aGNhbXAuYnl0ZWRhbmNlLmNvbS8=\">青训营</span>课程</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "Web安全",
                "笔记补完计划"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/21/WebGL%E5%9F%BA%E7%A1%80-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/21/WebGL%E5%9F%BA%E7%A1%80-%E7%AC%94%E8%AE%B0/",
            "title": "WebGL基础 - 笔记",
            "date_published": "2022-01-21T14:40:47.000Z",
            "content_html": "<blockquote>\n<p>为什么要使用 WebGL/GPU</p>\n<p>怎样使用 WebGL（WebGL 入门第一步）</p>\n<p>更多读物</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"webgl基础-笔记\"><a class=\"anchor\" href=\"#webgl基础-笔记\">#</a> WebGL 基础 - 笔记</h1>\n<h2 id=\"why-webglwhy-gpu\"><a class=\"anchor\" href=\"#why-webglwhy-gpu\">#</a> Why WebGL/Why GPU？</h2>\n<h3 id=\"webgl是什么\"><a class=\"anchor\" href=\"#webgl是什么\">#</a> WebGL 是什么？</h3>\n<ul>\n<li>\n<p>GPU ≠ WebGL ≠ 2D</p>\n</li>\n<li>\n<p>WebGL 是浏览器上的 OpenGL</p>\n</li>\n<li>\n<p>需要一定计算机图形学基础和线性代数基础</p>\n</li>\n</ul>\n<h3 id=\"modern-graphics-system\"><a class=\"anchor\" href=\"#modern-graphics-system\">#</a> Modern Graphics System</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220121101001922.png\" alt=\"image-20220121101001922\"></p>\n<p>光栅（Raster）：几乎所有的现代图形系统都是基于光栅来绘制图形的，光栅就是指构成图像的像素阵列。</p>\n<p>像素（Pixel）：一个像素对应图像上的一个点，它通常保存图像上的某个具体位置的颜色等信息。</p>\n<p>帧缓存（Frame Buffer）：在绘图过程中，像素信息被存放于帧缓存中，帧缓存是一块内存地址。</p>\n<p>CPU（Central Processing Unit）：中央处理单元，负责逻辑计算。</p>\n<p>GPU（Graphics Processing Unit）：图形处理单元，负责图形计算。</p>\n<p>一般来说，在图形绘制时，有以下步骤：</p>\n<ol>\n<li>\n<p>轮廓提取 /meshing</p>\n</li>\n<li>\n<p>光栅化</p>\n</li>\n<li>\n<p>帧缓存</p>\n</li>\n<li>\n<p>渲染</p>\n</li>\n</ol>\n<h3 id=\"cpu-vs-gpu\"><a class=\"anchor\" href=\"#cpu-vs-gpu\">#</a> CPU vs GPU</h3>\n<p>CPU 的优势在于：CPU 能够处理大计算量的任务，但是 CPU 的并行处理有上限</p>\n<p>GPU 的优势在于：GPU 的计算量处理能力不大，但是 GPU 中的所有计算都可以并行处理</p>\n<p>因为图形渲染的像素处理数量一般都是非常大的，但是每个像素的计算量却不大，所以 GPU 处理图形渲染就非常有优势</p>\n<h2 id=\"webgl-startup\"><a class=\"anchor\" href=\"#webgl-startup\">#</a> WebGL Startup</h2>\n<ol>\n<li>\n<p>创建 WebGL 上下文</p>\n</li>\n<li>\n<p>创建 WebGL Program</p>\n</li>\n<li>\n<p>将数据存入缓冲区</p>\n</li>\n<li>\n<p>将缓冲区数据读取到 GPU</p>\n</li>\n<li>\n<p>GPU 执行 WebGL 程序，输出结果</p>\n</li>\n</ol>\n<h3 id=\"shaders着色器\"><a class=\"anchor\" href=\"#shaders着色器\">#</a> Shaders（着色器）</h3>\n<p>Vertex Shader</p>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">attribute</span> <span class=\"token keyword\">vec2</span> position<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    gl_Pointsize <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置像素点大小为 1.0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    gl_Position <span class=\"token operator\">=</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span>position，<span class=\"token number\">1.0</span>，<span class=\"token number\">1.0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Fragment Shader</p>\n<figure class=\"highlight glsl\"><figcaption data-lang=\"GLSL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">precision</span> <span class=\"token keyword\">mediump</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 每个像素都被并行执行这段代码，设置了像素的颜色</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    gl_Fragcolor <span class=\"token operator\">=</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span>，<span class=\"token number\">0.0</span>，<span class=\"token number\">0.0</span>，<span class=\"token number\">1.0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>着色器内可以执行向量运算，并且定义的变量可以共享：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220121104127381.png\" alt=\"image-20220121104127381\"></p>\n<h3 id=\"create-program\"><a class=\"anchor\" href=\"#create-program\">#</a> Create Program</h3>\n<p>webgl 是一个很底层的 API，所以创建 webgl 程序也是个比较复杂的过程，类似编译器的工作需要自己写</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> gl <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webgl'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> vertexShader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">VERTEX_SHADER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gl<span class=\"token punctuation\">.</span><span class=\"token function\">shaderSource</span><span class=\"token punctuation\">(</span>vertexShader<span class=\"token punctuation\">,</span> vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>gl<span class=\"token punctuation\">.</span><span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>vertexShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> fragmentShader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAGMENT_SHADER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>gl<span class=\"token punctuation\">.</span><span class=\"token function\">shaderSource</span><span class=\"token punctuation\">(</span>fragmentShader<span class=\"token punctuation\">,</span> fragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>gl<span class=\"token punctuation\">.</span><span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>fragmentShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> program <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> vertexShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> fragmentShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>gl<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>gl<span class=\"token punctuation\">.</span><span class=\"token function\">useProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"data-to-frame-buffer\"><a class=\"anchor\" href=\"#data-to-frame-buffer\">#</a> Data to Frame Buffer</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220121103211058.png\" alt=\"image-20220121103211058\"></p>\n<p>如何创建一个三角形？</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> points <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 坐标 (-1, -1)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 坐标 (0, 1)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 坐标 (1, -1)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"frame-buffer-to-gpu\"><a class=\"anchor\" href=\"#frame-buffer-to-gpu\">#</a> Frame Buffer to GPU</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220121103453798.png\" alt=\"image-20220121103453798\"></p>\n<h3 id=\"output\"><a class=\"anchor\" href=\"#output\">#</a> Output</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gl<span class=\"token punctuation\">.</span><span class=\"token function\">drawArrays</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLES</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> points<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"webgl的封装库meshjs\"><a class=\"anchor\" href=\"#webgl的封装库meshjs\">#</a> WebGL 的封装库 —Mesh.js</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220121104552327.png\" alt=\"image-20220121104552327\"></p>\n<h3 id=\"polygons\"><a class=\"anchor\" href=\"#polygons\">#</a> Polygons</h3>\n<p>如何绘制一个多边形？</p>\n<ul>\n<li>三角剖分</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220121104708110.png\" alt=\"image-20220121104708110\"></p>\n<p>可以使用<strong> Earcut</strong> 库进行三角剖分</p>\n<h3 id=\"3d-meshing\"><a class=\"anchor\" href=\"#3d-meshing\">#</a> 3D Meshing</h3>\n<p>一般来说，3D 的模型是在设计软件里先设计好再导出，而不是像 2D 一样实时计算</p>\n<h3 id=\"transform\"><a class=\"anchor\" href=\"#transform\">#</a> Transform</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220121105114995.png\" alt=\"image-20220121105114995\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220121105325055.png\" alt=\"image-20220121105325055\"></p>\n<h3 id=\"3d-matrix\"><a class=\"anchor\" href=\"#3d-matrix\">#</a> 3D Matrix</h3>\n<p>3D 标准模型的四个齐次矩阵（mat4）</p>\n<ol>\n<li>\n<p>投影矩阵 Projection Matrix</p>\n</li>\n<li>\n<p>模型矩阵 Model Matrix</p>\n</li>\n<li>\n<p>视图矩阵 View Matrix</p>\n</li>\n<li>\n<p>法向量矩阵 Normal Matrix</p>\n</li>\n</ol>\n<h2 id=\"read-more\"><a class=\"anchor\" href=\"#read-more\">#</a> Read More</h2>\n<ol>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90aGVib29rb2ZzaGFkZXJzLmNvbS8=\">The book of shaders</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NyY24vbWVzaC5qcw==\">Mesh.js</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb29kbGUud2ViZ2wuZ3JvdXAv\">glsl-doodle</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3Nwcml0ZWpzLmNvbS8=\">SpriteJS</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90aHJlZWpzLm9yZy8=\">ThreeJS</span></p>\n</li>\n<li>\n<p><a href=\"shadertoy.com\">shadertoy.com</a></p>\n</li>\n</ol>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V0aGNhbXAuYnl0ZWRhbmNlLmNvbS8=\">青训营</span>课程</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划",
                "WebGL"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/20/Node-js-%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/20/Node-js-%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E7%AC%94%E8%AE%B0/",
            "title": "Node.js 与开发实战 - 笔记",
            "date_published": "2022-01-20T10:59:40.000Z",
            "content_html": "<blockquote>\n<p>Why：为什么要学 Node.js - Node.js 的应用场景</p>\n<p>What：Node.js 是什么 - Node.js 运行时结构</p>\n<p>How：怎样编写 Node.js 代码 - Http Server</p>\n<p>延伸话题：贡献 Node.js 代码、编译 Node.js、诊断 / 追踪、WASM，NAPI</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"nodejs-与开发开发实战-笔记\"><a class=\"anchor\" href=\"#nodejs-与开发开发实战-笔记\">#</a> Node.js 与开发开发实战 - 笔记</h1>\n<h2 id=\"nodejs-的应用场景-why\"><a class=\"anchor\" href=\"#nodejs-的应用场景-why\">#</a> Node.js 的应用场景 - Why</h2>\n<ol>\n<li>\n<p><strong>前端工程化</strong>：</p>\n<ul>\n<li>Bundle：webpack, vite, esbuild, parcel</li>\n<li>Uglify：uglifyjs</li>\n<li>Transpile：bablejs, typescript</li>\n<li>其他语言加入竞争：esbuild（go）, parcel（rust）, prisma</li>\n<li>现状：难以替代</li>\n</ul>\n</li>\n<li>\n<p>Web<strong> 服务端应用</strong>：</p>\n<ul>\n<li>学习曲线平缓，开发效率较高</li>\n<li>运行效率接近常见的编译语言</li>\n<li>社区生态丰富及工具链成熟 (npm, V8 inspector)</li>\n<li>与前端结合的场景会有优势 (SSR 服务端渲染)</li>\n<li>现状：竞争激烈，Node.js 有自己独特的优势</li>\n</ul>\n</li>\n<li>\n<p>Electron<strong> 跨端桌面应用</strong>：</p>\n<ul>\n<li>商业应用：vscode, slack, discord, zoom</li>\n<li>大型公司内的效率工具</li>\n<li>现状：大部分场景在选型时，都值得考虑</li>\n</ul>\n</li>\n<li>\n<p><strong>字节跳动内部应用</strong>：</p>\n<ul>\n<li>BFF 应用、SSR 应用，举例：Modern.js</li>\n<li>服务端应用，例如：头条搜索，西瓜视频，懂车帝</li>\n<li>Electron 应用：飞连，飞书</li>\n<li>每年新增 1000+ Node.js 应用</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"nodejs-运行时结构-what\"><a class=\"anchor\" href=\"#nodejs-运行时结构-what\">#</a> Node.js 运行时结构 - What</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220120142324582.png\" alt=\"image-20220120142324582\"></p>\n<p>结构：</p>\n<ul>\n<li>\n<p>V8：JavaScript Runtime，诊断调试工具 (inspector)</p>\n</li>\n<li>\n<p>libuv：eventloop (事件循环)， syscall (系统调用)</p>\n</li>\n<li>\n<p>举例：用 node-fetch 发起请求时…</p>\n</li>\n</ul>\n<p>特点：</p>\n<ul>\n<li>\n<p>异步 I/O：</p>\n<p>当 Node.js 执行 I/O 操作时，会在响应返回后恢复操作，而不是阻塞线程并占用额外内存等待</p>\n</li>\n<li>\n<p>单线程：</p>\n<ul>\n<li>\n<p>JS 单线程</p>\n<p>实际：JS 线程 + uv 线程池 + V8 任务线程池 + V8 Inspector 线程</p>\n</li>\n<li>\n<p><strong>优点</strong>：不用考虑多线程状态同步问题，也就不需要锁；同时还能比较高效地利用系统资源</p>\n</li>\n<li>\n<p><strong>缺点</strong>：阻塞会产生更多负面影响</p>\n<p>解决办法：多进程或多线程</p>\n</li>\n</ul>\n</li>\n<li>\n<p>跨平台：</p>\n<ul>\n<li>\n<p>跨平台 (大部分功能、api)</p>\n</li>\n<li>\n<p>Node.js 跨平台 + JS 无需编译环境 (+ Web 跨平台 + 诊断工具跨平台)</p>\n<p>= 开发成本低 (大部分场景无需担心跨平台问题)，整体学习成本低</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编写-http-server-how\"><a class=\"anchor\" href=\"#编写-http-server-how\">#</a> 编写 Http Server - How</h2>\n<h3 id=\"安装nodejs\"><a class=\"anchor\" href=\"#安装nodejs\">#</a> 安装 Node.js</h3>\n<ul>\n<li>\n<p>Mac,Linux 推荐使用 <code>nvm</code> 。多版本管理。</p>\n</li>\n<li>\n<p>Windows 推荐  <code>nvm4w</code>  或是官方安装包。</p>\n</li>\n<li>\n<p>安装慢，安装失败的情况，设置安装源</p>\n<p><code>NVM_NODEJS_ORG_MRROR=https://npmmirror.com/mirrors/node nvm install 16</code></p>\n</li>\n</ul>\n<h3 id=\"基础http-server\"><a class=\"anchor\" href=\"#基础http-server\">#</a> 基础 Http Server</h3>\n<p>返回 JSON 的 Server 示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> bufs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> bufs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// bufs</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>bufs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">let</span> ret<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            ret <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            msg <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">.</span>msg <span class=\"token operator\">||</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            msg <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">const</span> responseJson <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            msg<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">receive: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>msg<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>responseJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening on port: '</span> <span class=\"token operator\">+</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"静态文件服务\"><a class=\"anchor\" href=\"#静态文件服务\">#</a> 静态文件服务</h3>\n<p>简单的静态文件服务：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> folderPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> filepath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>folderPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'./'</span><span class=\"token operator\">+</span> info<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> filestream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    filestream<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening on port: '</span> <span class=\"token operator\">+</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>与高性能、可靠的服务相比，还差什么？</p>\n<ol>\n<li>CDN：缓存＋加速</li>\n<li>分布式储存，容灾</li>\n</ol>\n<h3 id=\"react-ssr\"><a class=\"anchor\" href=\"#react-ssr\">#</a> React SSR</h3>\n<p>SSR (server side rendering) 有什么特点？</p>\n<ul>\n<li>相比传统 HTML 模版引擎：避免重复编写代码</li>\n<li>相比 SPA (single page application)：首屏渲染更快，SEO 友好</li>\n<li>缺点：通常 qps 较低，前端代码编写时需要考虑服务端渲染情况</li>\n</ul>\n<p>SSR 难点：</p>\n<ol>\n<li>\n<p>需要处理打包代码</p>\n</li>\n<li>\n<p>需要思考前端代码在服务端运行时的逻辑</p>\n</li>\n<li>\n<p>移除对服务端无意义的副作用，或重置环境</p>\n</li>\n</ol>\n<h3 id=\"debug\"><a class=\"anchor\" href=\"#debug\">#</a> Debug</h3>\n<p>V8 Inspector：开箱即用、特性丰富强大、与前端开发一致、跨平台</p>\n<ul>\n<li>node --inspect</li>\n<li>open <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MjI5L2pzb24=\">http://localhost:9229/json</span></li>\n</ul>\n<p>场景：</p>\n<ul>\n<li>查看 console.log 内容.</li>\n<li>breakpoint</li>\n<li>高 CPU、死循环：cpuprofile</li>\n<li>高内存占用：heapsnapshot</li>\n<li>性能分析</li>\n</ul>\n<h3 id=\"部署\"><a class=\"anchor\" href=\"#部署\">#</a> 部署</h3>\n<p>部署要解决的问题：</p>\n<ul>\n<li>守护进程：当进程退出时，重新拉起</li>\n<li>多进程：cluster 便捷地利用多进程</li>\n<li>记录进程状态，用于诊断</li>\n</ul>\n<p>容器环境：</p>\n<ul>\n<li>通常有健康检查的手段，只需考虑多核 cpu 利用率即可</li>\n</ul>\n<h2 id=\"延伸话题\"><a class=\"anchor\" href=\"#延伸话题\">#</a> 延伸话题</h2>\n<h3 id=\"贡献-nodejs-代码\"><a class=\"anchor\" href=\"#贡献-nodejs-代码\">#</a> 贡献 Node.js 代码</h3>\n<p>快速了解 Node.js 代码：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pveWVlY2hldW5nL3RhbGtzL2Jsb2IvbWFzdGVyL2NvZGVfYW5kX2xlYXJuXzIwMTlfYmVpamluZy9jb250cmlidXRpbmctdG8tbm9kZS1jb3JlLnBkZg==\">Node.js Core 贡献入门</span></li>\n</ul>\n<p>好处：</p>\n<ul>\n<li>从使用者的角色逐步理解底层细节，可以解决更复杂的问题；</li>\n<li>自我证明，有助于职业发展；</li>\n<li>解决社区问题，促进社区发展；</li>\n</ul>\n<p>难点：</p>\n<ul>\n<li>花时间</li>\n</ul>\n<h3 id=\"编译nodejs\"><a class=\"anchor\" href=\"#编译nodejs\">#</a> 编译 Node.js</h3>\n<p>为什么要学习编译 Node.js：</p>\n<ul>\n<li>认知：黑盒到白盒，发生问题时能有迹可循</li>\n</ul>\n<p>贡献代码的第一步：</p>\n<ul>\n<li>\n<p>如何编译</p>\n</li>\n<li>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL2RvYy9jb250cmlidXRpbmcvbWFpbnRhaW5pbmctdGhlLWJ1aWxkLWZpbGVzLm1k\">Maintaining the build files</span></p>\n</li>\n<li>\n<p>./configure &amp;&amp; make install</p>\n</li>\n<li>\n<p>演示：给 net 模块添加自定义属性</p>\n</li>\n</ul>\n<h3 id=\"诊断追踪\"><a class=\"anchor\" href=\"#诊断追踪\">#</a> 诊断 / 追踪</h3>\n<ul>\n<li>\n<p>诊断是一个低频、重要同时也相当有挑战的方向。是企业衡量自己能否依赖一门语言的重要参考。</p>\n</li>\n<li>\n<p>技术咨询行业中的热门角色。</p>\n</li>\n<li>\n<p>难点：</p>\n<ul>\n<li>\n<p>需要了解 Node.js 底层，需要了解操作系统以及各种工具</p>\n</li>\n<li>\n<p>需要经验</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"wasmnapi\"><a class=\"anchor\" href=\"#wasmnapi\">#</a> WASM，NAPI</h3>\n<p>Node.js （因为 V8）是执行 WASM 代码的天然容器，和浏览器 WASM 是同一运行时，同时 Node.js 支持 WASI。</p>\n<p>NAPI 执行 C 接口的代码 (C/C++/Rust…)，同时能保留原生代码的性能。</p>\n<p>不同编程语言间通信的一种方案。</p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V0aGNhbXAuYnl0ZWRhbmNlLmNvbS8=\">青训营</span>课程</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pveWVlY2hldW5nL3RhbGtzL2Jsb2IvbWFzdGVyL2NvZGVfYW5kX2xlYXJuXzIwMTlfYmVpamluZy9jb250cmlidXRpbmctdG8tbm9kZS1jb3JlLnBkZg==\">Node.js Core 贡献入门</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划",
                "Node.js"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/20/HTTP%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/20/HTTP%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97-%E7%AC%94%E8%AE%B0/",
            "title": "HTTP实用指南 - 笔记",
            "date_published": "2022-01-20T10:51:19.000Z",
            "content_html": "<blockquote>\n<p>初识 HTTP：网络通讯模型、HTTP 模型</p>\n<p>协议分析：发展历史、HTTP/1.1 报文分析</p>\n<p>场景分析：静态资源、登录、视频播放、文件上传、跨域</p>\n<p>应用：XHR、Fetch、Node 标准库、Axios、体验优化</p>\n<p>其他协议扩展：WebSocket、QUIC</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"http实用指南-笔记\"><a class=\"anchor\" href=\"#http实用指南-笔记\">#</a> HTTP 实用指南 - 笔记</h1>\n<h2 id=\"初识http\"><a class=\"anchor\" href=\"#初识http\">#</a> 初识 HTTP</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220120100347063.png\" alt=\"image-20220120100347063\"></p>\n<h3 id=\"网络通信模型\"><a class=\"anchor\" href=\"#网络通信模型\">#</a> 网络通信模型</h3>\n<p>网络通信模型如下图所示，HTTP 协议位于模型<strong>顶层</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B.png\" alt=\"网络通信模型示例\" title=\"网络通信模型示例\"></p>\n<h3 id=\"http模型\"><a class=\"anchor\" href=\"#http模型\">#</a> HTTP 模型</h3>\n<p>HTTP(<em> <code>Hyper Text Transfer Protocol</code> </em>) 模型如下图所示，是一个应用层（见上图）的协议，基于 TCP 协议，它有如下特点：</p>\n<ul>\n<li>支持多种文件格式的传输</li>\n<li>请求 ↔ 响应 （一个请求对应一个响应）</li>\n<li>简单可扩展（除了 HTTP 标准定义的 HTTP 头外，可由客户端和服务器自行协定新的 HTTP 头）</li>\n<li>无状态</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/HTTP%E6%A8%A1%E5%9E%8B.png\" alt=\"HTTP模型示例\" title=\"HTTP模型示例\"></p>\n<h2 id=\"协议分析\"><a class=\"anchor\" href=\"#协议分析\">#</a> 协议分析</h2>\n<h3 id=\"http协议发展历史\"><a class=\"anchor\" href=\"#http协议发展历史\">#</a> HTTP 协议发展历史</h3>\n<table>\n<thead>\n<tr>\n<th>协议版本</th>\n<th>简介</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>HTTP/0.9</strong></td>\n<td>单行协议</td>\n<td>请求只有 GET，响应只有 HTML 文档</td>\n</tr>\n<tr>\n<td><strong>HTTP/1.0</strong></td>\n<td>构建可扩展性</td>\n<td>增加了 Header，有了状态码，开始支持多种文档类型</td>\n</tr>\n<tr>\n<td><strong>HTTP/1.1</strong></td>\n<td>标准化协议</td>\n<td>链接复用，缓存，内容协商</td>\n</tr>\n<tr>\n<td><strong>HTTP/2</strong></td>\n<td>更优异的表现</td>\n<td>二进制协议，压缩 Header，服务器推送</td>\n</tr>\n<tr>\n<td><strong>HTTP/3</strong></td>\n<td>草案</td>\n<td>未来的协议</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"报文分析http11\"><a class=\"anchor\" href=\"#报文分析http11\">#</a> 报文分析（HTTP/1.1）</h3>\n<ul>\n<li>请求报文：\n<ol>\n<li>起始行（格式：请求方法 请求资源路径 HTTP 版本）</li>\n<li>请求头</li>\n<li>空行</li>\n<li>请求正文</li>\n</ol>\n</li>\n<li>响应报文：\n<ol>\n<li>起始行（格式：HTTP 版本 状态码 状态信息）</li>\n<li>响应头</li>\n<li>空行</li>\n<li>响应正文</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/HTTP%E8%AF%B7%E6%B1%82&amp;%E5%93%8D%E5%BA%94.png\" alt=\"HTTP请求&amp;响应示例\" title=\"HTTP请求&amp;响应示例\"></p>\n<h4 id=\"http-method\"><a class=\"anchor\" href=\"#http-method\">#</a> HTTP Method</h4>\n<ul>\n<li><code>GET</code>  - 请求一个指定资源的表示形式，使用 GET 的请求应该<strong>只</strong>被用于获取数据</li>\n<li><code>POST</code>  - 用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用</li>\n<li><code>PUT</code>  - 用请求有效载荷替换目标资源的所有当前表示</li>\n<li><code>DELETE</code>  - 删除指定的资源</li>\n<li><code>HEAD</code>  - 请求一个<strong>与 GET 请求的响应相同</strong>的响应，但没有响应体</li>\n<li><code>CONNECT</code>  - 建立一个到<strong>由目标资源标识</strong>的服务器的隧道</li>\n<li><code>OPTIONS</code>  - 用于描述目标资源的通信选项</li>\n<li><code>TRACE</code>  - 沿着到目标资源的路径执行一个消息环回测试</li>\n<li><code>PATCH</code>  - 用于对资源的<strong>部分修改</strong></li>\n</ul>\n<p>方法分类：</p>\n<ul>\n<li>安全的：（不会修改服务器数据）\n<ul>\n<li>GET HEAD OPTIONS</li>\n</ul>\n</li>\n<li>幂等的：（同样的请求多次执行<strong>效果相同</strong>）\n<ul>\n<li>GET HEAD OPTIONS PUT DELETE</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"状态码\"><a class=\"anchor\" href=\"#状态码\">#</a> 状态码</h4>\n<p>大类划分：</p>\n<ul>\n<li><code>1xx</code>  - 指示信息，表示信息已接受，继续处理</li>\n<li><code>2xx</code>  - 成功，表示请求已被成功接收 / 理解 / 接受</li>\n<li><code>3xx</code>  - 重定向，要完成请求必须进行更进一步的操作</li>\n<li><code>4xx</code>  - 客户端错误，请求有语法错误或请求无法实现</li>\n<li><code>5xx</code>  - 服务器端错误，服务器未能实现合法的请求</li>\n</ul>\n<p>常见状态码：</p>\n<ul>\n<li><code>200</code>  OK - 客户端请求成功</li>\n<li><code>301</code>  - 资源（网页等）被永久转移到其他 URL</li>\n<li><code>302</code>  - 临时跳转</li>\n<li><code>401</code>  Unauthorized - 请求未经授权</li>\n<li><code>404</code>  Not Found - 请求资源不存在，可能是输入了错误的 URL</li>\n<li><code>500</code>  - 服务器内部发生了不可预期的错误</li>\n<li><code>504</code>  Gateway Timeout - 网关或者代理的服务器无法在规定的时间内获得想要的响应</li>\n</ul>\n<h4 id=\"restful-api\"><a class=\"anchor\" href=\"#restful-api\">#</a> RESTful API</h4>\n<p>一种 API 设计风格；REST (<em> <code>Representation State Transfer</code> </em>) 有以下特点：</p>\n<ul>\n<li>每一个 URI 代表一种资源</li>\n<li>客户端和服务器之间，传递这种资源的某种表现层</li>\n<li>客户端通过 HTTP Method，对服务器资源进行操作，实现 “表现层状态转化”</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/RESTful%20API%E7%A4%BA%E4%BE%8B.png\" alt=\"例子\" title=\"例子\"></p>\n<h4 id=\"常用请求头\"><a class=\"anchor\" href=\"#常用请求头\">#</a> 常用请求头</h4>\n<ul>\n<li>Accept\n<ul>\n<li>接收类型，表示浏览器<strong>支持的 MIME 类型</strong> （对标服务端返回的 Content-Type）</li>\n</ul>\n</li>\n<li>Content-Type\n<ul>\n<li>客户端发送出去实体内容的类型</li>\n</ul>\n</li>\n<li>Cache-Control\n<ul>\n<li>指定请求和响应遵循的缓存机制，如 no-cache</li>\n</ul>\n</li>\n<li>If-Modified-Since\n<ul>\n<li>对应服务端的 Last-Modified，用来匹配看文件是否变动，<strong>只能精确到 1s 之内</strong></li>\n</ul>\n</li>\n<li>Expires\n<ul>\n<li>缓存控制，在这个时间内不会请求，直接使用缓存，服务端时间</li>\n</ul>\n</li>\n<li>Max-age\n<ul>\n<li>代表资源在本地缓存多少秒，有效时间内不会请求，而是使用缓存</li>\n</ul>\n</li>\n<li>If-None-Match\n<ul>\n<li>对应服务端的 ETag，用来匹配文件内容是否改变（非常精确）</li>\n</ul>\n</li>\n<li>Cookie\n<ul>\n<li>有 cookie 并且<strong>同域</strong>访问时会自动带上</li>\n</ul>\n</li>\n<li>Referer\n<ul>\n<li>该页面的来源 URL（适用于所有类型的请求，会精确到详细页面地址，CSRF 拦截常用到这个字段）</li>\n</ul>\n</li>\n<li>Origin\n<ul>\n<li>最初的请求是从哪里发起的（只会精确到端口）,Origin 比 Referer 更尊重隐私</li>\n</ul>\n</li>\n<li>User-Agent\n<ul>\n<li>用户客户端（<strong>浏览器标识</strong>）的一些必要信息，如 UA 头部等</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"常用响应头\"><a class=\"anchor\" href=\"#常用响应头\">#</a> 常用响应头</h4>\n<ul>\n<li>Content-Type\n<ul>\n<li>服务端返回的实体内容的类型</li>\n</ul>\n</li>\n<li>Cache-Control\n<ul>\n<li>指定请求和响应遵循的缓存机制，如 no-cache</li>\n</ul>\n</li>\n<li>Last-Modified\n<ul>\n<li>请求资源的最后修改时间</li>\n</ul>\n</li>\n<li>Expires\n<ul>\n<li>应该在什么时候认为文档已经过期，从而不再缓存它</li>\n</ul>\n</li>\n<li>Max-age\n<ul>\n<li>客户端的本地资源应该缓存多少秒，开启了 Cache-Control 后有效</li>\n</ul>\n</li>\n<li>ETag\n<ul>\n<li>资源的特定版本的标识符，ETags 类似于指纹</li>\n</ul>\n</li>\n<li>Set-Cookie\n<ul>\n<li>设置和页面关联的 cookie，服务器通过这个头部把 cookie 传给客户端</li>\n</ul>\n</li>\n<li>Server\n<ul>\n<li>服务器的一些相关信息</li>\n</ul>\n</li>\n<li>Access-Control-Allow-Origin\n<ul>\n<li>服务器端允许的请求 Origin 头部（譬如为 *）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"缓存控制\"><a class=\"anchor\" href=\"#缓存控制\">#</a> 缓存控制</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%B1%BB%E5%9E%8B.png\" alt=\"浏览器缓存类型示例\" title=\"浏览器缓存类型示例\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%8E%A7%E5%88%B6.png\" alt=\"浏览器缓存控制示例\" title=\"浏览器缓存控制示例\"></p>\n<h4 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> Cookie</h4>\n<p>Cookie 是呈键值对出现的，具体键值信息如下：</p>\n<ul>\n<li>Name=value\n<ul>\n<li>各种 cookie 的名称和值</li>\n</ul>\n</li>\n<li>Expires=Date\n<ul>\n<li>Cookie 的有效期，缺省时 Cookie 仅在浏览器关闭之前有效。</li>\n</ul>\n</li>\n<li>Path=Path\n<ul>\n<li>限制指定 Cookie 的发送范围的文件目录，默认为当前</li>\n</ul>\n</li>\n<li>Domain=domain\n<ul>\n<li>限制 cookie 生效的域名，默认为创建 cookie 的服务域名</li>\n</ul>\n</li>\n<li>secure\n<ul>\n<li>仅在 HTTPS 安全连接时，才可以发送 Cookie</li>\n</ul>\n</li>\n<li>HttpOnly\n<ul>\n<li>JavaScript 脚本无法获得 Cookie</li>\n</ul>\n</li>\n<li>SameSite=[None|Strict|Lax]\n<ul>\n<li>None 同站、跨站请求都可发送</li>\n<li>Strict 仅在同站发送</li>\n<li>允许与顶级导航一起发送，并将与第三方网站发起的 GET 请求一起发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"http2\"><a class=\"anchor\" href=\"#http2\">#</a> HTTP/2</h3>\n<p><strong>更快</strong>、<strong>更稳定</strong>、<strong>更简单</strong></p>\n<ul>\n<li>帧（frame）：HTTP/2 通信的最小单位，每个帧都包含帧头，至少也会标识出当前帧所属的数据流</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220120103657456.png\" alt=\"image-20220120103657456\"></p>\n<ul>\n<li>\n<p>消息：与逻辑请求或响应消息对应的完整的一系列帧</p>\n</li>\n<li>\n<p>数据流：已建立的连接内的双向字节流，可以承载―条或多条消息</p>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220120103838622.png\" alt=\"image-20220120103838622\"></p>\n<ul>\n<li>\n<p>HTTP/2 连接都是永久的，而且仅需要每个来源一个连接</p>\n</li>\n<li>\n<p>流控制：阻止发送方向接收方发送大量数据的机制</p>\n</li>\n<li>\n<p>服务器推送</p>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220120104057173.png\" alt=\"image-20220120104057173\"></p>\n<h3 id=\"https\"><a class=\"anchor\" href=\"#https\">#</a> HTTPS</h3>\n<p>HTTPS 建立在 HTTP 之上，在 HTTP 与 TCP/IP 中间插了一层 SSL/TLS（加密层），其特点如下：</p>\n<ul>\n<li>经过 SSL/TLS 加密</li>\n<li>对称加密与非对称加密结合\n<ul>\n<li>随机 key 使用非对称加密传输</li>\n<li>报文内容使用对称加密传输（随机 key）</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/HTTPS%E6%B5%81%E7%A8%8B.png\" alt=\"HTTPS流程示例\" title=\"HTTPS流程示例\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220120104610923.png\" alt=\"image-20220120104610923\"></p>\n<h2 id=\"场景分析\"><a class=\"anchor\" href=\"#场景分析\">#</a> 场景分析</h2>\n<h3 id=\"静态资源\"><a class=\"anchor\" href=\"#静态资源\">#</a> 静态资源</h3>\n<p>静态资源解决方案：<br>\n缓存 + CDN (<em> <code>Content Delivery Network</code> </em>) + 文件名 hash</p>\n<p>通过用户就近性和服务器负载的判断，CDN 确保内容以一种极为高效的方式为用户的请求提供服务</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/CDN%E7%AE%80%E5%8D%95%E5%8E%9F%E7%90%86.png\" alt=\"CDN简单原理示例\" title=\"CDN简单原理示例\"></p>\n<h3 id=\"登录\"><a class=\"anchor\" href=\"#登录\">#</a> 登录</h3>\n<p>网站记住登录态主要靠两种方式来鉴权：</p>\n<ol>\n<li>Session + Cookie</li>\n<li>JWT(<em> <code>JSON web token</code> </em>)</li>\n</ol>\n<div style=\"display: flex\">\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/Session+cookie%E6%B5%81%E7%A8%8B.png\" alt=\"Session+cookie流程示例\" title=\"Session+cookie流程示例\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/JWT%E6%B5%81%E7%A8%8B.png\" alt=\"JWT流程示例\" title=\"JWT流程示例\"></p>\n</div>\n<ol start=\"3\">\n<li>SSO（Single Sign On）：单点登录</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220120112838615.png\" alt=\"image-20220120112838615\"></p>\n<h3 id=\"视频播放\"><a class=\"anchor\" href=\"#视频播放\">#</a> 视频播放</h3>\n<p>视频播放的 Response 状态码一般为 <code>206 Partial Content</code> ，意为返回部分资源，资源的长度由 Range 和 Content-range 字段决定，类型由 Content-type 决定</p>\n<p>视频直播协议有：</p>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>描述</th>\n<th>优点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HLS</td>\n<td><i> <code>HTTP Live Streaming</code> </i>，Apple 公司<br>基于 HTTP 协议<br>把一段视频流，分成一个个小的基于 HTTP 的文件来下载</td>\n<td>跨平台</td>\n</tr>\n<tr>\n<td>RTMP</td>\n<td><i> <code>Real Time Messaging Protocol</code> </i>，Adobe 公司<br>基于 TCP</td>\n<td>时延低</td>\n</tr>\n<tr>\n<td>HTTP-FLV</td>\n<td>基于 HTTP<br>http+flv，将音视频数据封装成 FLV 格式，然后通过 HTTP 协议传输给客户端</td>\n<td>时延低</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"文件上传\"><a class=\"anchor\" href=\"#文件上传\">#</a> 文件上传</h3>\n<p>小文件直传，大文件分片上传，在服务器整合</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E7%A8%8B.png\" alt=\"文件上传流程\" title=\"文件上传流程\"></p>\n<h3 id=\"跨域解决方案\"><a class=\"anchor\" href=\"#跨域解决方案\">#</a> 跨域解决方案</h3>\n<ul>\n<li>\n<p>CORS</p>\n<ul>\n<li>Access-Control-Allow-Origin</li>\n<li>Access-Control-Expose-Headers</li>\n<li>Access-Control-Max-Age</li>\n<li>Access-Control-Allow-Credentials</li>\n<li>Access-Control-Allow-Methods</li>\n<li>Access-Control-Allow-Headers</li>\n<li>Access-Control-Request-Method</li>\n<li>Access-Control-Request-Headers</li>\n<li>Origin</li>\n</ul>\n</li>\n<li>\n<p>代理服务器</p>\n<ul>\n<li>同源策略是浏览器的安全策略，不是 HTTP 的</li>\n</ul>\n</li>\n<li>\n<p>Iframe</p>\n<ul>\n<li>不方便，现在几乎没有人用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"应用\"><a class=\"anchor\" href=\"#应用\">#</a> 应用</h2>\n<h3 id=\"ajaxxhr\"><a class=\"anchor\" href=\"#ajaxxhr\">#</a> AJAX：XHR</h3>\n<ul>\n<li>XMLHttpRequest</li>\n<li>readyState</li>\n<li>容易造成回调地狱</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>readyState</th>\n<th>状态名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>UNSENT</td>\n<td>代理被创建，但尚未调用 open () 方法。</td>\n</tr>\n<tr>\n<td>1</td>\n<td>OPENED</td>\n<td>open () 方法已经被调用。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>HEADERS_ RECEIVED</td>\n<td>send () 方法已经被调用，并且头部和状态已经可获得。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>LOADING</td>\n<td>下载中；responseText 属性已经包含部分数据。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>DONE</td>\n<td>下载操作已完成。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>XHR示例 >folded</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//open 后面有三个参数：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 规定请求的类型、URL 以及是否异步处理请求。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//method：请求的类型；GET 或 POST</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//url：文件在服务器上的位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//async：true（异步）或 false（同步） 默认为 true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/getUser?id=xxx'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 发送请求到后端（服务器）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 当请求被发送到服务器时，我们需要执行一些基于响应的任务。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 每当 readyState 改变时，就会触发 onreadystatechange 事件。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//readyState 属性存有 XMLHttpRequest 的状态信息。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 在 xhr 的准备状态发生改变的时候，调用该方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//post 请求方式，接口后面不能追加参数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 如果使用 post 请求方式， 而且是以 key=value 这种形式提交的</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 那么需要设置请求头的类型</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content-type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username=admin&amp;password=123456'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"ajaxfetch\"><a class=\"anchor\" href=\"#ajaxfetch\">#</a> AJAX：Fetch</h3>\n<ul>\n<li>XMLHttpRequest 的升级版</li>\n<li>使用 Promise</li>\n<li>模块化设计，Response/Request/Header 对象</li>\n<li>通过数据流处理对象，支持分块读取</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>Fetch示例 >folded</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">postData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 默认的配置选项用 * 标出</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必须与 'Content-Type' 头匹配</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cache<span class=\"token operator\">:</span> <span class=\"token string\">'no-cache'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// *default, no-cache, reload, force-cache, only-if-cached</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    credentials<span class=\"token operator\">:</span> <span class=\"token string\">'same-origin'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// include, same-origin, *omit</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string\">'user-agent'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mozilla/4.0 MDN Example'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token string\">'content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// *GET, POST, PUT, DELETE, etc.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    mode<span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// no-cors, cors, *same-origin</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    redirect<span class=\"token operator\">:</span> <span class=\"token string\">'follow'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// manual, *follow, error</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    referrer<span class=\"token operator\">:</span> <span class=\"token string\">'no-referrer'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// *client, no-referrer</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//.json () 方法将响应转换为 JSON</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">postData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/answer'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>answer<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//data 为 `response.json ()` 返回的 JSON</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"node标准库httphttps\"><a class=\"anchor\" href=\"#node标准库httphttps\">#</a> Node：标准库 HTTP/HTTPS</h3>\n<ul>\n<li>默认模块，无需安装其他依赖</li>\n<li>功能有限 / 不是十分友好</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>HTTP/HTTPS模块示例1 >folded</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> https <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>https<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://test.com?api_key=DEMO_KEY'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// A chunk of data has been received.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    resp<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        data <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// The whole response has been received. Print out the result.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    resp<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>explanation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"><span>HTTP/HTTPS模块示例2 >folded</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'http'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> https <span class=\"token keyword\">from</span> <span class=\"token string\">'https'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 判断 url 是否支持范围请求</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @param url </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">isSupportedRange</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token constant\">URL</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> url <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">const</span> options<span class=\"token operator\">:</span> http<span class=\"token punctuation\">.</span>RequestOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            method<span class=\"token operator\">:</span> <span class=\"token string\">'HEAD'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">'Range'</span><span class=\"token operator\">:</span> <span class=\"token string\">'bytes=0-'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">let</span> req<span class=\"token operator\">:</span> http<span class=\"token punctuation\">.</span>ClientRequest<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根据 URL 协议，判断使用 http 还是 https 模块发送请求</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> http<span class=\"token punctuation\">.</span>IncomingMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// console.log(response.statusCode);</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// console.log(response.headers);</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 假如在响应中存在 Accept-Ranges 首部（并且它的值不为 “none”），那么表示该服务器支持范围请求。</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">===</span> <span class=\"token number\">206</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"accept-ranges\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"accept-ranges\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>protocol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">'http:'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                req <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">'https:'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                req <span class=\"token operator\">=</span> https<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">void</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        req<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 请求失败</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        req<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// refresh request stream</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"axios\"><a class=\"anchor\" href=\"#axios\">#</a> Axios</h3>\n<ul>\n<li>支持浏览器 / Nodejs 环境</li>\n<li>丰富的拦截器</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>Axios示例 >folded</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.example.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 添加请求拦截器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 对请求错误做些什么</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'http://test.com'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    responseType<span class=\"token operator\">:</span> <span class=\"token string\">'stream'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ada_lovelace.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"用户体验优化\"><a class=\"anchor\" href=\"#用户体验优化\">#</a> 用户体验优化</h3>\n<h4 id=\"网络优化\"><a class=\"anchor\" href=\"#网络优化\">#</a> 网络优化</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96.png\" alt=\"网络优化\" title=\"网络优化\"></p>\n<h4 id=\"稳定性\"><a class=\"anchor\" href=\"#稳定性\">#</a> 稳定性</h4>\n<ul>\n<li>重试是保证稳定的有效手段、但要防止加剧恶劣情况</li>\n<li>缓存合理使用，作为最后一道防线</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/%E7%A8%B3%E5%AE%9A%E6%80%A7%E4%BC%98%E5%8C%96.png\" alt=\"稳定性优化\" title=\"稳定性优化\"></p>\n<h2 id=\"其他协议\"><a class=\"anchor\" href=\"#其他协议\">#</a> 其他协议</h2>\n<h3 id=\"websocket\"><a class=\"anchor\" href=\"#websocket\">#</a> WebSocket</h3>\n<ul>\n<li>浏览器与服务器进行双全工通讯</li>\n<li>适用于实时性要求高的场景，比如聊天室</li>\n<li>URL 使用 ws:// 或 wss:// 等开头</li>\n</ul>\n<h3 id=\"quic\"><a class=\"anchor\" href=\"#quic\">#</a> QUIC</h3>\n<ul>\n<li>QUIC(<em> <code>Quick UDP Internet Connection</code> </em>) - HTTP3 的草案之一</li>\n<li>0-RTT 建联</li>\n<li>类似 TCP 的可靠传输</li>\n<li>类似 TLS 的加密传输，支持完美前向安全</li>\n<li>用户空间的拥塞控制，最新的 BBR 算法</li>\n<li>支持 HTTP2 的基于流的多路复用，但没有 TCP 的 HOL 问题</li>\n<li>前向纠错 FEC</li>\n<li>类似 MPTCP 的 Connection migration</li>\n</ul>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V0aGNhbXAuYnl0ZWRhbmNlLmNvbS8=\">青训营</span>课程</li>\n<li>HTTP 权威指南</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "HTTP协议",
                "笔记补完计划"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/20/%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/20/%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0/",
            "title": "前端动画实现 - 笔记",
            "date_published": "2022-01-20T10:49:22.000Z",
            "content_html": "<blockquote>\n<p>动画的基本原理：什么是动画、动画的历史、计算机动画原理</p>\n<p>前端动画的分类：CSS 动画、SVG 动画、JS 动画、如何选择</p>\n<p>前端动画如何实现（主要是 JS）：JS 动画的函数封装、简单动画、复杂动画</p>\n<p>相关实践：动画资源、工作实践、动画的优化</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"前端动画实现-笔记\"><a class=\"anchor\" href=\"#前端动画实现-笔记\">#</a> 前端动画实现 - 笔记</h1>\n<h2 id=\"动画的基本原理\"><a class=\"anchor\" href=\"#动画的基本原理\">#</a> 动画的基本原理</h2>\n<h3 id=\"什么是动画\"><a class=\"anchor\" href=\"#什么是动画\">#</a> 什么是动画</h3>\n<blockquote>\n<p>动画是通过快速连续排列彼此差异极小的连续图像来制造运动错觉和变化错觉的过程。</p>\n</blockquote>\n<ul>\n<li><strong>快速</strong>、<strong>连续排列</strong>、<strong>彼此差异极小</strong>、<strong>制造错觉</strong></li>\n</ul>\n<h3 id=\"动画的历史\"><a class=\"anchor\" href=\"#动画的历史\">#</a> 动画的历史</h3>\n<p>如今前端动画技术已经普及</p>\n<ol>\n<li>\n<p>常见的前端动画技术<br>\n Sprite 动画、CSS 动画、JS 动画、SVG 动画和 WebGL 动画</p>\n</li>\n<li>\n<p>按应用分类<br>\n UI 动画、基于 Web 的游戏动画和动画数据可视化</p>\n</li>\n</ol>\n<p>最早的技术是 GIF，然后是 Flash，如今是 HTML/CSS/JS</p>\n<h3 id=\"计算机动画原理\"><a class=\"anchor\" href=\"#计算机动画原理\">#</a> 计算机动画原理</h3>\n<p>计算机图形学:</p>\n<p>计算机视觉的基础，涵盖点、线、面、体、场的数学构造方法。</p>\n<ol>\n<li>几何和图形数据的输入、存储和压缩。</li>\n<li>描述纹理、曲线、光影等算法。</li>\n<li>物体图形的数据输出 (图形接口、动画技术)，硬件和图形的交互技术。</li>\n<li>图形开发软件的相关技术标准。</li>\n</ol>\n<p>计算机动画:</p>\n<p>计算机图形学的分支，主要包含 2D、3D 动画。</p>\n<p>无论动画多么简单，始终需要定义两个基本状态，即<strong>开始状态和结束状态</strong>。没有它们，我们将无法定义插值状态，从而填补了两者之间的空白。</p>\n<p>帧：连续变换的多张画面，其中的每一幅画面都是一帧。</p>\n<p>帧率：用于度量一定时间段内的帧数，通常的测量单位是 FPS (frame per second) 。</p>\n<p>帧率与人眼：一般每秒<strong> 10-12 帧</strong>人会认为画面是连贯的，这个现象称为视觉暂留。对于一些电脑动画和游戏来说<strong>低于 30FPS 会感受到明显卡顿</strong>，目前主流的屏幕、显卡输出为 60FPS，效果会明显更流畅。</p>\n<p>空白的补全方式有以下两种</p>\n<p>补间动画:<br>\n 传统动画，主画师绘制关键帧，交给清稿部门，清稿部门的补间动画师补充关键帧进行交付。(类比到这里，补间动画师由浏览器来担任，如 <code>keyframe</code> ， <code>transition</code> )</p>\n<p>逐帧动画 (Frame By Frame) :<br>\n 从词语来说意味着全片每一帧逐帧都是纯手绘。(如 CSS 的 <code>steps</code>  实现精灵动画)</p>\n<h2 id=\"前端动画分类\"><a class=\"anchor\" href=\"#前端动画分类\">#</a> 前端动画分类</h2>\n<h3 id=\"css动画\"><a class=\"anchor\" href=\"#css动画\">#</a> CSS 动画</h3>\n<p>CSS <a href=\"\">animation</a> 是常见的 CSS 动画实现方式：</p>\n<p>CSS  <code>animation</code>  属性是 <code>animation-name</code> ， <code>animation-</code> <br>\n <code>duration</code> ， <code>animation-timing-function</code> ， <code>animation-delay</code> ， <code>animation-iteration-count</code> ， <code>animation-direction</code> ， <code>animation-fill-mode</code>  和 <code>animation-play-state</code>  属性的一个简写属性形式。</p>\n<p>CSS 补间动画使用 <code>Transition API</code>  和 <code>Keyframe</code>  实现</p>\n<p>CSS 逐帧动画使用 <code>Animation API</code>  中的 <code>steps</code>  实现</p>\n<p><strong>优点</strong>：简单、高效声明式的不依赖于主线程，采用硬件加速 (GPU) 简单的控制 keyframe animation 播放和暂停。</p>\n<p><strong>缺点</strong>：不能动态修改或定义动画内容不同的动画无法实现同步多个动画彼此无法堆叠。</p>\n<p><strong>适用场景</strong>：简单的 h5 活动 / 宣传页。</p>\n<p><strong>推荐库</strong>：animation.css、shake.css 等。</p>\n<h3 id=\"svg动画\"><a class=\"anchor\" href=\"#svg动画\">#</a> SVG 动画</h3>\n<p>svg 是基于 XML 的矢量图形描述语言，它可以与 CSS 和 S 较好的配合，实现 svg 动画通常有三种方式：SMIL、JS、CSS</p>\n<p>我们经常使用 animation, transform, transition 来实现 svg 动画，它比 JS 更加简单方便。</p>\n<p><strong>优点</strong>：通过矢量元素实现动画，不同的屏幕下均可获得较好的清晰度。可以实现一些特殊的效果，如：描字，形变，墨水扩散等。</p>\n<p><strong>缺点</strong>：使用方式较为复杂，过多使用可能会带来性能问题。</p>\n<h4 id=\"smil\"><a class=\"anchor\" href=\"#smil\">#</a> SMIL</h4>\n<p>SMIL： Synchronized Multimedia Integration Language (同步多媒体集成语言)</p>\n<p>可以使用 svg 标签进行动画的描述，但是兼容性不是很理想</p>\n<h4 id=\"js-css\"><a class=\"anchor\" href=\"#js-css\">#</a> JS、CSS</h4>\n<p>使用 JS 来操作 SVG 动画自不必多说，目前也有很多现成的类库。例如老牌的 Snap.svg 以及 anime.js ，都能让我们快速制作 SVG 动画。当然，除了这些类库，HTML 本身也有原生的 Web Animation 实现。使用 Web Animation 也能让我们方便快捷地制作动画。</p>\n<p>文字形变（基于 CSS 中的 filter 属性）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL2ppYW5neGlhbmcvcGVuL01XbWRqZVk=\">https://codepen.io/jiangxiang/pen/MWmdjeY</span></p>\n<p>Path 实现写字动画：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL2ppYW5neGlhbmcvcGVuL3JObWdqcVg=\">https://codepen.io/jiangxiang/pen/rNmgjqX</span></p>\n<h4 id=\"js笔画的原理\"><a class=\"anchor\" href=\"#js笔画的原理\">#</a> JS 笔画的原理</h4>\n<p>stroke-dashoffset、stroke-dasharray 配合使用实现笔画效果。</p>\n<p>属性 stroke-dasharray 可控制用来描边的点划线的图案范式。</p>\n<p>它是一个数列，数与数之间用逗号或者空白隔开，指定短划线和缺口的长度。如果提供了奇数个值，则这个值的数列重复一次，从而变成偶数个值。因此，5,3,2 等同于 5,3,2,5,3,2。</p>\n<p>stroke-dashoffset 属性指定了 dash 模式到路径开始的距离。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL2ppYW5neGlhbmcvcGVuL0xZenZ2eGQ=\">https://codepen.io/jiangxiang/pen/LYzvvxd</span></p>\n<p>path 路径–d 属性 (路径描述)  <code>&lt;path d=&quot;....&quot; /&gt;</code></p>\n<p>* 大写字母跟随的是绝对坐标 x,y，小写为相对坐标 dx,dy</p>\n<ul>\n<li>\n<p>M/m 绘制起始点。</p>\n</li>\n<li>\n<p>L/I 绘制一条线段。</p>\n</li>\n<li>\n<p>C/c 为绘制贝塞尔曲线。</p>\n</li>\n<li>\n<p>Z/z 将当前点与起始点用直线连接。</p>\n</li>\n</ul>\n<p>计算 path 的长度： <code>path.getTotalLength();</code></p>\n<p>计算 path 上某个点的坐标： <code>path.getPointAtLength(lengthNumber);</code></p>\n<p>例子:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL2ppYW5neGlhbmcvcGVuL2VZV2FneHE=\">https://codepen.io/jiangxiang/pen/eYWagxq</span></p>\n<h3 id=\"js动画\"><a class=\"anchor\" href=\"#js动画\">#</a> JS 动画</h3>\n<p>JS 可以实现复杂的动画，也可以操作 canvas 动画 API 上进行绘制。</p>\n<h3 id=\"如何做选择\"><a class=\"anchor\" href=\"#如何做选择\">#</a> 如何做选择</h3>\n<p>CSS 优点:</p>\n<ul>\n<li>\n<p>浏览器会对 CSS3 动画做一些优化，使得 CSS3 动画性能上稍有优势（新建一个图层来跑动画）。</p>\n</li>\n<li>\n<p>CSS3 动画的代码相对简单。</p>\n</li>\n</ul>\n<p>CSS 缺点:</p>\n<ul>\n<li>动画控制上不够灵活。</li>\n<li>兼容性不佳。</li>\n<li>部分动画无法实现（视差效果、滚动动画）。</li>\n</ul>\n<p>JS 优点:</p>\n<ul>\n<li>\n<p>使用灵活，同样在定义一个动画的 keyframe 序列时，可以根据不同的条件调节若干参数（JS 动画函数）改变动画方式。（CSS 会有非常多的代码冗余）</p>\n</li>\n<li>\n<p>对比与 CSS 的 keyframe 粒度更粗，css 本身的时间函数是有限的，这块 JS 都可做弥补。</p>\n</li>\n<li>\n<p>CSS 很难做到两个以上的状态转化（要么使用关键帧，要么需要多个动画延时触发，再想到要对动画循环播放或暂停倒序等，复杂度极高）。</p>\n</li>\n</ul>\n<p>JS 缺点:</p>\n<ul>\n<li>使用到 JS 运行时，调优方面不如 CSS 简单，CSS 调优方式固定。</li>\n<li>对于性能和兼容性较差的浏览器，CSS 可以做到优雅降级，而 JS 需要额外代码兼容。</li>\n</ul>\n<p>结论：</p>\n<ul>\n<li>当 UI 元素采用较小的独立状态时，使用 CSS。</li>\n<li>在需要对动画进行大量控制时，使用 JavaScript。</li>\n<li>在特定的场景下可以使用 SVG，可以使用 CSS 或 JS 去操作 SVG 变化。</li>\n</ul>\n<h2 id=\"前端动画实现\"><a class=\"anchor\" href=\"#前端动画实现\">#</a> 前端动画实现</h2>\n<h3 id=\"js动画函数封装\"><a class=\"anchor\" href=\"#js动画函数封装\">#</a> JS 动画函数封装</h3>\n<p>先来一个基础的 <code>animate</code>  函数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 入参说明：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * draw 动画绘制函数（例如：() => &#123; ctx.draw ()... &#125;）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * easing 缓动函数（数学）（例如：(x) => y）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * duration 动画持续时间（例如：2000）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @returns 一个可以表示动画是否完成的 Promise 对象，同时，由于动画可以是连续的，所以 Promise.then 就能让动画按顺序被调用</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">animate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>easing<span class=\"token punctuation\">,</span> draw<span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 动画开始的时间戳</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// Q：为什么使用 performance.now () 而非 Date.now ()？</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// A：因为 performance.now () 会以恒定速度自增，精确到微秒级别，不易被篡改。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// (time - start) 算出距离动画开始，时间已经过去了多少，然后根据过去了多少时间 ÷ 规定的动画持续时间，算出目前动画进度（百分比）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 注意：这是不算上缓动函数修正的百分比（原始百分比）</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 例如：动画开始时间为 start = 1666，现在的时间为 time = 2666，想让动画持续的时间为 duration = 2000，那么 timeFraction 就是 0.5，即 50%</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">let</span> timeFraction <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>time <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> duration<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 如果 timeFraction > 1，即原始百分比已经大于 100%，即动画照理来说应该是已经结束了的，那么就将原始百分比设为 100%，即 timeFraction = 1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeFraction <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> timeFraction <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">//progress 是动画的实际进程（通过缓动函数计算后的真实百分比），这个值应该也是要小于 100% 的，你可以把 easing 函数理解为一个纯数学函数，接受 [0, 1]-> 输出 [0, 1]，建立真实时间到动画百分比的映射关系</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">let</span> progress <span class=\"token operator\">=</span> <span class=\"token function\">easing</span><span class=\"token punctuation\">(</span>timeFraction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 给 draw 函数传入 progress（动画目前应该到达的进度），那么 draw 函数就可以根据这个进度指示，来绘制相应的图像（可以类比 CSS animation 中的 keyframe 百分比）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>progress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 如上所述，当 timeFrction（原始百分比）&lt; 1 时，说明动画还为完成，则继续调用 rAF，否则说明动画已结束，将此 Promise 解决 (resolve) 掉</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeFraction <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>animate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意： <code>easing</code>  函数也<strong>不一定只能</strong>返回 [0, 1] 的数值，根据实际使用情况可以与 <code>draw</code>  函数协调</p>\n<h4 id=\"js执行动画的核心思想\"><a class=\"anchor\" href=\"#js执行动画的核心思想\">#</a> JS 执行动画的核心思想</h4>\n<p>基本公式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">△</mi><mi>r</mi><mo>=</mo><mi mathvariant=\"normal\">△</mi><mi>v</mi><mi mathvariant=\"normal\">△</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\triangle r = \\triangle v \\triangle t\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">△</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">△</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord\">△</span><span class=\"mord mathnormal\">t</span></span></span></span></span></p>\n<p>简单理解：r 是距离，v 是速度，t 是时间</p>\n<p>比例尺 / 距离系数：通过比例尺将实际的大小、长度等比例缩放 / 增加到屏幕上显示的大小、长度</p>\n<h3 id=\"简单动画\"><a class=\"anchor\" href=\"#简单动画\">#</a> 简单动画</h3>\n<h4 id=\"匀速运动\"><a class=\"anchor\" href=\"#匀速运动\">#</a> 匀速运动</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> ball <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'.ball'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">draw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progress</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>progress <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px, 0)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 这里的 * 100 实际上就是一个比例尺，将 [0, 1] 映射到 [0, 100] px</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 沿着 x 轴匀速运动</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    duration<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">easing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">timeFraction</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 这就是一个匀速运动函数，相当于 (x) => x</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> timeFraction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    draw</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"重力效果\"><a class=\"anchor\" href=\"#重力效果\">#</a> 重力效果</h4>\n<p>从这个动画开始，就需要考虑数学公式了，即：怎么把 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>=</mo><mi>g</mi><mo separator=\"true\">⋅</mo><mi>t</mi><mtext>，即</mtext><mi>x</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>g</mi><msup><mi>t</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">v = g·t，即x = \\frac{1}{2} gt^{2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">即</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> 套用到 <code>animate</code>  这个模板里面</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">draw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progress</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(0, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span>progress <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">500</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 这里的 500 就是比例尺</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 沿着 x 轴匀速运动</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    duration<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">easing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">timeFraction</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 这个函数通过 t^2，模拟了重力的最显著特点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> timeFraction <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 也可以模拟的真实一点：0.5 * 9.8 * (timeFraction ** 2)，当然，这样的话 draw 函数内部就也要做相应的调整了</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    draw</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"摩擦力匀速减速运动\"><a class=\"anchor\" href=\"#摩擦力匀速减速运动\">#</a> 摩擦力（匀速减速运动）</h4>\n<p>同样的，根据摩擦力数学公式写出缓动函数：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>v</mi><mo>=</mo><msub><mi>v</mi><mn>0</mn></msub><mo>−</mo><mi>a</mi><mo separator=\"true\">⋅</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">v = v_{0} - a·t\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mo>∫</mo><mi>v</mi><mo separator=\"true\">⋅</mo><mi>d</mi><mi>t</mi><mo>=</mo><msub><mi>v</mi><mn>0</mn></msub><mi>t</mi><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>a</mi><msup><mi>t</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">x = \\int v·dt = v_{0}t - \\frac{1}{2}at^{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.22225em;vertical-align:-0.86225em;\"></span><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">∫</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始高度 500px</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">draw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progress</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> progress<span class=\"token punctuation\">.</span>x<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px),</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>progress<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 匀减速运动</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    duration<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">easing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// v0 = 2，a = 2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    draw</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"平抛运动x轴匀速y轴加速\"><a class=\"anchor\" href=\"#平抛运动x轴匀速y轴加速\">#</a> 平抛运动（x 轴匀速，y 轴加速）</h4>\n<p>平抛运动实际上就是<a href=\"#%E5%8C%80%E9%80%9F%E8%BF%90%E5%8A%A8\">匀速运动</a>与<a href=\"#%E9%87%8D%E5%8A%9B%E6%95%88%E6%9E%9C\">重力效果</a>的结合</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">draw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progress</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> progress<span class=\"token punctuation\">.</span>x<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px), </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>progress <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 有两个方向，沿着 x 轴匀速运动，沿着 y 轴加速运动</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    duration<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">easing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            x<span class=\"token operator\">:</span> t<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            y<span class=\"token operator\">:</span> t <span class=\"token operator\">**</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    draw</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"旋转-平抛\"><a class=\"anchor\" href=\"#旋转-平抛\">#</a> 旋转 + 平抛</h4>\n<p>其实就是在<a href=\"#%E5%B9%B3%E6%8A%9B%E8%BF%90%E5%8A%A8%EF%BC%88x%E8%BD%B4%E5%8C%80%E9%80%9F%EF%BC%8Cy%E8%BD%B4%E5%8A%A0%E9%80%9F%EF%BC%89\">平抛</a>的基础上加一个旋转效果而已</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">draw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progress</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(o,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>progress <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px rotate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">2000</span> <span class=\"token operator\">*</span> progress<span class=\"token punctuation\">.</span>rorate<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">deg))</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 有两个方向，沿着 x 轴匀速运动，沿着 y 轴加速运动</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    duration<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">easing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            x<span class=\"token operator\">:</span> t<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            y<span class=\"token operator\">:</span> t <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            rotate<span class=\"token operator\">:</span> t <span class=\"token comment\">// 匀速旋转</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    draw</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"拉弓效果\"><a class=\"anchor\" href=\"#拉弓效果\">#</a> 拉弓效果</h4>\n<p>拉弓效果的本质就是：x 轴匀速运动；y 轴为初始速度为负的匀加速</p>\n<p>知道这两点后，就不难通过数学表达式写出缓动函数</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>v</mi><mo>=</mo><mo>−</mo><msub><mi>v</mi><mn>0</mn></msub><mo>+</mo><mi>a</mi><mo separator=\"true\">⋅</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">v = - v_{0} + a·t\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mo>∫</mo><mi>v</mi><mo separator=\"true\">⋅</mo><mi>d</mi><mi>t</mi><mo>=</mo><mo>−</mo><msub><mi>v</mi><mn>0</mn></msub><mi>t</mi><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>a</mi><msup><mi>t</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">x = \\int v·dt = - v_{0}t + \\frac{1}{2}at^{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.22225em;vertical-align:-0.86225em;\"></span><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">∫</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76508em;vertical-align:-0.15em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">draw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progress</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> progress<span class=\"token punctuation\">.</span>x<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px), </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>progress <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 有两个方向，沿着 x 轴匀速运动，沿着 y 轴加速运动</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    duration<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">easing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            x<span class=\"token operator\">:</span> t<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// v0 = 2，a = 2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    draw</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"贝塞尔曲线\"><a class=\"anchor\" href=\"#贝塞尔曲线\">#</a> 贝塞尔曲线</h4>\n<p>贝塞尔曲线的详细描述和公式见<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUIyJTlEJUU1JUExJTlFJUU3JTg4JUJFJUU2JTlCJUIyJUU3JUI3JTlB\"> Wikipedia</span>，这里给出三次贝塞尔曲线的数学表达式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>B</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mtext>−</mtext><mi>t</mi><msup><mo stretchy=\"false\">)</mo><mn>3</mn></msup><msub><mi>P</mi><mn>0</mn></msub><mo>+</mo><mn>3</mn><mi>t</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mtext>−</mtext><mi>t</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><msub><mi>P</mi><mn>1</mn></msub><mo>+</mo><mn>3</mn><msup><mi>t</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mn>1</mn><mtext>−</mtext><mi>t</mi><mo stretchy=\"false\">)</mo><msub><mi>P</mi><mn>2</mn></msub><mo>+</mo><msup><mi>t</mi><mn>3</mn></msup><msub><mi>P</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><mi>t</mi><mo>∈</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">B(t)=(1−t)^{3}P_{0}+3t(1−t) ^2P_{1}+3t^2(1−t)P _{2}+t^3P_{3}, t∈[0,1]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0585479999999998em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></span></p>\n<p>由于 P<sub>0</sub>和 P<sub>3</sub>的位置是确定的（(0,0) 和 (1,1)），所以实际上只需要给出 P<sub>1</sub>和 P<sub>2</sub>的坐标即可：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bezierPath</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x1 <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x2 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">**</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y1 <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y2 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">**</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"复杂动画\"><a class=\"anchor\" href=\"#复杂动画\">#</a> 复杂动画</h3>\n<h4 id=\"弹跳小球\"><a class=\"anchor\" href=\"#弹跳小球\">#</a> 弹跳小球</h4>\n<p>实质上就是到达终点后的反弹和衰减，是<a href=\"#%E9%87%8D%E5%8A%9B%E6%95%88%E6%9E%9C\">重力效果</a>的延伸</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">autoDamping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> damping <span class=\"token operator\">=</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 衰减系数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        duration <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        height <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 当衰减到一定边界值时停止动画</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">down</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progress</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        \tball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(0, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>height <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>progress <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">await</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        \tduration<span class=\"token operator\">:</span> duration<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        \t<span class=\"token function\">easing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          \t\t<span class=\"token keyword\">return</span> t <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        \tdraw<span class=\"token operator\">:</span> down<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        height <span class=\"token operator\">*=</span> damping <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ** 2 可以使动画效果更加柔和</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      \tduration <span class=\"token operator\">*=</span> damping<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">up</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progress</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        \tball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(0, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token operator\">-</span>height <span class=\"token operator\">*</span> progress<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">await</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        \tduration<span class=\"token operator\">:</span> duration<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        \t<span class=\"token function\">easing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          \t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        \tdraw<span class=\"token operator\">:</span> down<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"椭圆运动\"><a class=\"anchor\" href=\"#椭圆运动\">#</a> 椭圆运动</h4>\n<p>也是套用公式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><msup><mi>x</mi><mn>2</mn></msup><msup><mi>a</mi><mn>2</mn></msup></mfrac><mo>+</mo><mfrac><msup><mi>y</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mfrac><mo>=</mo><mn>1</mn><mtext>，</mtext><mi>x</mi><mo>=</mo><mi>a</mi><mo separator=\"true\">⋅</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mtext>，</mtext><mi>y</mi><mo>=</mo><mi>b</mi><mo separator=\"true\">⋅</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{x^2}{a^2}+\\frac{y^2}{b^2}=1，x=a·cos(a)，y=b·sin(a)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">⋅</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">draw</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progress</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">150</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> progress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> progress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ball<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>x<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>y<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tduration<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">easing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  \t\t<span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> t <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  \tdraw<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"相关实践\"><a class=\"anchor\" href=\"#相关实践\">#</a> 相关实践</h2>\n<h3 id=\"动画资源\"><a class=\"anchor\" href=\"#动画资源\">#</a> 动画资源</h3>\n<p><strong>动画代码示例</strong>：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NvZGVwZW4uY29t\">codepen.com</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2NvZGVzYW5kYm94LmNvbQ==\">codesandbox.com</span></li>\n</ul>\n<p><strong>设计网站</strong>：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RyaWJiYmxlLmNvbQ==\">dribbble.com</span></li>\n</ul>\n<p><strong>动画制作工具</strong>（一般都是 UE、UI 同学使用)：</p>\n<ul>\n<li>2D：Animate CC、After Effects</li>\n<li>3D：Cinema 4D、Blender、Autodesk Maya</li>\n</ul>\n<p><strong>svg</strong> :</p>\n<ul>\n<li>\n<p>Snap.svg - 现代 SVG 图形的 JavaScript 库。</p>\n</li>\n<li>\n<p>Svg.js - 用于操作和动画 SVG 的轻量级库。</p>\n</li>\n</ul>\n<p><strong>js</strong> :</p>\n<ul>\n<li>GSAP - JavaScript 动画库。</li>\n<li>TweenJs  - 一个简单但功能强大的 JavaScript 补间 / 动画库。CreateJS 库套件的一部分。</li>\n<li>Velocity - 加速的 JavaScript 动画。</li>\n</ul>\n<p><strong>css</strong> :</p>\n<ul>\n<li>Animate.css - CSS 动画的跨浏览器库。像一件简单的事情一样容易使用。</li>\n</ul>\n<p><strong>canvas</strong> :</p>\n<ul>\n<li>EaselJs - EaselJS 是一个用于在 HTML5 中构建高性能交互式 2D 内容的库</li>\n<li>Fabric.js - 支持动画的 JavaScript 画布库。</li>\n<li>Paper.js - 矢量图形脚本的瑞士军刀 - Scriptographer 使用 HTML5Canvas 移植到 JavaScript 和浏览器。</li>\n<li>Pixijs - 使用最快、最灵活的 2D WebGL 渲染器创建精美的数字内容。</li>\n</ul>\n<h3 id=\"工作实践\"><a class=\"anchor\" href=\"#工作实践\">#</a> 工作实践</h3>\n<pre class=\"mermaid graph\"><svg id=\"mermaid-1649663860079\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"55\" style=\"max-width: 363.296875px;\" viewBox=\"0 0 363.296875 55\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath LS-动画帧 LE-代码&amp;设计文件\" id=\"L-动画帧-代码&amp;设计文件\" style=\"opacity: 1;\"><path class=\"path\" d=\"M76,27.5L101,27.5L126,27.5\" marker-end=\"url(#arrowhead12)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead12\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-代码&amp;设计文件 LE-代码\" id=\"L-代码&amp;设计文件-代码\" style=\"opacity: 1;\"><path class=\"path\" d=\"M253.296875,27.5L278.296875,27.5L303.296875,27.5\" marker-end=\"url(#arrowhead13)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead13\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"flowchart-动画帧-3\" transform=\"translate(42,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-34\" y=\"-19.5\" width=\"68\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-24,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">动画帧</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-代码&amp;设计文件-4\" transform=\"translate(189.6484375,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-63.6484375\" y=\"-19.5\" width=\"127.296875\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-53.6484375,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">代码&amp;设计文件</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-代码-5\" transform=\"translate(329.296875,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">代码</tspan></text></g></g></g></g></g></g></svg></pre><ul>\n<li>\n<p>需要完全前端自己开发</p>\n<p>使用已经封装好的动画库，从开发成本和体验角度出发进行取舍。</p>\n</li>\n<li>\n<p>设计不是很有空</p>\n<p>清晰度，图片格式可以指定，动画尽量给出示意或者相似案例参考。索要精灵资源、资源等需要帮忙压缩。</p>\n</li>\n<li>\n<p>设计资源充足</p>\n<p>要求设计导出 lottie 格式文件。</p>\n<p>（Lottie 是可应用于 Android, iOS, Web 和 Windows 的库，通过 Bodymovin 解析 AE 动画，并导出可在移动端和 web 端渲染动画的 json 文件）</p>\n</li>\n</ul>\n<h3 id=\"动画的优化\"><a class=\"anchor\" href=\"#动画的优化\">#</a> 动画的优化</h3>\n<h4 id=\"用户体验\"><a class=\"anchor\" href=\"#用户体验\">#</a> 用户体验</h4>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc21hc2hpbmdtYWdhemluZS5jb20vMjAxMS8wOS90aGUtZ3VpZGUtdG8tY3NzLWFuaW1hdGlvbi1wcmluY2lwbGVzLWFuZC1leGFtcGxlcy8=\">《The Guide To CSS Animation: Principles and Examples》</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JThCJTk1JUU3JTk1JUFCJUU3JTlBJTg0MTIlRTklQTAlODUlRTUlOUYlQkElRTYlOUMlQUMlRTYlQjMlOTUlRTUlODklODc=\">动画的 12 项基本法则 - Wikipedia</span></p>\n</li>\n</ul>\n<h4 id=\"性能\"><a class=\"anchor\" href=\"#性能\">#</a> 性能</h4>\n<p>在实际的应用里，最为简单的一个注意点就是，触发动画的开始不要用 <code>display: none</code>  属性值，因为它会引起<em> Layout</em>、<em>Paint</em> 环节，通过切换类名就已经是一种很好的办法。</p>\n<p><code>translate</code>  属性值来替换 <code>top/left/right/bottom</code>  的切换， <code>scale</code>  属性值替换 <code>width/height</code> ， <code>opacity</code>  属性替换 <code>display/visibility</code>  等等。</p>\n<p>CSS3 硬件加速又叫做 GPU 加速，是利用 GPU 进行渲染，减少 CPU 操作的一种优化方案。由于 GPU 中的 transform 等 CSS 属性不会触发 repaint，所以能大大提高网页的性能。</p>\n<p>CSS 中的以下几个属性能触发硬件加速∶</p>\n<ol>\n<li>\n<p>transform</p>\n</li>\n<li>\n<p>opacity</p>\n</li>\n<li>\n<p>filter</p>\n</li>\n<li>\n<p>Will-change</p>\n</li>\n</ol>\n<p>如果有一些元素不需要用到上述属性，但是需要触发硬件加速效果，可以使用一些小技巧来诱导浏览器开启硬件加速。</p>\n<h4 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h4>\n<p>算法优化：</p>\n<ul>\n<li>线性函数代替真实计算</li>\n<li>几何模型优化</li>\n<li>碰撞检测优化</li>\n</ul>\n<p>内存 / 缓存优化</p>\n<p>离屏绘制</p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V0aGNhbXAuYnl0ZWRhbmNlLmNvbS8=\">青训营</span>课程</li>\n<li>Wikipedia</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/20/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%8EReact-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/20/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%8EReact-%E7%AC%94%E8%AE%B0/",
            "title": "响应式系统与React - 笔记",
            "date_published": "2022-01-20T10:39:47.000Z",
            "content_html": "<blockquote>\n<p>React 的历史与应用</p>\n<p>React 的设计思路：UI 编程痛点、响应式与转换式、组件化、生命周期</p>\n<p>React（hooks）的写法：useState、useEffect</p>\n<p>React 的实现：JSX 语法、Virtual DOM、Diff 算法</p>\n<p>React 状态管理库 &amp; 应用级框架介绍</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"响应式系统与react\"><a class=\"anchor\" href=\"#响应式系统与react\">#</a> 响应式系统与 React</h1>\n<h2 id=\"react的历史与应用\"><a class=\"anchor\" href=\"#react的历史与应用\">#</a> React 的历史与应用</h2>\n<h3 id=\"历史\"><a class=\"anchor\" href=\"#历史\">#</a> 历史</h3>\n<p>2010 年：Facebook 在其 ph 生态中，引入了 xhp 框架，首次引入了组合式组件的思想，启发了后来的 React 的设计。</p>\n<p>2011 年：Jordan Walke 创造了 FaxJS，也就是后来的 React 原型:</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220119101018197.png\" alt=\"image-20220119101018197\"></p>\n<p>2012 年：在 Facebook 收购 Instagram 后，该 FaxJS 项目在内部得到使用，Jordan Walke 基于 FaxJS 的经验创造了 React</p>\n<p>2013 年：React 正式开源，在 2013 JSConf 上 Jordan Walke 介绍了这款全新的框架</p>\n<p>2014 年：生态大爆发，各种围绕 React 的新工具 / 新框架开始涌现：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220119101527508.png\" alt=\"image-20220119101527508\"></p>\n<h3 id=\"应用\"><a class=\"anchor\" href=\"#应用\">#</a> 应用</h3>\n<ol>\n<li>前端应用开发：Facebook、Instagram、Netflix 网页版</li>\n<li>移动原生应用开发：Instagram、Discord、Oculus</li>\n<li>桌面应用开发：结合 Electron</li>\n<li>3D 开发：<em>react-thre-fiber</em></li>\n</ol>\n<h2 id=\"react的设计思路\"><a class=\"anchor\" href=\"#react的设计思路\">#</a> React 的设计思路</h2>\n<h3 id=\"ui编程痛点\"><a class=\"anchor\" href=\"#ui编程痛点\">#</a> UI 编程痛点</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220119101812462.png\" alt=\"image-20220119101812462\"></p>\n<ol>\n<li>状态更新时，UI 不会自动更新，需要手动调用 DOM 进行更新</li>\n<li>欠缺基本的代码层面的封装和隔离，代码层面没有组件化</li>\n<li>UI 之间的数据依赖关系，需要手动维护，如果依赖链路长，则会导致<strong> Callback Hell</strong></li>\n</ol>\n<h3 id=\"响应式与转换式\"><a class=\"anchor\" href=\"#响应式与转换式\">#</a> 响应式与转换式</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>特点</th>\n<th>应用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>转换式系统</strong></td>\n<td>给定输入求解输出</td>\n<td>编译器、数值计算</td>\n</tr>\n<tr>\n<td><strong>响应式系统</strong></td>\n<td>监听事件，消息驱动</td>\n<td>监控系统、UI 界面</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"响应式编程\"><a class=\"anchor\" href=\"#响应式编程\">#</a> 响应式编程</h3>\n<p>响应式系统：</p>\n<pre class=\"mermaid graph\"><svg id=\"mermaid-1649663857437\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"55\" style=\"max-width: 384px;\" viewBox=\"0 0 384 55\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath LS-事件 LE-执行既定的回调\" id=\"L-事件-执行既定的回调\" style=\"opacity: 1;\"><path class=\"path\" d=\"M60,27.5L85,27.5L110,27.5\" marker-end=\"url(#arrowhead12)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead12\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-执行既定的回调 LE-状态变更\" id=\"L-执行既定的回调-状态变更\" style=\"opacity: 1;\"><path class=\"path\" d=\"M242,27.5L267,27.5L292,27.5\" marker-end=\"url(#arrowhead13)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead13\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"flowchart-事件-3\" transform=\"translate(34,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">事件</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-执行既定的回调-4\" transform=\"translate(176,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-66\" y=\"-19.5\" width=\"132\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-56,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">执行既定的回调</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-状态变更-5\" transform=\"translate(334,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-42\" y=\"-19.5\" width=\"84\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">状态变更</tspan></text></g></g></g></g></g></g></svg></pre><p>前端响应式 UI：</p>\n<pre class=\"mermaid graph\"><svg id=\"mermaid-1649663858744\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"55\" style=\"max-width: 500.828125px;\" viewBox=\"0 0 500.828125 55\"><g><g class=\"output\"><g class=\"clusters\"></g><g class=\"edgePaths\"><g class=\"edgePath LS-事件 LE-执行既定的回调\" id=\"L-事件-执行既定的回调\" style=\"opacity: 1;\"><path class=\"path\" d=\"M60,27.5L85,27.5L110,27.5\" marker-end=\"url(#arrowhead17)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead17\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-执行既定的回调 LE-状态变更\" id=\"L-执行既定的回调-状态变更\" style=\"opacity: 1;\"><path class=\"path\" d=\"M242,27.5L267,27.5L292,27.5\" marker-end=\"url(#arrowhead18)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead18\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g><g class=\"edgePath LS-状态变更 LE-UI更新\" id=\"L-状态变更-UI更新\" style=\"opacity: 1;\"><path class=\"path\" d=\"M376,27.5L401,27.5L426,27.5\" marker-end=\"url(#arrowhead19)\" style=\"fill:none\"></path><defs><marker id=\"arrowhead19\" viewBox=\"0 0 10 10\" refX=\"9\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"8\" markerHeight=\"6\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowheadPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker></defs></g></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g><g class=\"edgeLabel\" transform=\"\" style=\"opacity: 1;\"><g transform=\"translate(0,0)\" class=\"label\"><rect rx=\"0\" ry=\"0\" width=\"0\" height=\"0\"></rect><text><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\"></tspan></text></g></g></g><g class=\"nodes\"><g class=\"node default\" id=\"flowchart-事件-4\" transform=\"translate(34,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-26\" y=\"-19.5\" width=\"52\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-16,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">事件</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-执行既定的回调-5\" transform=\"translate(176,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-66\" y=\"-19.5\" width=\"132\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-56,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">执行既定的回调</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-状态变更-6\" transform=\"translate(334,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-42\" y=\"-19.5\" width=\"84\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-32,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">状态变更</tspan></text></g></g></g><g class=\"node default\" id=\"flowchart-UI更新-7\" transform=\"translate(459.4140625,27.5)\" style=\"opacity: 1;\"><rect rx=\"0\" ry=\"0\" x=\"-33.4140625\" y=\"-19.5\" width=\"66.828125\" height=\"39\" class=\"label-container\"></rect><g class=\"label\" transform=\"translate(0,0)\"><g transform=\"translate(-23.4140625,-9.5)\"><text style=\"\"><tspan xml:space=\"preserve\" dy=\"1em\" x=\"1\">UI更新</tspan></text></g></g></g></g></g></g></svg></pre><ol>\n<li>状态更新，UI<strong> 自动更新</strong>。</li>\n<li>前端代码<strong>组件化</strong>，可复用，可封装。</li>\n<li>状态之间的互相依赖关系，只需<strong>声明</strong>即可。</li>\n</ol>\n<h3 id=\"组件化\"><a class=\"anchor\" href=\"#组件化\">#</a> 组件化</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220119102805079.png\" alt=\"image-20220119102805079\"></p>\n<ol>\n<li>组件要么是<strong>组件的组合</strong>，要么是<strong>原子组件</strong></li>\n<li>组件拥有<strong>内部状态</strong>，外部不可见</li>\n<li>父组件可将<strong>状态传入子组件</strong></li>\n</ol>\n<h3 id=\"状态归属\"><a class=\"anchor\" href=\"#状态归属\">#</a> 状态归属</h3>\n<p>当两个组件都要使用同一个状态时，应该把状态上移到其公共父组件，即<strong>状态提升</strong></p>\n<p>但是如果这种状态提升过多，组件的复用性难免会降低，这个问题的解决则需要使用 Redux 这种状态管理框架</p>\n<p>React 其实是单向数据流，永远是父组件给子组件传递状态，子组件只能调用函数更改状态</p>\n<h3 id=\"组件设计\"><a class=\"anchor\" href=\"#组件设计\">#</a> 组件设计</h3>\n<p>前提：</p>\n<ol>\n<li>组件声明了状态和 UI 的映射</li>\n<li>组件有 Props/State 两种状态</li>\n<li>“组件” 可由其他组件拼装而成</li>\n</ol>\n<p>设计：</p>\n<ol>\n<li>组件内部拥有私有状态 State</li>\n<li>组件接受外部的 Props 状态提供复用性</li>\n<li>根据当前的 State/Props，返回一个 UI</li>\n</ol>\n<p>想象一下，大概长这样（不一定对）：</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//props 是父组件传入的状态</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> url <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 这是组件的内部状态（State）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">'Click me'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 返回一个 “UI”</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SubComponent</span></span> <span class=\"token attr-name\">props</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>&lt;!--swig￼0--</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">SubComponent</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>url<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>img</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 生命周期</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/16775500-102dbe772034e8fa.png\" alt=\"16775500-102dbe772034e8fa\"></p>\n<h2 id=\"reacthooks的写法\"><a class=\"anchor\" href=\"#reacthooks的写法\">#</a> React（hooks）的写法</h2>\n<h4 id=\"usestate\"><a class=\"anchor\" href=\"#usestate\">#</a> useState</h4>\n<p>传入一个初始值，返回一个状态，和 set 该状态的函数，用户可以通过调用该函数，来实现状态的修改。</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 声明一个新的叫做 “count” 的 state 变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        Click me</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"useeffect\"><a class=\"anchor\" href=\"#useeffect\">#</a> useEffect</h4>\n<p>传入一个函数，和一个数组，数组是状态的数组，称作依赖项，该函数在 mount 时，和依赖项被 set 的时候会执行。</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 使用一个副作用，传入的 [count] 数组使得此副作用只有当 count 变量改变时才会被调用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 副作用：Update the document title using the browser API</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>count<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">&#123;</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        Click me</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"react的实现\"><a class=\"anchor\" href=\"#react的实现\">#</a> React 的实现</h2>\n<h3 id=\"problems\"><a class=\"anchor\" href=\"#problems\">#</a> Problems</h3>\n<ol>\n<li>\n<p>JSX 语法不符合 JS 标准语法：</p>\n<p><strong>需要将 JSX 文件转义为 JS 文件</strong></p>\n</li>\n<li>\n<p>返回的 JSX 发生改变时，如何更新 DOM：</p>\n<p><strong>Virtual DOM（虚拟 DOM 树）</strong></p>\n</li>\n<li>\n<p>State/Props 更新时，要重新触发 render 函数：</p>\n<p><strong>Diff 算法</strong></p>\n</li>\n</ol>\n<h3 id=\"virtual-dom虚拟dom\"><a class=\"anchor\" href=\"#virtual-dom虚拟dom\">#</a> Virtual DOM（虚拟 DOM）</h3>\n<blockquote>\n<p>它赋予了 React 声明式的 API: 您告诉 React 希望让 UI 是什么状态，React 就确保 DOM 匹配该状态。这使您可以从属性操作、事件处理和手动 DOM 更新这些在构建应用程序时必要的操作中解放出来。</p>\n</blockquote>\n<p>Virtual DOM 使得状态更新<strong>先更新虚拟 DOM 树</strong>，而不是直接更新 DOM 树，通过虚拟 DOM 树的<strong> Diff 算法</strong>，求出最少要更新的节点，然后<strong>再去更新真正的 DOM 树</strong></p>\n<p>状态改变 &amp; 虚拟 DOM 更新：</p>\n<p><img data-src=\"https://calendar.perfplanet.com/wp-content/uploads/2013/12/vjeux/4.png\" alt=\"img\"></p>\n<p><img data-src=\"https://calendar.perfplanet.com/wp-content/uploads/2013/12/vjeux/5.png\" alt=\"img\"></p>\n<p>Diff 算法 &amp; 真正要更新的节点：</p>\n<p><img data-src=\"https://calendar.perfplanet.com/wp-content/uploads/2013/12/vjeux/6.png\" alt=\"img\"></p>\n<h4 id=\"如何实现diff算法\"><a class=\"anchor\" href=\"#如何实现diff算法\">#</a> 如何实现 Diff 算法</h4>\n<p>完美的最小 Diff 算法，需要 O (n^3) 的复杂度。</p>\n<p>牺牲理论最小 Diff，换取时间，得到了 O (n) 复杂度的算法</p>\n<p><strong>Heuristic O(n) Algorithm</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">不同类型的元素</th>\n<th style=\"text-align:center\">同类型的 DOM 元素</th>\n<th style=\"text-align:center\">同类型的组件元素</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">替换</td>\n<td style=\"text-align:center\">更新</td>\n<td style=\"text-align:center\">递归</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"react状态管理库\"><a class=\"anchor\" href=\"#react状态管理库\">#</a> React 状态管理库</h2>\n<p><code>Redux</code> 、 <code>xState</code> 、 <code>mobx</code> 、 <code>recoil</code>  等</p>\n<p>特点：<strong>将状态抽离到 UI 外部进行统一管理</strong></p>\n<h3 id=\"状态机\"><a class=\"anchor\" href=\"#状态机\">#</a> 状态机</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220119113244551.png\" alt=\"image-20220119113244551\"></p>\n<h2 id=\"应用级框架\"><a class=\"anchor\" href=\"#应用级框架\">#</a> 应用级框架</h2>\n<ol>\n<li>\n<p>NEXT.js</p>\n<p>硅谷明星创业公司 Vercel 的 React 开发框架，稳定，开发体验好，支持 Unbundled Dev、SWC 等，其同样有 Serverless 一键部署平台帮助开发者快速完成部署。口号是 &quot;Let’s Make Web Faster&quot;</p>\n</li>\n<li>\n<p>MODERN.js</p>\n<p>字节跳动 Web Infra 团队研发的全栈开发框架，内置了很多开箱即用的能力与最佳实践，可以减少很多调研选择工具的时间。</p>\n</li>\n<li>\n<p>Blitz</p>\n<p>无 API 思想的全栈开发框架，开发过程中无需写 API 调用与 CRUD 逻辑，适合前后端紧密结合的小团队项目。</p>\n</li>\n</ol>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V0aGNhbXAuYnl0ZWRhbmNlLmNvbS8=\">青训营</span>课程</li>\n<li>React<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnLw==\"> 官网</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYWxlbmRhci5wZXJmcGxhbmV0LmNvbS8yMDEzL2RpZmYv\">React’s diff algorithm</span></li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划",
                "React"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/18/%E5%89%8D%E7%AB%AF%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%9F%A5%E8%AF%86-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/18/%E5%89%8D%E7%AB%AF%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%9F%A5%E8%AF%86-%E7%AC%94%E8%AE%B0/",
            "title": "前端必须知道的开发调试知识 - 笔记",
            "date_published": "2022-01-18T12:02:44.000Z",
            "content_html": "<blockquote>\n<p>Bug 与 Debug：Bug 的产生、前端 Debug 特点</p>\n<p>Chrome 的 DevTools</p>\n<p>移动端 H5 调试：真机调试、代理工具调试</p>\n<p>开发调试技巧</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"前端必须知道的开发调试知识-笔记\"><a class=\"anchor\" href=\"#前端必须知道的开发调试知识-笔记\">#</a> 前端必须知道的开发调试知识 - 笔记</h1>\n<h2 id=\"bug与debug\"><a class=\"anchor\" href=\"#bug与debug\">#</a> Bug 与 Debug</h2>\n<h3 id=\"bug的产生\"><a class=\"anchor\" href=\"#bug的产生\">#</a> Bug 的产生</h3>\n<p>这一切都要从一只虫子 (bug) 说起，最早的计算机故障就是由一只飞蛾引起的。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220117140255844.png\" alt=\"image-20220117140255844\"></p>\n<h3 id=\"前端debug特点\"><a class=\"anchor\" href=\"#前端debug特点\">#</a> 前端 Debug 特点</h3>\n<ul>\n<li>多平台：浏览器、Hybrid、Node.js、小程序、桌面应用等</li>\n<li>多环境：本地开发环境、线上环境</li>\n<li>多工具：Chrome DevTooles、Charles、Spy-Debugger、Whistle、vConsole 等</li>\n<li>多技巧：Console、BreakPoint、SourceMap、代理等</li>\n</ul>\n<h2 id=\"chrome的devtools\"><a class=\"anchor\" href=\"#chrome的devtools\">#</a> Chrome 的 DevTools</h2>\n<blockquote>\n<p>我录过一期 Chrome 调试方法的视频，有兴趣也可以看看 -&gt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW00NHkxWTdtZA==\">link</span></p>\n</blockquote>\n<h3 id=\"elementsdom树-动态修改元素与样式\"><a class=\"anchor\" href=\"#elementsdom树-动态修改元素与样式\">#</a> Elements—DOM 树 动态修改元素与样式</h3>\n<ul>\n<li>\n<p>点击.cls 开启动态修改元素的 class</p>\n</li>\n<li>\n<p>输入字符串可以动态的给元素添加类名</p>\n</li>\n<li>\n<p>勾选 / 取消类名可以动态的查看类名生效效果</p>\n</li>\n<li>\n<p>点击具体的样式值（字号、颜色、宽度高度等) 可以进行编辑，浏览器内容区域实时预览</p>\n</li>\n<li>\n<p>Computed 下点击样式里的箭头可以跳转到 styles 面板中的 css 规则</p>\n</li>\n<li>\n<p>可以使用 2 种方式强制激活伪类：</p>\n<p>选中具有伪类的元素，点击:hov；</p>\n<p>DOM 树右键菜单．选择 Force State</p>\n</li>\n</ul>\n<h3 id=\"console控制台\"><a class=\"anchor\" href=\"#console控制台\">#</a> Console— 控制台</h3>\n<p>在这个面板中可以直接写入 &amp; 运行单 / 多行 js 代码</p>\n<p>左侧可以选择警告等级，对日志进行分类查看</p>\n<p>Console 相关方法：</p>\n<ul>\n<li><code>console.log</code></li>\n<li><code>console.warn</code></li>\n<li><code>console.error</code></li>\n<li><code>console.debug</code></li>\n<li><code>console.info</code></li>\n</ul>\n<p>小技巧：<strong>不同类型的数据</strong>从 console 中打印出的<strong>颜色也不相同</strong>，可以借此判断数据类型</p>\n<p>上面的都是用于区分警告等级，主要区别就在于显示颜色不同，而还有一种日志方法，可以具像化的展示 JSON 和数组数据，方便调试：</p>\n<ul>\n<li><code>console.table</code></li>\n</ul>\n<p>另外，console 打印的日志还可以自定义 css 样式：</p>\n<ul>\n<li>通过占位符给日志添加样式，突出重要的信息</li>\n<li>% s：字符串占位符</li>\n<li>% o：对象占位符</li>\n<li>% c：样式占位符</li>\n<li>% d：数字占位符</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%s %o,%c%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'tome'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'font-size: 24px; color: red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Welcome to bytedance!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后还有一个比较少用的方法，用于展示 HTML 节点的 DOM 对象：</p>\n<ul>\n<li><code>console.dir</code></li>\n</ul>\n<h3 id=\"sources源码\"><a class=\"anchor\" href=\"#sources源码\">#</a> Sources— 源码</h3>\n<p>调试器使用：</p>\n<ul>\n<li>使用关键字 debugger 或代码预览区域的行号可以设置断点</li>\n<li>执行到断点处时代码暂停执行</li>\n<li>展开 Breakpoints 列表可以查看断点列表，勾选 / 取消可以激活 / 禁用对应断点</li>\n<li>暂停状态下，鼠标 hover 变量可以查看变量的值</li>\n<li>在调试器 Watch 右侧点击＋可以添加对变量的监控，查看该变量的值</li>\n<li>展开 Scope 可以查看作用域列表 (包含闭包)</li>\n<li>展开 Call Stack 可以查看当前 JavaScript 代码的调用栈</li>\n</ul>\n<p>前端代码天生具有 &quot;开源&quot; 属性，出于安全考虑，JavaScript 代码在上线时通常会被压缩，压缩后的代码只有一行，变量使用’a’.'b’等替换，整体变得不可阅读。</p>\n<p>那么压缩后的代码如何调试呢？</p>\n<p>答案是：通过在打包过程中生成<strong> SourceMap</strong> 文件来对压缩后的代码进行映射，从而可以在调试时还原源码</p>\n<p>SourceMap： <code>mappings</code>  字段存储了源文件和 SourceMap 的映射</p>\n<ul>\n<li>英文，表示源码及压缩代码的位置关联</li>\n<li>逗号，分隔一行代码中的内容。</li>\n<li>分号，代表换行。之所以没有显示分号是因为压缩后的代码就只有一行。</li>\n</ul>\n<h3 id=\"performance性能\"><a class=\"anchor\" href=\"#performance性能\">#</a> Performance— 性能</h3>\n<p>比较复杂，主要用于高级性能分析</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220117144730077.png\" alt=\"image-20220117144730077\"></p>\n<h3 id=\"network网络请求\"><a class=\"anchor\" href=\"#network网络请求\">#</a> Network— 网络请求</h3>\n<p>用于查看、筛选各类网络请求，查看请求的详情信息，请求发出堆栈，请求时间栈等等</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220117144903372.png\" alt=\"image-20220117144903372\"></p>\n<h3 id=\"application\"><a class=\"anchor\" href=\"#application\">#</a> Application</h3>\n<p>Application 面板展示与本地存储相关的信息</p>\n<ul>\n<li>Local Storage</li>\n<li>Session Storage</li>\n<li>IndexedDB</li>\n<li>Web SQL</li>\n<li>Cookie</li>\n</ul>\n<p>通过此面板可以清除网站缓存、本地存储、Cookie 等</p>\n<h2 id=\"移动端h5调试\"><a class=\"anchor\" href=\"#移动端h5调试\">#</a> 移动端 H5 调试</h2>\n<h3 id=\"真机调试\"><a class=\"anchor\" href=\"#真机调试\">#</a> 真机调试</h3>\n<h4 id=\"ios\"><a class=\"anchor\" href=\"#ios\">#</a> IOS</h4>\n<ol>\n<li>\n<p>使用 Lightning 数据线将 iPhone 与 Mac 相连</p>\n</li>\n<li>\n<p>iPhone 开启 Web 检查器（设置→Safari -&gt; 高级 -→&gt; 开启 Web 检查器)</p>\n</li>\n<li>\n<p>iPhone 使用 Safari 浏览器打开要调试的页面</p>\n</li>\n<li>\n<p>Mac 打开 Safari 浏览器调试 (菜单栏→&gt; 开发 - iPhone 设备名 -→选择调试页面)</p>\n</li>\n<li>\n<p>在弹出的 <code>Safari Developer Tools</code>  中调试</p>\n</li>\n<li>\n<p>Tips：没有 iPhone 设备可以在 Mac AppStore 安装 Xcode 使用其内置的 ios 模拟器</p>\n</li>\n</ol>\n<h4 id=\"android\"><a class=\"anchor\" href=\"#android\">#</a> Android</h4>\n<ol>\n<li>使用 USB 数据线将手机与电脑相连</li>\n<li>手机进入开发者模式。勾选 <code>USB调试</code> 。并允许调试</li>\n<li>电脑打开 Chrome 浏览器，在地址栏输入： <code>chrome://inspect/#devices</code>  并勾选 <code>Discover USB devices</code>  选项</li>\n<li>手机允许远程调试，并访问调试页面</li>\n<li>电脑点击 <code>inspect</code>  按钮</li>\n<li>进入调试界面</li>\n</ol>\n<h3 id=\"代理工具调试\"><a class=\"anchor\" href=\"#代理工具调试\">#</a> 代理工具调试</h3>\n<p>原理:</p>\n<ul>\n<li>电脑作为代理服务器</li>\n<li>手机通过 HTTP 代理连接到电脑</li>\n<li>手机上的请求都经过代理服务器</li>\n</ul>\n<p>以 Charles 为例:</p>\n<ol>\n<li>安装 Charles</li>\n<li>查看电脑 IP 和端口</li>\n<li>将 IP、端口号填入手机 HTTP 代理</li>\n<li>Charles 允许授权</li>\n<li>使用 SwitchHosts! 软件给 Mac 电脑配 Hosts</li>\n<li>手机访问开发环境页面</li>\n</ol>\n<p>常用工具：</p>\n<ul>\n<li>Charles：适合查看、控制网络请求、分析数据</li>\n<li>Fiddler：与 Charles 类似，适合 Windows 平台</li>\n<li>spy-debugger：远程调试手机页面、抓包</li>\n<li>Whistle：基于 Node 实现的跨平台 Web 调试代理工具</li>\n</ul>\n<h2 id=\"开发调试技巧\"><a class=\"anchor\" href=\"#开发调试技巧\">#</a> 开发调试技巧</h2>\n<h4 id=\"chrome的devtools-2\"><a class=\"anchor\" href=\"#chrome的devtools-2\">#</a> Chrome 的 DevTools</h4>\n<ol>\n<li>Source-&gt;override：通过开启此功能，可以使得在 DevTools 中的所有更改（DOM、CSS、JS）持久化，并可以查看与原文件的差异（类似 git）</li>\n<li>CORS (跨域) 问题：通过 Whistle 开启代理，使用代理对真实请求地址进行封装和转发，让浏览器请求同源地址，代理转发到真实地址</li>\n<li>启用本地 SourceMap：将远程不存在的 SouceMap 不存在时，使用代理，将请求代理到本地的 SourceMap 文件，便可以进行线上调试</li>\n<li>小黄鸭调试大法（🐤）：传说中程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码，然后很快就将问题定位修复了。 -《程序员修炼之道》</li>\n</ol>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>\n<p>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bS5qdWVqaW4uY24veW91dGhjYW1w\">青训营</span>课程</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWI=\">MDN</span> 中文文档</p>\n</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/18/Web%E6%A0%87%E5%87%86%E4%B8%8E%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/18/Web%E6%A0%87%E5%87%86%E4%B8%8E%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91-%E7%AC%94%E8%AE%B0/",
            "title": "Web标准与前端开发 - 笔记",
            "date_published": "2022-01-18T11:16:05.000Z",
            "content_html": "<blockquote>\n<p>关于前端开发：起源、架构、变迁、前端应用领域、语言、框架、工具、前端学习路线</p>\n<p>关于 Web 标准：标准组织、W3C 及 Ecma 会员、W3C 规范制定流程、如何参与标准制定</p>\n<p>一些问题和回答</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"web标准与前端开发-笔记\"><a class=\"anchor\" href=\"#web标准与前端开发-笔记\">#</a> Web 标准与前端开发 - 笔记</h1>\n<h2 id=\"关于前端开发\"><a class=\"anchor\" href=\"#关于前端开发\">#</a> 关于前端开发</h2>\n<h3 id=\"起源\"><a class=\"anchor\" href=\"#起源\">#</a> 起源</h3>\n<p>在 1989 年，在 CERN 工作的<em> Tim Berners-Lee</em> 写了一个关于信息管理的建议<strong>《Informational Management: A Proposal》</strong>，提及基于超文本来构建文档网络的想法，这份文档被公认为 Web 的起源。</p>\n<h3 id=\"架构\"><a class=\"anchor\" href=\"#架构\">#</a> 架构</h3>\n<p>直到现在，很多人也不是很清楚 “上网” 指的是上什么网。“上网” 实际上指的就是接入<strong> Internet</strong>，而我们平时使用搜索引擎、访问网页、使用网络聊天应用都是指使用<strong> Web</strong>。前者相当于一个高速公路，提供各种底层的数据传输协议、架构等，后者相当于是一个非常大的物流公司，提供具体服务，比如说：在浏览器中输入网址、访问网页，实际上就是访问远程服务器的<strong> 80</strong>(<em>HTTP</em>)/<strong>443</strong>(<em>HTPPS</em>) 端口，而还有其他的服务（比如收发邮件）则使用的是另外的对应端口。</p>\n<p>1989 年诞生时，Web 由三种技术构成：<strong>HTML、HTTP、URL</strong>，而 CSS 和 JavaScript 是几年之后（1995 年前后）才出现的。</p>\n<p><strong>HTML</strong> 是超文本标记语言，用来做 Document；</p>\n<p><strong>HTTP</strong> 是超文本传输协议，用来传输 Document，在 TCP/IP 之上，封装的是 HTTP 这个资源的数据包；</p>\n<p><strong>URL</strong> 是统一资源定位符，在 HTTP 的上下文中，一般也被称为网址，在浏览器的地址栏中显示，例如 <code>https://developer.mozilla.org</code> 。</p>\n<p>客户端（浏览器）因为是直接面向用户，所以就是前端，而服务器因为用户不能直接接触到，所以就成了后端。</p>\n<h3 id=\"变迁\"><a class=\"anchor\" href=\"#变迁\">#</a> 变迁</h3>\n<ol>\n<li>\n<p>1989-2004（只读时代）：</p>\n<p><strong>HTML/CSS/JavaScript</strong></p>\n<ul>\n<li>单项发布</li>\n<li>静态只读</li>\n<li>链接跳转</li>\n<li>刷新页面</li>\n<li>表格对齐元素</li>\n<li>CGI</li>\n</ul>\n<p>在这个时代中，浏览器更像是一个阅读器，页面的更新必须依靠浏览器的刷新（重新向服务器发送一次请求，获取 HTML）进行页面的整体替换。</p>\n</li>\n<li>\n<p>2005-2010（体验时代）：</p>\n<p><strong>Ajax/Web API/jQuery</strong></p>\n<ul>\n<li>动态交互</li>\n<li>社交媒体</li>\n<li>用户生成内容（UGC）</li>\n<li>单页应用（SPA）</li>\n<li>jQuery</li>\n<li>YUI</li>\n</ul>\n<p>这个时代的标志就是 Ajax，浏览器可以不用刷新网页，通过 JS 的对象在后台就能向服务器发送请求，局部更新页面，实现了 Web 从一个简单的页面到 Web App 的跨越。</p>\n</li>\n<li>\n<p>2010-2021（敏捷时代）：</p>\n<p><strong>Fetch/Node.js/Webpack</strong></p>\n<ul>\n<li>模块化</li>\n<li>组件化</li>\n<li>转译（transpiling）</li>\n<li>打包（bundling）</li>\n<li>React&amp;Vue</li>\n</ul>\n<p>这个时代是从 iPhone 的发布开始的，Web 逐渐开始跨向移动领域，用户体验越来越被重视，前端开始真正变成一个独立的工种（职业），得益于 Node.js 的问世，前端工程师也能够处理后端的工作了，为前端的规模化、敏捷化打下了基础</p>\n</li>\n</ol>\n<h3 id=\"前端应用领域\"><a class=\"anchor\" href=\"#前端应用领域\">#</a> 前端应用领域</h3>\n<ol>\n<li>ToB（To Business）：面向企业、大型组织 &amp; 机构\n<ul>\n<li>包括商业引擎、CRM、中后台管理面板等</li>\n</ul>\n</li>\n<li>ToC（To Customer）：面向终端客户 &amp; 消费者\n<ul>\n<li>包括门户网站、电商平台、在线教育、新闻资讯、生活娱乐平台等</li>\n</ul>\n</li>\n<li>ToD（To Developer）：面向开发者\n<ul>\n<li>包括面向开发者的平台、框架、工具、VSCode 等</li>\n</ul>\n</li>\n</ol>\n<p>Web 浏览器主要分为：</p>\n<ol>\n<li>桌面端：Chrome 内核（Chrome、Edge、Opera）、Firefox、Safari</li>\n<li>移动端：Android（WebView）、IOS（Safari）</li>\n</ol>\n<p>服务器技术主要有：</p>\n<ul>\n<li>Node.js</li>\n<li>Express.js</li>\n<li>koa</li>\n<li>Deno（基于 Rust 语言的新一代 js&amp;ts 运行时）</li>\n</ul>\n<p>终端和跨端技术主要有：</p>\n<ol>\n<li>命令行 / 终端（脚手架）：\n<ul>\n<li>Webpack CLI</li>\n<li>Bacel CLI</li>\n<li>React/Vue CLI</li>\n</ul>\n</li>\n<li>桌面跨端：\n<ul>\n<li>Electron</li>\n<li>NW.js</li>\n</ul>\n</li>\n<li>移动跨端：\n<ul>\n<li>React Native</li>\n<li>Flutter</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"语言-框架-工具\"><a class=\"anchor\" href=\"#语言-框架-工具\">#</a> 语言、框架、工具</h3>\n<p>浏览器语言有：</p>\n<ol>\n<li>HTML、CSS、JavaScript：在很长时间都是浏览器中只能使用的语言</li>\n<li>WebAssembly：2019 年成为标准，是一种类汇编的语言，可以由 C/C++/Rust/Kotlin 等语言编译而成，可以与 JavaScript 互操作、传递消息、共享内存，速度接近平台的<strong>原生</strong>速度</li>\n</ol>\n<p>常用框架和工具有：Node.js、koa、React、Vue、TypeScript、git、Babel、webpack、esbuild 等 *（在学习一个框架 / 工具时，可以去了解一下其作者，写这个框架 / 工具的初衷是什么，这样可以帮助更好的理解和学习）*</p>\n<h3 id=\"浏览器-网络-服务器\"><a class=\"anchor\" href=\"#浏览器-网络-服务器\">#</a> 浏览器、网络、服务器</h3>\n<p>推荐两篇文章：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLzc1dGVhbS93M2MvYmxvYi9tYXN0ZXIvYXJ0aWNsZXMvMjAxOTA2MDNfY25jdWNrb29fJUU2JUI3JUIxJUU1JTg1JUE1JUU3JTkwJTg2JUU4JUE3JUEzJUU3JThFJUIwJUU0JUJCJUEzJUU2JUI1JThGJUU4JUE3JTg4JUU1JTk5JUE4Lm1k\">深入理解现代浏览器</span>：告诉你在浏览器输入网址按回车之后，真正发生的事情</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9PdmVydmlldw==\">HTTP 概述 - MDN</span>：帮助你理解 HTTP 协议</li>\n</ul>\n<h3 id=\"前端学习路线\"><a class=\"anchor\" href=\"#前端学习路线\">#</a> 前端学习路线</h3>\n<p>路线图推荐：</p>\n<ul>\n<li>\n<p>中文：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vYmp0dWJlLmdpdGh1Yi5pby9mcm9udC1lbmQtcm9hZG1hcC8jLw==\">ObjTube</span></p>\n</li>\n<li>\n<p>英文：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yb2FkbWFwLnNoL2Zyb250ZW5k\">RoadMap.sh</span></p>\n</li>\n</ul>\n<p><strong>学习永无止境，翻滚吧后浪！</strong></p>\n<h2 id=\"关于web标准\"><a class=\"anchor\" href=\"#关于web标准\">#</a> 关于 Web 标准</h2>\n<h3 id=\"标准组织\"><a class=\"anchor\" href=\"#标准组织\">#</a> 标准组织</h3>\n<ol>\n<li>\n<p><strong>W3C</strong>: <em>World Wide Web Consortium</em>（万维网联盟）</p>\n<p>制定了 HTML、CSS、DOM 相关标准</p>\n</li>\n<li>\n<p><strong>Ecma</strong>: <em>Ecma International</em>（Ecam 国际）</p>\n<p>制定了 JavaScript 相关的语言标准，如：ES5、ES6、ES2015、ES2016、ES2017、ES2018、ES2019、ES2020、ES2021</p>\n</li>\n<li>\n<p><strong>WHATWG</strong>: <em>Web Hypertext Application Technology Working Group</em>（Web 超文本应用技术工作组）</p>\n<p>制定了 DOM、Web API 相关标准</p>\n</li>\n<li>\n<p><strong>IETF</strong>: <em>Internet Engineering Task Force</em>（互联网工程任务组）</p>\n<p>制定了 HTTP 等基础通信协议标准</p>\n</li>\n</ol>\n<h3 id=\"w3c及ecma会员\"><a class=\"anchor\" href=\"#w3c及ecma会员\">#</a> W3C 及 Ecma 会员</h3>\n<ul>\n<li>\n<p>W3C 目前在全球有<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzMub3JnL0NvbnNvcnRpdW0vTWVtYmVyL0xpc3Q=\"> 457 家</span>会员，其中北航总部（中国区）会员<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hpbmF3M2Mub3JnL2NoaW5hLW1lbWJlcnMuaHRtbA==\"> 47 家</span></p>\n<p>全球很多著名互联网公司（特别是浏览器厂商）都是 W3C 会员，根据加入组织的年营业额来缴纳会费</p>\n</li>\n<li>\n<p>Ecma 的 AM（Associate Member）会员目前有 18 家，中国公司有字节跳动、360、阿里、华为、腾讯等<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9hYm91dC1lY21hL21lbWJlcnMv\"> 5 家</span></p>\n<p>Ecma 的会员分为 AM 和 OM，OM 比 AM 多了一项投票权，可以决定一些 Ecma 的重大事务（包括是否批准新会员的加入），AM 的会费一年大概 250,000RMB 左右</p>\n</li>\n</ul>\n<h3 id=\"w3c规范制定流程\"><a class=\"anchor\" href=\"#w3c规范制定流程\">#</a> W3C 规范<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzMub3JnLzIwMjAvUHJvY2Vzcy0yMDIwMDkxNS8=\">制定流程</span></h3>\n<ol>\n<li>WD（Worker Draft）</li>\n<li>CR（Candidate Recommendation）</li>\n<li>PR（Proposed Recommendation）</li>\n<li>REC（Recommendation）</li>\n</ol>\n<h4 id=\"contribute\"><a class=\"anchor\" href=\"#contribute\">#</a> Contribute</h4>\n<p>Explainer demo</p>\n<p>Find the right community/group</p>\n<p>Web IDL for APIs link</p>\n<p>Step-by-step algorithms</p>\n<p>GitHub, Markdown, respec, bikeshed, etc.</p>\n<p>Get an early review w3ctag/design-reviews</p>\n<p>Write web-platform-tests (WPT) tests</p>\n<h3 id=\"ecma-tc39规范制定流程\"><a class=\"anchor\" href=\"#ecma-tc39规范制定流程\">#</a> Ecma TC39 规范<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9wdWJsaWNhdGlvbnMtYW5kLXN0YW5kYXJkcy9zdGFuZGFyZHMvZWNtYS0yNjIv\">制定流程</span></h3>\n<ol>\n<li>STAGE 0（strawman）：以任何形式提交的想法</li>\n<li>STAGE 1（proposal）：正式的建议 &amp; 文档</li>\n<li>STAGE 2（draft）：有语法 &amp; 语义相关的描述</li>\n<li>STAGE 3（candidate）：规范文本完备且至少有两个实现</li>\n<li>STAGE 4（finished）：成为标准</li>\n</ol>\n<h4 id=\"contribute-2\"><a class=\"anchor\" href=\"#contribute-2\">#</a> Contribute</h4>\n<p>Championing a proposal at TC39</p>\n<p>How to write a good explainer</p>\n<p>Presenting a Proposal to TC39</p>\n<p>Reading a proposal draft</p>\n<p>Stage 3 Proposal Reviews</p>\n<p>How to experiment with a proposal before Stage 4</p>\n<p>Implementing and shipping TC39 proposals</p>\n<h3 id=\"如何参与标准制定\"><a class=\"anchor\" href=\"#如何参与标准制定\">#</a> 如何参与标准制定</h3>\n<h4 id=\"w3c会议\"><a class=\"anchor\" href=\"#w3c会议\">#</a> W3C 会议</h4>\n<p>W3C Technical Plenary / Advisory Committee Meetings Week（简称 TPAC) 是 W3C 一年一度的全球技术大会，汇集 W3C 各工作小组成员 (工作组、兴趣组、社区组等)、咨询委员会 (AB)、技术架构组 (TAG)、会员单位代表 (AC)、公众特邀专家以及全球社区成员，通过为期 1-2 周的集中互动交流，深入探讨未来开放 Web 平台技术方向。</p>\n<h4 id=\"参加w3c会议\"><a class=\"anchor\" href=\"#参加w3c会议\">#</a> 参加 W3C 会议</h4>\n<ol>\n<li>年度大会\n<ul>\n<li>AC（Advisory Committee）：每个会员出一个代表，每年定期开会，主要是事务性的会议，持续 2-3 天</li>\n<li>TPAC（Technical Plenary and Advisory Committee）：技术大会，对所有会员开放，持续一周</li>\n</ul>\n</li>\n<li>工作组会议\n<ul>\n<li>每月会议</li>\n<li>各种研讨会</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"参加emca会议\"><a class=\"anchor\" href=\"#参加emca会议\">#</a> 参加 Emca 会议</h4>\n<ol>\n<li>年度大会：GA（General Assembly），讨论重大事宜，投票通过每年的新会员申请</li>\n<li>TC39 会议：每 1-2 个月</li>\n</ol>\n<h2 id=\"一些问题\"><a class=\"anchor\" href=\"#一些问题\">#</a> 一些问题</h2>\n<h3 id=\"加入会员对公司有什么好处\"><a class=\"anchor\" href=\"#加入会员对公司有什么好处\">#</a> 加入会员对公司有什么好处？</h3>\n<p>加入会员对公司来说，有几个方面的好处：</p>\n<ol>\n<li>这些标准决定未来行业发展趋势，很多公司在做基础设施建设的时候，也会产出一些类似标准的方案，如果作为会员，就能够深入得到参与到工作组的讨论，进行对前景早期的交流，获取行业内部第一手的资料，对公司的发展 &amp; 部署都有帮助</li>\n<li>作为会员公司的员工，能够代表公司参加会议，接触到标准前沿，认识到行业内的大佬，对整个学习氛围都是很有帮助的</li>\n</ol>\n<h3 id=\"现在还要学jquery吗\"><a class=\"anchor\" href=\"#现在还要学jquery吗\">#</a> 现在还要学 jQuery 吗？</h3>\n<p>在大公司的项目里，基本见不到用 jQuery 的了</p>\n<p>对于技术发展不是那么快的公司，项目代码里可能还会用到 jQuery</p>\n<p>之前流行的原因是：早期很多浏览器的实现不一致，jQuery 解决了跨浏览器的兼容问题</p>\n<p>但是现在浏览器的发展趋同化，浏览器的多样性实际上在减少，兼容性的问题越来越少，jQuery 就没那么重要了；相反，组件式开发框架 React、Vue 和函数式实用工具库变得比较受欢迎</p>\n<p>所以 jQuery 没有必要花太多时间去学，如果感兴趣可以学一学</p>\n<h3 id=\"nodejs现在在大公司的应用方向\"><a class=\"anchor\" href=\"#nodejs现在在大公司的应用方向\">#</a> Node.js 现在在大公司的应用方向？</h3>\n<p>由于前端工程师学习 Node.js 比较简单，所以应用还是比较广泛的，比如 ToB 和 ToD：</p>\n<ul>\n<li>BFF（Backend For Frontend）：在后端与前端之间的一个中间层，根据前端不断变化的应用，对后端接口进行进一步封装</li>\n<li>npm：大公司内部一般都有自己的 npm 仓库，npm 包（自研组件库等）都是用 Node.js 来写的</li>\n</ul>\n<h3 id=\"要先搞透js再学框架还是同时深入\"><a class=\"anchor\" href=\"#要先搞透js再学框架还是同时深入\">#</a> 要先搞透 js 再学框架还是同时深入？</h3>\n<p>框架和 js 的学习是相辅相成的，框架实际上是一种更高层次的抽象，对框架的实践 &amp; 运用也能使你对 js 架构、设计模式层面有更深入的理解</p>\n<h3 id=\"元宇宙跟前端有关系吗\"><a class=\"anchor\" href=\"#元宇宙跟前端有关系吗\">#</a> 元宇宙跟前端有关系吗？</h3>\n<p>有，元宇宙平台可以给前端提供 API 接口，从而使开发者可以在元宇宙平台中开发丰富多样的应用</p>\n<h3 id=\"webassembly是前端人员去做吗是否意味着前端要学习crustgo\"><a class=\"anchor\" href=\"#webassembly是前端人员去做吗是否意味着前端要学习crustgo\">#</a> WebAssembly 是前端人员去做吗？是否意味着前端要学习 c++/rust/go？</h3>\n<p>WebAssembly 实际上是两种开发生态的融合，为了解决前端的计算量 &amp; 性能问题，JavaScript 的性能是毫秒级的，Rust/Go 等原生语言的性能是纳秒级的</p>\n<p>任务层面：前端开发者可以了解怎么把原生的应用转换成 WebAssembly，以及其完善、扩展</p>\n<p>提高层面：作为前端开发者也应该了解底层的系统编程语言，Rust/Go 都是很值得去学习的，以便了解系统底层原理</p>\n<h3 id=\"怎么看待低代码平台\"><a class=\"anchor\" href=\"#怎么看待低代码平台\">#</a> 怎么看待低代码平台？</h3>\n<p>低代码平台对前端来说是种机遇，可以为前端提供很多工作岗位，但同时也是一种挑战，需要很多新的算法、技术解决方案</p>\n<h3 id=\"webassembly用的多吗在字节跳动应用如何\"><a class=\"anchor\" href=\"#webassembly用的多吗在字节跳动应用如何\">#</a> WebAssembly 用的多吗？在字节跳动应用如何？</h3>\n<p>WebAssembly 在大公司应用的还是很多的，大公司对于解决应用性能的需求是十分迫切的，且也有相应的资源进行人才扩招和项目落地</p>\n<p>在规模不是太大的公司，对性能的需求不是特别高，就不会优先考虑</p>\n<h3 id=\"使用类似nest的nodejs后端框架在性能上会和spring-go写的后端差距很大吗\"><a class=\"anchor\" href=\"#使用类似nest的nodejs后端框架在性能上会和spring-go写的后端差距很大吗\">#</a> 使用类似 nest 的 Node.js 后端框架在性能上会和 spring、go 写的后端差距很大吗？</h3>\n<p>很大。建议看一下<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lc2J1aWxkLmdpdGh1Yi5pby8=\"> esbuild</span> 的官网，esbuild 使用 go 语言编写，而 webpack 使用 Node.js 编写，其性能差异可达百倍。</p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>\n<p>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V0aGNhbXAuYnl0ZWRhbmNlLmNvbS8=\">青训营</span>课程</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWI=\">MDN</span> 中文文档</p>\n</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划"
            ]
        },
        {
            "id": "http://tagbug.github.io/2022/01/17/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDJavaScript-%E7%AC%94%E8%AE%B0/",
            "url": "http://tagbug.github.io/2022/01/17/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDJavaScript-%E7%AC%94%E8%AE%B0/",
            "title": "如何写好JavaScript - 笔记",
            "date_published": "2022-01-17T12:31:19.000Z",
            "content_html": "<blockquote>\n<p>什么是好的 JS 代码：各司其职、组件封装、过程抽象</p>\n<p>使用 JS 解决实际问题：如何评价一段代码的好坏、写代码最应关注什么</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"如何写好javascript-笔记\"><a class=\"anchor\" href=\"#如何写好javascript-笔记\">#</a> 如何写好 JavaScript - 笔记</h1>\n<h2 id=\"各司其职\"><a class=\"anchor\" href=\"#各司其职\">#</a> 各司其职</h2>\n<p>我们知道，前端 web 对于 HTML、CSS、JavaScript 的分工都很明确。</p>\n<p>HTML 负责页面骨架、CSS 负责页面的渲染、JavaScript 负责页面的行为。</p>\n<h3 id=\"一个\"><a class=\"anchor\" href=\"#一个\">#</a> 一个🌰</h3>\n<p>对于一个切换页面深色模式切换的需求，如果要用 JS，该怎么实现？</p>\n<p>很容易想到：</p>\n<ul>\n<li>\n<p>使用 button，监听点击事件，更改页面背景颜色和文字颜色</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'modeBtn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span> body <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">===</span> <span class=\"token string\">'🌞'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'🌜'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'black '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'🌞'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>但是这个版本的实现<strong>语义不清</strong>，如果让别人来阅读这段代码，可能一时间不知道是在实现什么功能。</p>\n<p>于是，我们想出优化方案：</p>\n<ul>\n<li>\n<p>同样使用 button，监听点击事件，但这次直接修改容器的 class，通过在 css 中写的 class 样式修改页面表现</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'modeBtn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span> body <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>className <span class=\"token operator\">===</span> <span class=\"token string\">'night'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        body<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        body<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'night'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>很明显，这个版本已经比上个版本好多了，我们一眼就能看出来这段代码是在做什么。</p>\n<p>但实际上，我们还有一种更好的解决方案 ——<strong> 只使用 CSS 实现</strong>：</p>\n<ul>\n<li>使用 <code>checkbox</code> + <code>:checked</code>  伪类 + 兄弟元素选择器来实现</li>\n</ul>\n<p>那么，实际上来说，<strong>表现层的工作就让负责表现层的 CSS 来做</strong>才是最好的</p>\n<p>总结下来就是以下几点：</p>\n<ul>\n<li>HTML/CSS/JS 各司其责</li>\n<li>应当避免不必要的由 JS 直接操作样式</li>\n<li>可以用 class 来表示状态</li>\n<li>纯展示类交互寻求零 JS 方案</li>\n</ul>\n<h2 id=\"组件封装\"><a class=\"anchor\" href=\"#组件封装\">#</a> 组件封装</h2>\n<p>组件是指 Web 页面上抽出来一个个包含模版（HTML)、功能 (JS）和样式 (CSS) 的单元。</p>\n<p>好的组件具备封装性、正确性、扩展性、复用性。</p>\n<h3 id=\"如何实现一个轮播图组件\"><a class=\"anchor\" href=\"#如何实现一个轮播图组件\">#</a> 如何实现一个轮播图组件？</h3>\n<ul>\n<li>\n<p>HTML 结构设计</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-slider<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slider-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slider-list__item--selected<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://p5.ssl.qhimg.com/t0119c74624763dd070.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slider-list__item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://p4.ssl.qhimg.com/t01adbe3351db853eb3.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slider-list__item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://p2.ssl.qhimg.com/t01645cd5ba0c3b60cb.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slider-list__item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://p4.ssl.qhimg.com/t01331ac159b58f5478.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>CSS 展现效果</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">#my-slider</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 790px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token selector\">.slider-list ul</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">list-style-type</span><span class=\"token punctuation\">:</span>none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token selector\">.slider-list__item,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.slider-list__item--selected</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> opacity 1s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token selector\">.slider-list__item--selected</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> opacity 1s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>行为设计：API</p>\n<p>注意：API 设计应保证原子操作，职责单一，满足灵活性。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/tagbug/demo@latest/img/image-20220117201004121.png\" alt=\"image-20220117201004121\"></p>\n</li>\n<li>\n<p>行为设计：Event 控制流</p>\n<p>使用自定义事件来解耦</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slide-list__next<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slide-list__previous<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slide-list__control<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slide-list__control-buttons--selected<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slide-list__control-buttons<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slide-list__control-buttons<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slide-list__control-buttons<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> detail <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>index<span class=\"token operator\">:</span> idx<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slide'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>bubbles<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> detail<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<p>总的来说，就是要遵循以下基本方法：</p>\n<ul>\n<li>结构设计</li>\n<li>展现效果</li>\n<li>行为设计\n<ul>\n<li>API（功能）</li>\n<li>Event（控制流）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优化\"><a class=\"anchor\" href=\"#优化\">#</a> 优化</h3>\n<h4 id=\"解耦\"><a class=\"anchor\" href=\"#解耦\">#</a> 解耦</h4>\n<ul>\n<li>将控制元素抽取成插件</li>\n<li>插件与组件之间通过<strong>依赖注入</strong>方式建立联系</li>\n<li>将 HTML 模板化，更易于扩展</li>\n</ul>\n<h4 id=\"抽象\"><a class=\"anchor\" href=\"#抽象\">#</a> 抽象</h4>\n<ul>\n<li>将通用的组件模型抽象出来，形成组件框架</li>\n</ul>\n<h2 id=\"过程抽象\"><a class=\"anchor\" href=\"#过程抽象\">#</a> 过程抽象</h2>\n<h3 id=\"什么是过程抽象\"><a class=\"anchor\" href=\"#什么是过程抽象\">#</a> 什么是过程抽象？</h3>\n<ul>\n<li>用来处理局部细节控制的一些方法</li>\n<li>函数式编程思想的基础应用</li>\n</ul>\n<h3 id=\"过程抽象有什么好处\"><a class=\"anchor\" href=\"#过程抽象有什么好处\">#</a> 过程抽象有什么好处？</h3>\n<p><strong>一个🌰：操作次数限制</strong></p>\n<p>假如有一个需求，要求对某个函数的调用设置次数限制，我们可以直接在这个函数里面写上限制代码。</p>\n<p>但是实际上，这个需求是可以通用的，如果对每一个函数都是有需求时更改内部代码，未免显得有点重复。</p>\n<p>所以我们实际上可以通过一个代理函数 (高阶函数)，写一个新的函数，接收一个函数参数，对其封装，并返回封装好的新函数，这样我们就完美地实现了这个需求。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            fn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"常用高阶函数\"><a class=\"anchor\" href=\"#常用高阶函数\">#</a> 常用高阶函数</h3>\n<ul>\n<li>Function Once：只能执行一次</li>\n<li>Function Throttle：节流，每隔一段时间可以调用一次</li>\n<li>Function Debounce：防抖，停下来一段时间后再调用</li>\n<li>Function Consumer：缓存队列，延迟执行</li>\n<li>Function Iteraticve：让函数支持批量操作</li>\n</ul>\n<h3 id=\"为什么要使用高阶函数\"><a class=\"anchor\" href=\"#为什么要使用高阶函数\">#</a> 为什么要使用高阶函数？</h3>\n<p>函数分为两种，纯函数和非纯函数。</p>\n<p>纯函数的意思是：任何时候，以相同的参数调用纯函数，输出也是相同的</p>\n<p>那么其实非纯函数的意思就是相对的：非纯函数依赖外部环境，当外部环境参数改变时，即使用相同的参数调用，输出也会改变</p>\n<p>显而易见，纯函数方便于后期的统一测试，而非纯函数还需要保证外部环境每次要统一（有时很难做到或很麻烦），所以现在更倾向于使用纯函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 纯函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 非纯函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res <span class=\"token operator\">+=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当使用高阶函数时，由于高阶函数一般都是纯函数，这样的话，由高阶函数封装的函数在测试时，就只需要测试原始函数即可，降低了测试成本</p>\n<h3 id=\"编程范式\"><a class=\"anchor\" href=\"#编程范式\">#</a> 编程范式</h3>\n<p>JavaScript 是一种既可以使用命令式又可以使用声明式的编程语言，例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 命令式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>className <span class=\"token operator\">===</span> <span class=\"token string\">'on'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'on'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 声明式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">toggleBuilder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>actions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">let</span> action <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        actions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">action</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> toggle <span class=\"token operator\">=</span> <span class=\"token function\">toggleBuilder</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'off'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'on'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>那么我们应该使用什么编程范式呢？</p>\n<p>思考这样一个问题，对于状态切换这个需求，如果我们需要调整状态的数量、先后，那么：</p>\n<ul>\n<li>\n<p>对于命令式的 <code>toggle</code>  来说，我们需要直接修改这个函数，当需求频繁变化时，就会即为耗费人力和时间；</p>\n</li>\n<li>\n<p>而对于声明式的 <code>toggleBuilder</code>  来说，我们只要在构建 <code>toggle</code>  时，调整传入的行为参数即可，既简单又直观。</p>\n</li>\n</ul>\n<p>发现了吗，声明式的函数要优于命令式的函数</p>\n<p>但是在实际开发中，到底是使用哪种范式，还需要具体问题具体分析，在两种范式之间选择最适合的，才是最好的</p>\n<h2 id=\"使用js解决实际问题\"><a class=\"anchor\" href=\"#使用js解决实际问题\">#</a> 使用 JS 解决实际问题</h2>\n<h3 id=\"如何评价一段代码的好坏\"><a class=\"anchor\" href=\"#如何评价一段代码的好坏\">#</a> 如何评价一段代码的好坏</h3>\n<p>先来看一段代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">isUnitMatrix2d</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> m<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码好不好？为什么？</p>\n<p>其实有两种观点：</p>\n<p>乍一看，对于简洁度和可读性来说，不好，明明可以使用更优雅的迭代来解决，却要用这么笨的方法</p>\n<p>但是，其实这个函数的效率极高，如果这个函数需要在 <code>requestAnimationFrame</code>  中被高频调用，那么这种写法也不失为一种好的解决方案</p>\n<h3 id=\"写代码最应关注什么\"><a class=\"anchor\" href=\"#写代码最应关注什么\">#</a> 写代码最应关注什么？</h3>\n<p><strong>风格 vs 效率</strong></p>\n<p>实际上我们应该根据使用场景来判断，对于效率优先的情况下，肯定要先考虑实现的效率问题，而如果多人协作开发和效率问题起冲突，那么我们就要在这两者之间做权衡了</p>\n<p>所以其实没有绝对的判断代码好坏的标准，<strong>过度的优化、过度的设计</strong>难免会让理解成本成倍增加，所以一切都要从实际出发，结合实际考虑</p>\n<p>抽象程度越高，可复用性就越高，同时理解成本也会越高</p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li>\n<p>字节<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bS5qdWVqaW4uY24veW91dGhjYW1w\">青训营</span>课程</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWI=\">MDN</span> 中文文档</p>\n</li>\n</ul>\n",
            "tags": [
                "前端",
                "学习笔记",
                "Web",
                "前端",
                "笔记补完计划",
                "JavaScript"
            ]
        }
    ]
}